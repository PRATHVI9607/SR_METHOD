
ESP_WITH_ANOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a874  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800aa04  0800aa04  0000ba04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb0  0800abb0  0000c194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abb0  0800abb0  0000bbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb8  0800abb8  0000c194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb8  0800abb8  0000bbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abbc  0800abbc  0000bbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800abc0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000044  20000150  0800ad10  0000c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0000c194  2**0
                  CONTENTS
 11 .bss          000022b4  20000194  20000194  0000c194  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20002448  20002448  0000c194  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000c194  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b68  00000000  00000000  0000c1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003574  00000000  00000000  0001ed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fe8  00000000  00000000  000222a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bfd  00000000  00000000  00023288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025415  00000000  00000000  00023e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016ea9  00000000  00000000  0004929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d62c9  00000000  00000000  00060143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000087  00000000  00000000  0013640c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004834  00000000  00000000  00136494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0013acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000194 	.word	0x20000194
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9ec 	.word	0x0800a9ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000198 	.word	0x20000198
 80001cc:	0800a9ec 	.word	0x0800a9ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b988 	b.w	8000ef4 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	468e      	mov	lr, r1
 8000c04:	4604      	mov	r4, r0
 8000c06:	4688      	mov	r8, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14a      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d962      	bls.n	8000cd8 <__udivmoddi4+0xdc>
 8000c12:	fab2 f682 	clz	r6, r2
 8000c16:	b14e      	cbz	r6, 8000c2c <__udivmoddi4+0x30>
 8000c18:	f1c6 0320 	rsb	r3, r6, #32
 8000c1c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	40b7      	lsls	r7, r6
 8000c26:	ea43 0808 	orr.w	r8, r3, r8
 8000c2a:	40b4      	lsls	r4, r6
 8000c2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c30:	fa1f fc87 	uxth.w	ip, r7
 8000c34:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c42:	fb01 f20c 	mul.w	r2, r1, ip
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x62>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c50:	f080 80ea 	bcs.w	8000e28 <__udivmoddi4+0x22c>
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f240 80e7 	bls.w	8000e28 <__udivmoddi4+0x22c>
 8000c5a:	3902      	subs	r1, #2
 8000c5c:	443b      	add	r3, r7
 8000c5e:	1a9a      	subs	r2, r3, r2
 8000c60:	b2a3      	uxth	r3, r4
 8000c62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c72:	459c      	cmp	ip, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x8e>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7c:	f080 80d6 	bcs.w	8000e2c <__udivmoddi4+0x230>
 8000c80:	459c      	cmp	ip, r3
 8000c82:	f240 80d3 	bls.w	8000e2c <__udivmoddi4+0x230>
 8000c86:	443b      	add	r3, r7
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8e:	eba3 030c 	sub.w	r3, r3, ip
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa2>
 8000c96:	40f3      	lsrs	r3, r6
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xb6>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb0>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x14c>
 8000cba:	4573      	cmp	r3, lr
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xc8>
 8000cbe:	4282      	cmp	r2, r0
 8000cc0:	f200 8105 	bhi.w	8000ece <__udivmoddi4+0x2d2>
 8000cc4:	1a84      	subs	r4, r0, r2
 8000cc6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	4690      	mov	r8, r2
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	d0e5      	beq.n	8000c9e <__udivmoddi4+0xa2>
 8000cd2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd6:	e7e2      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f000 8090 	beq.w	8000dfe <__udivmoddi4+0x202>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f040 80a4 	bne.w	8000e30 <__udivmoddi4+0x234>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	0c03      	lsrs	r3, r0, #16
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	b280      	uxth	r0, r0
 8000cf2:	b2bc      	uxth	r4, r7
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cfa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d02:	fb04 f20c 	mul.w	r2, r4, ip
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x11e>
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d10:	d202      	bcs.n	8000d18 <__udivmoddi4+0x11c>
 8000d12:	429a      	cmp	r2, r3
 8000d14:	f200 80e0 	bhi.w	8000ed8 <__udivmoddi4+0x2dc>
 8000d18:	46c4      	mov	ip, r8
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d20:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d24:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d28:	fb02 f404 	mul.w	r4, r2, r4
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0x144>
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x142>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f200 80ca 	bhi.w	8000ed2 <__udivmoddi4+0x2d6>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x98>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa0e f401 	lsl.w	r4, lr, r1
 8000d58:	fa20 f306 	lsr.w	r3, r0, r6
 8000d5c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d60:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d64:	4323      	orrs	r3, r4
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	fa1f fc87 	uxth.w	ip, r7
 8000d6e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d72:	0c1c      	lsrs	r4, r3, #16
 8000d74:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d78:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d7c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1a0>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8e:	f080 809c 	bcs.w	8000eca <__udivmoddi4+0x2ce>
 8000d92:	45a6      	cmp	lr, r4
 8000d94:	f240 8099 	bls.w	8000eca <__udivmoddi4+0x2ce>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	eba4 040e 	sub.w	r4, r4, lr
 8000da0:	fa1f fe83 	uxth.w	lr, r3
 8000da4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da8:	fb09 4413 	mls	r4, r9, r3, r4
 8000dac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000db0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db4:	45a4      	cmp	ip, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1ce>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dbe:	f080 8082 	bcs.w	8000ec6 <__udivmoddi4+0x2ca>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d97f      	bls.n	8000ec6 <__udivmoddi4+0x2ca>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dce:	eba4 040c 	sub.w	r4, r4, ip
 8000dd2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd6:	4564      	cmp	r4, ip
 8000dd8:	4673      	mov	r3, lr
 8000dda:	46e1      	mov	r9, ip
 8000ddc:	d362      	bcc.n	8000ea4 <__udivmoddi4+0x2a8>
 8000dde:	d05f      	beq.n	8000ea0 <__udivmoddi4+0x2a4>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x1fe>
 8000de2:	ebb8 0203 	subs.w	r2, r8, r3
 8000de6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	fa22 f301 	lsr.w	r3, r2, r1
 8000df2:	431e      	orrs	r6, r3
 8000df4:	40cc      	lsrs	r4, r1
 8000df6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	e74f      	b.n	8000c9e <__udivmoddi4+0xa2>
 8000dfe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e02:	0c01      	lsrs	r1, r0, #16
 8000e04:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e08:	b280      	uxth	r0, r0
 8000e0a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4638      	mov	r0, r7
 8000e12:	463c      	mov	r4, r7
 8000e14:	46b8      	mov	r8, r7
 8000e16:	46be      	mov	lr, r7
 8000e18:	2620      	movs	r6, #32
 8000e1a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1e:	eba2 0208 	sub.w	r2, r2, r8
 8000e22:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e26:	e766      	b.n	8000cf6 <__udivmoddi4+0xfa>
 8000e28:	4601      	mov	r1, r0
 8000e2a:	e718      	b.n	8000c5e <__udivmoddi4+0x62>
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	e72c      	b.n	8000c8a <__udivmoddi4+0x8e>
 8000e30:	f1c6 0220 	rsb	r2, r6, #32
 8000e34:	fa2e f302 	lsr.w	r3, lr, r2
 8000e38:	40b7      	lsls	r7, r6
 8000e3a:	40b1      	lsls	r1, r6
 8000e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e44:	430a      	orrs	r2, r1
 8000e46:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e50:	0c11      	lsrs	r1, r2, #16
 8000e52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e56:	fb08 f904 	mul.w	r9, r8, r4
 8000e5a:	40b0      	lsls	r0, r6
 8000e5c:	4589      	cmp	r9, r1
 8000e5e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e62:	b280      	uxth	r0, r0
 8000e64:	d93e      	bls.n	8000ee4 <__udivmoddi4+0x2e8>
 8000e66:	1879      	adds	r1, r7, r1
 8000e68:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e6c:	d201      	bcs.n	8000e72 <__udivmoddi4+0x276>
 8000e6e:	4589      	cmp	r9, r1
 8000e70:	d81f      	bhi.n	8000eb2 <__udivmoddi4+0x2b6>
 8000e72:	eba1 0109 	sub.w	r1, r1, r9
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	b292      	uxth	r2, r2
 8000e84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e88:	4542      	cmp	r2, r8
 8000e8a:	d229      	bcs.n	8000ee0 <__udivmoddi4+0x2e4>
 8000e8c:	18ba      	adds	r2, r7, r2
 8000e8e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e92:	d2c4      	bcs.n	8000e1e <__udivmoddi4+0x222>
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d2c2      	bcs.n	8000e1e <__udivmoddi4+0x222>
 8000e98:	f1a9 0102 	sub.w	r1, r9, #2
 8000e9c:	443a      	add	r2, r7
 8000e9e:	e7be      	b.n	8000e1e <__udivmoddi4+0x222>
 8000ea0:	45f0      	cmp	r8, lr
 8000ea2:	d29d      	bcs.n	8000de0 <__udivmoddi4+0x1e4>
 8000ea4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eac:	3801      	subs	r0, #1
 8000eae:	46e1      	mov	r9, ip
 8000eb0:	e796      	b.n	8000de0 <__udivmoddi4+0x1e4>
 8000eb2:	eba7 0909 	sub.w	r9, r7, r9
 8000eb6:	4449      	add	r1, r9
 8000eb8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ebc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec0:	fb09 f804 	mul.w	r8, r9, r4
 8000ec4:	e7db      	b.n	8000e7e <__udivmoddi4+0x282>
 8000ec6:	4673      	mov	r3, lr
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1ce>
 8000eca:	4650      	mov	r0, sl
 8000ecc:	e766      	b.n	8000d9c <__udivmoddi4+0x1a0>
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e6fd      	b.n	8000cce <__udivmoddi4+0xd2>
 8000ed2:	443b      	add	r3, r7
 8000ed4:	3a02      	subs	r2, #2
 8000ed6:	e733      	b.n	8000d40 <__udivmoddi4+0x144>
 8000ed8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e71c      	b.n	8000d1a <__udivmoddi4+0x11e>
 8000ee0:	4649      	mov	r1, r9
 8000ee2:	e79c      	b.n	8000e1e <__udivmoddi4+0x222>
 8000ee4:	eba1 0109 	sub.w	r1, r1, r9
 8000ee8:	46c4      	mov	ip, r8
 8000eea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eee:	fb09 f804 	mul.w	r8, r9, r4
 8000ef2:	e7c4      	b.n	8000e7e <__udivmoddi4+0x282>

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f0c:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <MX_ADC1_Init+0x9c>)
 8000f0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f38:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <MX_ADC1_Init+0xa0>)
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f5a:	f000 fdf1 	bl	8001b40 <HAL_ADC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f64:	f000 fc7c 	bl	8001860 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_ADC1_Init+0x98>)
 8000f7a:	f000 ffc3 	bl	8001f04 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f84:	f000 fc6c 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001b0 	.word	0x200001b0
 8000f94:	40012000 	.word	0x40012000
 8000f98:	0f000001 	.word	0x0f000001

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	@ (8001018 <HAL_ADC_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d127      	bne.n	800100e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_ADC_MspInit+0x80>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <HAL_ADC_MspInit+0x80>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <HAL_ADC_MspInit+0x80>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <HAL_ADC_MspInit+0x80>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_ADC_MspInit+0x80>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_ADC_MspInit+0x80>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8000ff6:	2341      	movs	r3, #65	@ 0x41
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <HAL_ADC_MspInit+0x84>)
 800100a:	f001 faab 	bl	8002564 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	@ 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40012000 	.word	0x40012000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_GPIO_Init+0x98>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a1e      	ldr	r2, [pc, #120]	@ (80010bc <MX_GPIO_Init+0x98>)
 8001044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <MX_GPIO_Init+0x98>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <MX_GPIO_Init+0x98>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	@ (80010bc <MX_GPIO_Init+0x98>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <MX_GPIO_Init+0x98>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_GPIO_Init+0x98>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <MX_GPIO_Init+0x98>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_GPIO_Init+0x98>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2120      	movs	r1, #32
 8001092:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <MX_GPIO_Init+0x9c>)
 8001094:	f001 fc1a 	bl	80028cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001098:	2320      	movs	r3, #32
 800109a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <MX_GPIO_Init+0x9c>)
 80010b0:	f001 fa58 	bl	8002564 <HAL_GPIO_Init>

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <MX_I2C1_Init+0x54>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010d0:	4a12      	ldr	r2, [pc, #72]	@ (800111c <MX_I2C1_Init+0x58>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <MX_I2C1_Init+0x50>)
 8001102:	f001 fbfd 	bl	8002900 <HAL_I2C_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 fba8 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001f8 	.word	0x200001f8
 8001118:	40005400 	.word	0x40005400
 800111c:	000186a0 	.word	0x000186a0

08001120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <HAL_I2C_MspInit+0x84>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12b      	bne.n	800119a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_I2C_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_I2C_MspInit+0x88>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800115e:	23c0      	movs	r3, #192	@ 0xc0
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <HAL_I2C_MspInit+0x8c>)
 800117a:	f001 f9f3 	bl	8002564 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_I2C_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_I2C_MspInit+0x88>)
 8001188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_I2C_MspInit+0x88>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400

080011b0 <usb_printf>:

float acc_buffer[ACC_BUFFER_SIZE];
uint16_t water_level_full = 0;

// === USB Print ===
void usb_printf(const char *fmt, ...) {
 80011b0:	b40f      	push	{r0, r1, r2, r3}
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b0a2      	sub	sp, #136	@ 0x88
 80011b6:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, fmt);
 80011b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011bc:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80011be:	f107 0008 	add.w	r0, r7, #8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	f008 fefb 	bl	8009fc4 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7fe fffc 	bl	80001d0 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f007 fe82 	bl	8008eec <CDC_Transmit_FS>
    HAL_Delay(5);
 80011e8:	2005      	movs	r0, #5
 80011ea:	f000 fc85 	bl	8001af8 <HAL_Delay>
}
 80011ee:	bf00      	nop
 80011f0:	3788      	adds	r7, #136	@ 0x88
 80011f2:	46bd      	mov	sp, r7
 80011f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f8:	b004      	add	sp, #16
 80011fa:	4770      	bx	lr

080011fc <Read_ADXL345>:

// === ADXL345 ===
HAL_StatusTypeDef Read_ADXL345(vector3_t *accel) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af04      	add	r7, sp, #16
 8001202:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, ADXL345_REG_DATAX0, 1, buf, 6, 100) != HAL_OK)
 8001204:	2364      	movs	r3, #100	@ 0x64
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2306      	movs	r3, #6
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	2232      	movs	r2, #50	@ 0x32
 8001216:	21a6      	movs	r1, #166	@ 0xa6
 8001218:	4815      	ldr	r0, [pc, #84]	@ (8001270 <Read_ADXL345+0x74>)
 800121a:	f001 fdaf 	bl	8002d7c <HAL_I2C_Mem_Read>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <Read_ADXL345+0x2c>
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e01e      	b.n	8001266 <Read_ADXL345+0x6a>

    accel->x = (int16_t)((buf[1] << 8) | buf[0]);
 8001228:	7a7b      	ldrb	r3, [r7, #9]
 800122a:	b21b      	sxth	r3, r3
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	7a3b      	ldrb	r3, [r7, #8]
 8001232:	b21b      	sxth	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b21a      	sxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)((buf[3] << 8) | buf[2]);
 800123c:	7afb      	ldrb	r3, [r7, #11]
 800123e:	b21b      	sxth	r3, r3
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)((buf[5] << 8) | buf[4]);
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	b21b      	sxth	r3, r3
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	7b3b      	ldrb	r3, [r7, #12]
 800125a:	b21b      	sxth	r3, r3
 800125c:	4313      	orrs	r3, r2
 800125e:	b21a      	sxth	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	809a      	strh	r2, [r3, #4]
    return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001f8 	.word	0x200001f8

08001274 <fill_accelerometer_buffer>:

void fill_accelerometer_buffer(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
    vector3_t acc;
    for (int i = 0; i < ACC_BUFFER_SIZE / 3; i++) {
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	e048      	b.n	8001312 <fill_accelerometer_buffer+0x9e>
        while (Read_ADXL345(&acc) != HAL_OK);
 8001280:	bf00      	nop
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffb9 	bl	80011fc <Read_ADXL345>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f8      	bne.n	8001282 <fill_accelerometer_buffer+0xe>
        acc_buffer[i * 3 + 0] = acc.x * 0.0039f;
 8001290:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001324 <fill_accelerometer_buffer+0xb0>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001328 <fill_accelerometer_buffer+0xb4>)
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	edc3 7a00 	vstr	s15, [r3]
        acc_buffer[i * 3 + 1] = acc.y * 0.0039f;
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	3301      	adds	r3, #1
 80012cc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001324 <fill_accelerometer_buffer+0xb0>
 80012d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <fill_accelerometer_buffer+0xb4>)
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	edc3 7a00 	vstr	s15, [r3]
        acc_buffer[i * 3 + 2] = acc.z * 0.0039f;
 80012de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	3302      	adds	r3, #2
 80012f4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001324 <fill_accelerometer_buffer+0xb0>
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <fill_accelerometer_buffer+0xb4>)
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	edc3 7a00 	vstr	s15, [r3]
        HAL_Delay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f000 fbf6 	bl	8001af8 <HAL_Delay>
    for (int i = 0; i < ACC_BUFFER_SIZE / 3; i++) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b63      	cmp	r3, #99	@ 0x63
 8001316:	ddb3      	ble.n	8001280 <fill_accelerometer_buffer+0xc>
    }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	3b7f9724 	.word	0x3b7f9724
 8001328:	2000024c 	.word	0x2000024c

0800132c <read_adc_channel>:

// === ADC ===
uint16_t read_adc_channel(uint32_t channel) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	480b      	ldr	r0, [pc, #44]	@ (8001384 <read_adc_channel+0x58>)
 8001356:	f000 fdd5 	bl	8001f04 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 800135a:	480a      	ldr	r0, [pc, #40]	@ (8001384 <read_adc_channel+0x58>)
 800135c:	f000 fc34 	bl	8001bc8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <read_adc_channel+0x58>)
 8001366:	f000 fd34 	bl	8001dd2 <HAL_ADC_PollForConversion>
    uint16_t value = HAL_ADC_GetValue(&hadc1);
 800136a:	4806      	ldr	r0, [pc, #24]	@ (8001384 <read_adc_channel+0x58>)
 800136c:	f000 fdbc 	bl	8001ee8 <HAL_ADC_GetValue>
 8001370:	4603      	mov	r3, r0
 8001372:	83fb      	strh	r3, [r7, #30]
    HAL_ADC_Stop(&hadc1);
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <read_adc_channel+0x58>)
 8001376:	f000 fcf9 	bl	8001d6c <HAL_ADC_Stop>
    return value;
 800137a:	8bfb      	ldrh	r3, [r7, #30]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001b0 	.word	0x200001b0

08001388 <read_water_level>:

uint16_t read_water_level(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
    return read_adc_channel(WATER_SENSOR_CHANNEL);
 800138c:	2006      	movs	r0, #6
 800138e:	f7ff ffcd 	bl	800132c <read_adc_channel>
 8001392:	4603      	mov	r3, r0
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}

08001398 <DS18B20_Pin_Output>:

// === DS18B20 One-Wire Functions ===
void DS18B20_Pin_Output(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 80013ac:	2310      	movs	r3, #16
 80013ae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4803      	ldr	r0, [pc, #12]	@ (80013cc <DS18B20_Pin_Output+0x34>)
 80013be:	f001 f8d1 	bl	8002564 <HAL_GPIO_Init>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020000 	.word	0x40020000

080013d0 <DS18B20_Pin_Input>:

void DS18B20_Pin_Input(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DS18B20_PIN;
 80013e4:	2310      	movs	r3, #16
 80013e6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DS18B20_PORT, &GPIO_InitStruct);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <DS18B20_Pin_Input+0x34>)
 80013f6:	f001 f8b5 	bl	8002564 <HAL_GPIO_Init>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40020000 	.word	0x40020000

08001408 <DS18B20_Reset>:

uint8_t DS18B20_Reset(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Output();
 8001412:	f7ff ffc1 	bl	8001398 <DS18B20_Pin_Output>
    HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <DS18B20_Reset+0x4c>)
 800141c:	f001 fa56 	bl	80028cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001420:	2001      	movs	r0, #1
 8001422:	f000 fb69 	bl	8001af8 <HAL_Delay>
    DS18B20_Pin_Input();
 8001426:	f7ff ffd3 	bl	80013d0 <DS18B20_Pin_Input>
    HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 fb64 	bl	8001af8 <HAL_Delay>
    if (!HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)) response = 1;
 8001430:	2110      	movs	r1, #16
 8001432:	4808      	ldr	r0, [pc, #32]	@ (8001454 <DS18B20_Reset+0x4c>)
 8001434:	f001 fa32 	bl	800289c <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <DS18B20_Reset+0x3a>
 800143e:	2301      	movs	r3, #1
 8001440:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 fb58 	bl	8001af8 <HAL_Delay>
    return response;
 8001448:	79fb      	ldrb	r3, [r7, #7]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40020000 	.word	0x40020000

08001458 <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Output();
 8001462:	f7ff ff99 	bl	8001398 <DS18B20_Pin_Output>
    for (int i = 0; i < 8; i++) {
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e017      	b.n	800149c <DS18B20_Write+0x44>
        HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	2110      	movs	r1, #16
 8001470:	480e      	ldr	r0, [pc, #56]	@ (80014ac <DS18B20_Write+0x54>)
 8001472:	f001 fa2b 	bl	80028cc <HAL_GPIO_WritePin>
        if (data & (1 << i))
 8001476:	79fa      	ldrb	r2, [r7, #7]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	fa42 f303 	asr.w	r3, r2, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d004      	beq.n	8001490 <DS18B20_Write+0x38>
            HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2110      	movs	r1, #16
 800148a:	4808      	ldr	r0, [pc, #32]	@ (80014ac <DS18B20_Write+0x54>)
 800148c:	f001 fa1e 	bl	80028cc <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fb31 	bl	8001af8 <HAL_Delay>
    for (int i = 0; i < 8; i++) {
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	3301      	adds	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b07      	cmp	r3, #7
 80014a0:	dde4      	ble.n	800146c <DS18B20_Write+0x14>
    }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40020000 	.word	0x40020000

080014b0 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
    DS18B20_Pin_Input();
 80014ba:	f7ff ff89 	bl	80013d0 <DS18B20_Pin_Input>
    for (int i = 0; i < 8; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	e016      	b.n	80014f2 <DS18B20_Read+0x42>
        if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 80014c4:	2110      	movs	r1, #16
 80014c6:	480f      	ldr	r0, [pc, #60]	@ (8001504 <DS18B20_Read+0x54>)
 80014c8:	f001 f9e8 	bl	800289c <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <DS18B20_Read+0x36>
            value |= (1 << i);
 80014d2:	2201      	movs	r2, #1
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	71fb      	strb	r3, [r7, #7]
        HAL_Delay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fb06 	bl	8001af8 <HAL_Delay>
    for (int i = 0; i < 8; i++) {
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b07      	cmp	r3, #7
 80014f6:	dde5      	ble.n	80014c4 <DS18B20_Read+0x14>
    }
    return value;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020000 	.word	0x40020000

08001508 <DS18B20_GetTemp>:

float DS18B20_GetTemp(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
    uint8_t temp_l, temp_h;
    int16_t temp;
    DS18B20_Reset();
 800150e:	f7ff ff7b 	bl	8001408 <DS18B20_Reset>
    DS18B20_Write(0xCC);
 8001512:	20cc      	movs	r0, #204	@ 0xcc
 8001514:	f7ff ffa0 	bl	8001458 <DS18B20_Write>
    DS18B20_Write(0x44);
 8001518:	2044      	movs	r0, #68	@ 0x44
 800151a:	f7ff ff9d 	bl	8001458 <DS18B20_Write>
    HAL_Delay(750);
 800151e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001522:	f000 fae9 	bl	8001af8 <HAL_Delay>
    DS18B20_Reset();
 8001526:	f7ff ff6f 	bl	8001408 <DS18B20_Reset>
    DS18B20_Write(0xCC);
 800152a:	20cc      	movs	r0, #204	@ 0xcc
 800152c:	f7ff ff94 	bl	8001458 <DS18B20_Write>
    DS18B20_Write(0xBE);
 8001530:	20be      	movs	r0, #190	@ 0xbe
 8001532:	f7ff ff91 	bl	8001458 <DS18B20_Write>
    temp_l = DS18B20_Read();
 8001536:	f7ff ffbb 	bl	80014b0 <DS18B20_Read>
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
    temp_h = DS18B20_Read();
 800153e:	f7ff ffb7 	bl	80014b0 <DS18B20_Read>
 8001542:	4603      	mov	r3, r0
 8001544:	71bb      	strb	r3, [r7, #6]
    temp = (temp_h << 8) | temp_l;
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	b21b      	sxth	r3, r3
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	80bb      	strh	r3, [r7, #4]
    return temp / 16.0;
 8001556:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffe2 	bl	8000524 <__aeabi_i2d>
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <DS18B20_GetTemp+0x80>)
 8001566:	f7ff f971 	bl	800084c <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fadb 	bl	8000b2c <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	ee07 3a90 	vmov	s15, r3
}
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40300000 	.word	0x40300000

0800158c <calibrate_full_water_level>:

// === Water Pump ===
void calibrate_full_water_level(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    usb_printf("Calibrating full water level...\r\n");
 8001590:	480a      	ldr	r0, [pc, #40]	@ (80015bc <calibrate_full_water_level+0x30>)
 8001592:	f7ff fe0d 	bl	80011b0 <usb_printf>
    HAL_Delay(5000);
 8001596:	f241 3088 	movw	r0, #5000	@ 0x1388
 800159a:	f000 faad 	bl	8001af8 <HAL_Delay>
    water_level_full = read_water_level();
 800159e:	f7ff fef3 	bl	8001388 <read_water_level>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <calibrate_full_water_level+0x34>)
 80015a8:	801a      	strh	r2, [r3, #0]
    usb_printf("Water level full calibrated to: %d\r\n", water_level_full);
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <calibrate_full_water_level+0x34>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <calibrate_full_water_level+0x38>)
 80015b2:	f7ff fdfd 	bl	80011b0 <usb_printf>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	0800aa04 	.word	0x0800aa04
 80015c0:	200006fc 	.word	0x200006fc
 80015c4:	0800aa28 	.word	0x0800aa28

080015c8 <pump_on>:

void pump_on(void) { HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_PIN, GPIO_PIN_SET); }
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	2201      	movs	r2, #1
 80015ce:	2120      	movs	r1, #32
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <pump_on+0x14>)
 80015d2:	f001 f97b 	bl	80028cc <HAL_GPIO_WritePin>
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020000 	.word	0x40020000

080015e0 <pump_off>:
void pump_off(void) { HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_PIN, GPIO_PIN_RESET); }
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	2200      	movs	r2, #0
 80015e6:	2120      	movs	r1, #32
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <pump_off+0x14>)
 80015ea:	f001 f96f 	bl	80028cc <HAL_GPIO_WritePin>
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020000 	.word	0x40020000

080015f8 <main>:

int main(void) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	@ 0x2c
 80015fc:	af04      	add	r7, sp, #16
    HAL_Init();
 80015fe:	f000 fa09 	bl	8001a14 <HAL_Init>
    SystemClock_Config();
 8001602:	f000 f8c5 	bl	8001790 <SystemClock_Config>

    MX_GPIO_Init();
 8001606:	f7ff fd0d 	bl	8001024 <MX_GPIO_Init>
    MX_I2C1_Init();
 800160a:	f7ff fd5b 	bl	80010c4 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 800160e:	f007 fbaf 	bl	8008d70 <MX_USB_DEVICE_Init>
    MX_ADC1_Init();
 8001612:	f7ff fc71 	bl	8000ef8 <MX_ADC1_Init>

    HAL_Delay(500);
 8001616:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800161a:	f000 fa6d 	bl	8001af8 <HAL_Delay>
    usb_printf("STM32 USB Ready\r\n");
 800161e:	484c      	ldr	r0, [pc, #304]	@ (8001750 <main+0x158>)
 8001620:	f7ff fdc6 	bl	80011b0 <usb_printf>

    uint8_t cmd = 0x08;
 8001624:	2308      	movs	r3, #8
 8001626:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, ADXL345_REG_POWER_CTL, 1, &cmd, 1, 100);
 8001628:	2364      	movs	r3, #100	@ 0x64
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	2301      	movs	r3, #1
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	222d      	movs	r2, #45	@ 0x2d
 8001638:	21a6      	movs	r1, #166	@ 0xa6
 800163a:	4846      	ldr	r0, [pc, #280]	@ (8001754 <main+0x15c>)
 800163c:	f001 faa4 	bl	8002b88 <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 8001640:	2064      	movs	r0, #100	@ 0x64
 8001642:	f000 fa59 	bl	8001af8 <HAL_Delay>

    enum neai_state error_code = neai_anomalydetection_init();
 8001646:	f008 fc25 	bl	8009e94 <neai_anomalydetection_init>
 800164a:	4603      	mov	r3, r0
 800164c:	757b      	strb	r3, [r7, #21]
    usb_printf("NanoEdgeAI init: %s\r\n", error_code == NEAI_OK ? "OK" : "ERROR");
 800164e:	7d7b      	ldrb	r3, [r7, #21]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <main+0x60>
 8001654:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <main+0x160>)
 8001656:	e000      	b.n	800165a <main+0x62>
 8001658:	4b40      	ldr	r3, [pc, #256]	@ (800175c <main+0x164>)
 800165a:	4619      	mov	r1, r3
 800165c:	4840      	ldr	r0, [pc, #256]	@ (8001760 <main+0x168>)
 800165e:	f7ff fda7 	bl	80011b0 <usb_printf>

    for (uint16_t i = 0; i < 20; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	82fb      	strh	r3, [r7, #22]
 8001666:	e00d      	b.n	8001684 <main+0x8c>
        usb_printf("Learning iteration %d/20\r\n", i + 1);
 8001668:	8afb      	ldrh	r3, [r7, #22]
 800166a:	3301      	adds	r3, #1
 800166c:	4619      	mov	r1, r3
 800166e:	483d      	ldr	r0, [pc, #244]	@ (8001764 <main+0x16c>)
 8001670:	f7ff fd9e 	bl	80011b0 <usb_printf>
        fill_accelerometer_buffer();
 8001674:	f7ff fdfe 	bl	8001274 <fill_accelerometer_buffer>
        neai_anomalydetection_learn(acc_buffer);
 8001678:	483b      	ldr	r0, [pc, #236]	@ (8001768 <main+0x170>)
 800167a:	f008 f8a9 	bl	80097d0 <neai_anomalydetection_learn>
    for (uint16_t i = 0; i < 20; i++) {
 800167e:	8afb      	ldrh	r3, [r7, #22]
 8001680:	3301      	adds	r3, #1
 8001682:	82fb      	strh	r3, [r7, #22]
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	2b13      	cmp	r3, #19
 8001688:	d9ee      	bls.n	8001668 <main+0x70>
    }
    usb_printf("Learning finished\r\n");
 800168a:	4838      	ldr	r0, [pc, #224]	@ (800176c <main+0x174>)
 800168c:	f7ff fd90 	bl	80011b0 <usb_printf>

    calibrate_full_water_level();
 8001690:	f7ff ff7c 	bl	800158c <calibrate_full_water_level>
    uint8_t similarity = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	71bb      	strb	r3, [r7, #6]

    while (1) {
        // ADXL345 anomaly detection
        fill_accelerometer_buffer();
 8001698:	f7ff fdec 	bl	8001274 <fill_accelerometer_buffer>
        neai_anomalydetection_detect(acc_buffer, &similarity);
 800169c:	1dbb      	adds	r3, r7, #6
 800169e:	4619      	mov	r1, r3
 80016a0:	4831      	ldr	r0, [pc, #196]	@ (8001768 <main+0x170>)
 80016a2:	f008 fa79 	bl	8009b98 <neai_anomalydetection_detect>

        if (similarity >= 90)
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	2b59      	cmp	r3, #89	@ 0x59
 80016aa:	d905      	bls.n	80016b8 <main+0xc0>
            usb_printf("NOMINAL,%d\r\n", similarity);
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	4619      	mov	r1, r3
 80016b0:	482f      	ldr	r0, [pc, #188]	@ (8001770 <main+0x178>)
 80016b2:	f7ff fd7d 	bl	80011b0 <usb_printf>
 80016b6:	e004      	b.n	80016c2 <main+0xca>
        else
            usb_printf("ANOMALY,%d\r\n", similarity);
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	4619      	mov	r1, r3
 80016bc:	482d      	ldr	r0, [pc, #180]	@ (8001774 <main+0x17c>)
 80016be:	f7ff fd77 	bl	80011b0 <usb_printf>

        // Water level
        uint16_t water_level = read_water_level();
 80016c2:	f7ff fe61 	bl	8001388 <read_water_level>
 80016c6:	4603      	mov	r3, r0
 80016c8:	827b      	strh	r3, [r7, #18]
        float level_percent = (100.0f * water_level) / water_level_full;
 80016ca:	8a7b      	ldrh	r3, [r7, #18]
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001778 <main+0x180>
 80016d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <main+0x184>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ec:	edc7 7a03 	vstr	s15, [r7, #12]
        usb_printf("WaterLevel,%d,%.2f%%\r\n", water_level, level_percent);
 80016f0:	8a7c      	ldrh	r4, [r7, #18]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f7fe ff28 	bl	8000548 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4621      	mov	r1, r4
 80016fe:	4820      	ldr	r0, [pc, #128]	@ (8001780 <main+0x188>)
 8001700:	f7ff fd56 	bl	80011b0 <usb_printf>

        // Pump control
        if (level_percent < WATER_LOW_THRESHOLD_PERCENT) {
 8001704:	edd7 7a03 	vldr	s15, [r7, #12]
 8001708:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800170c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	d505      	bpl.n	8001722 <main+0x12a>
            pump_on();
 8001716:	f7ff ff57 	bl	80015c8 <pump_on>
            usb_printf("Pump ON\r\n");
 800171a:	481a      	ldr	r0, [pc, #104]	@ (8001784 <main+0x18c>)
 800171c:	f7ff fd48 	bl	80011b0 <usb_printf>
 8001720:	e004      	b.n	800172c <main+0x134>
        } else {
            pump_off();
 8001722:	f7ff ff5d 	bl	80015e0 <pump_off>
            usb_printf("Pump OFF\r\n");
 8001726:	4818      	ldr	r0, [pc, #96]	@ (8001788 <main+0x190>)
 8001728:	f7ff fd42 	bl	80011b0 <usb_printf>
        }

        // DS18B20 Temperature
        float temperature = DS18B20_GetTemp();
 800172c:	f7ff feec 	bl	8001508 <DS18B20_GetTemp>
 8001730:	ed87 0a02 	vstr	s0, [r7, #8]
        usb_printf("WaterTemp,%.2fC\r\n", temperature);
 8001734:	68b8      	ldr	r0, [r7, #8]
 8001736:	f7fe ff07 	bl	8000548 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4813      	ldr	r0, [pc, #76]	@ (800178c <main+0x194>)
 8001740:	f7ff fd36 	bl	80011b0 <usb_printf>

        HAL_Delay(1000);
 8001744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001748:	f000 f9d6 	bl	8001af8 <HAL_Delay>
    while (1) {
 800174c:	e7a4      	b.n	8001698 <main+0xa0>
 800174e:	bf00      	nop
 8001750:	0800aa50 	.word	0x0800aa50
 8001754:	200001f8 	.word	0x200001f8
 8001758:	0800aa64 	.word	0x0800aa64
 800175c:	0800aa68 	.word	0x0800aa68
 8001760:	0800aa70 	.word	0x0800aa70
 8001764:	0800aa88 	.word	0x0800aa88
 8001768:	2000024c 	.word	0x2000024c
 800176c:	0800aaa4 	.word	0x0800aaa4
 8001770:	0800aab8 	.word	0x0800aab8
 8001774:	0800aac8 	.word	0x0800aac8
 8001778:	42c80000 	.word	0x42c80000
 800177c:	200006fc 	.word	0x200006fc
 8001780:	0800aad8 	.word	0x0800aad8
 8001784:	0800aaf0 	.word	0x0800aaf0
 8001788:	0800aafc 	.word	0x0800aafc
 800178c:	0800ab08 	.word	0x0800ab08

08001790 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	@ 0x50
 8001794:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2230      	movs	r2, #48	@ 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f008 fc1e 	bl	8009fe0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <SystemClock_Config+0xc8>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <SystemClock_Config+0xc8>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <SystemClock_Config+0xc8>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <SystemClock_Config+0xcc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a20      	ldr	r2, [pc, #128]	@ (800185c <SystemClock_Config+0xcc>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <SystemClock_Config+0xcc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ec:	2301      	movs	r3, #1
 80017ee:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f6:	2302      	movs	r3, #2
 80017f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8001800:	2304      	movs	r3, #4
 8001802:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 72;
 8001804:	2348      	movs	r3, #72	@ 0x48
 8001806:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	2302      	movs	r3, #2
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800180c:	2303      	movs	r3, #3
 800180e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fae9 	bl	8004dec <HAL_RCC_OscConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x94>
 8001820:	f000 f81e 	bl	8001860 <Error_Handler>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001824:	230f      	movs	r3, #15
 8001826:	60fb      	str	r3, [r7, #12]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001834:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) Error_Handler();
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	2102      	movs	r1, #2
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fd4b 	bl	80052dc <HAL_RCC_ClockConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SystemClock_Config+0xc0>
 800184c:	f000 f808 	bl	8001860 <Error_Handler>
}
 8001850:	bf00      	nop
 8001852:	3750      	adds	r7, #80	@ 0x50
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40023800 	.word	0x40023800
 800185c:	40007000 	.word	0x40007000

08001860 <Error_Handler>:

void Error_Handler(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
    __disable_irq();
    while (1) {}
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <Error_Handler+0x8>

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	4a0f      	ldr	r2, [pc, #60]	@ (80018b8 <HAL_MspInit+0x4c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	6453      	str	r3, [r2, #68]	@ 0x44
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018aa:	2007      	movs	r0, #7
 80018ac:	f000 fe18 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f8d1 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <OTG_FS_IRQHandler+0x10>)
 8001922:	f002 f955 	bl	8003bd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20001be8 	.word	0x20001be8

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f008 fb46 	bl	8009ff0 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20020000 	.word	0x20020000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000700 	.word	0x20000700
 8001998:	20002448 	.word	0x20002448

0800199c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019c4:	f7ff ffea 	bl	800199c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f008 fb05 	bl	8009ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f2:	f7ff fe01 	bl	80015f8 <main>
  bx  lr    
 80019f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001a04:	0800abc0 	.word	0x0800abc0
  ldr r2, =_sbss
 8001a08:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8001a0c:	20002448 	.word	0x20002448

08001a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC_IRQHandler>
	...

08001a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <HAL_Init+0x40>)
 8001a1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <HAL_Init+0x40>)
 8001a2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a07      	ldr	r2, [pc, #28]	@ (8001a54 <HAL_Init+0x40>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 fd4f 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 f808 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a48:	f7ff ff10 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x54>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_InitTick+0x58>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 fd67 	bl	800254a <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00e      	b.n	8001aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b0f      	cmp	r3, #15
 8001a8a:	d80a      	bhi.n	8001aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f000 fd2f 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a98:	4a06      	ldr	r2, [pc, #24]	@ (8001ab4 <HAL_InitTick+0x5c>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000704 	.word	0x20000704

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000704 	.word	0x20000704

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000008 	.word	0x20000008

08001b40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e033      	b.n	8001bbe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fa1c 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b86:	f023 0302 	bic.w	r3, r3, #2
 8001b8a:	f043 0202 	orr.w	r2, r3, #2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fad8 	bl	8002148 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bae:	e001      	b.n	8001bb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Start+0x1a>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e0b2      	b.n	8001d48 <HAL_ADC_Start+0x180>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d018      	beq.n	8001c2a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c08:	4b52      	ldr	r3, [pc, #328]	@ (8001d54 <HAL_ADC_Start+0x18c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	@ (8001d58 <HAL_ADC_Start+0x190>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9a      	lsrs	r2, r3, #18
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f9      	bne.n	8001c1e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d17a      	bne.n	8001d2e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d007      	beq.n	8001c6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c76:	d106      	bne.n	8001c86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f023 0206 	bic.w	r2, r3, #6
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c84:	e002      	b.n	8001c8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c94:	4b31      	ldr	r3, [pc, #196]	@ (8001d5c <HAL_ADC_Start+0x194>)
 8001c96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ca0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d12a      	bne.n	8001d04 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d60 <HAL_ADC_Start+0x198>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d015      	beq.n	8001ce4 <HAL_ADC_Start+0x11c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a29      	ldr	r2, [pc, #164]	@ (8001d64 <HAL_ADC_Start+0x19c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_Start+0x106>
 8001cc2:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_ADC_Start+0x194>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a25      	ldr	r2, [pc, #148]	@ (8001d68 <HAL_ADC_Start+0x1a0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d136      	bne.n	8001d46 <HAL_ADC_Start+0x17e>
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_ADC_Start+0x194>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d130      	bne.n	8001d46 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d129      	bne.n	8001d46 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	e020      	b.n	8001d46 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_ADC_Start+0x198>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d11b      	bne.n	8001d46 <HAL_ADC_Start+0x17e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d114      	bne.n	8001d46 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e00b      	b.n	8001d46 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	20000000 	.word	0x20000000
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	40012300 	.word	0x40012300
 8001d60:	40012000 	.word	0x40012000
 8001d64:	40012100 	.word	0x40012100
 8001d68:	40012200 	.word	0x40012200

08001d6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_ADC_Stop+0x16>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e021      	b.n	8001dc6 <HAL_ADC_Stop+0x5a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dee:	d113      	bne.n	8001e18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e063      	b.n	8001ee0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e18:	f7ff fe62 	bl	8001ae0 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e1e:	e021      	b.n	8001e64 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	d01d      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x6c>
 8001e2e:	f7ff fe57 	bl	8001ae0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d212      	bcs.n	8001e64 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d00b      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e03d      	b.n	8001ee0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d1d6      	bne.n	8001e20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0212 	mvn.w	r2, #18
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d123      	bne.n	8001ede <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11f      	bne.n	8001ede <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d111      	bne.n	8001ede <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f043 0201 	orr.w	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x1c>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e105      	b.n	800212c <HAL_ADC_ConfigChannel+0x228>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d925      	bls.n	8001f7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	3b1e      	subs	r3, #30
 8001f46:	2207      	movs	r2, #7
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	400a      	ands	r2, r1
 8001f54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68d9      	ldr	r1, [r3, #12]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	4603      	mov	r3, r0
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3b1e      	subs	r3, #30
 8001f70:	409a      	lsls	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	e022      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6919      	ldr	r1, [r3, #16]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	2207      	movs	r2, #7
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4403      	add	r3, r0
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d824      	bhi.n	8002014 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b05      	subs	r3, #5
 8001fdc:	221f      	movs	r2, #31
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	3b05      	subs	r3, #5
 8002006:	fa00 f203 	lsl.w	r2, r0, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	635a      	str	r2, [r3, #52]	@ 0x34
 8002012:	e04c      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d824      	bhi.n	8002066 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b23      	subs	r3, #35	@ 0x23
 800202e:	221f      	movs	r2, #31
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43da      	mvns	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	400a      	ands	r2, r1
 800203c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	3b23      	subs	r3, #35	@ 0x23
 8002058:	fa00 f203 	lsl.w	r2, r0, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
 8002064:	e023      	b.n	80020ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b41      	subs	r3, #65	@ 0x41
 8002078:	221f      	movs	r2, #31
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b41      	subs	r3, #65	@ 0x41
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ae:	4b22      	ldr	r3, [pc, #136]	@ (8002138 <HAL_ADC_ConfigChannel+0x234>)
 80020b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a21      	ldr	r2, [pc, #132]	@ (800213c <HAL_ADC_ConfigChannel+0x238>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d109      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1cc>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b12      	cmp	r3, #18
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a19      	ldr	r2, [pc, #100]	@ (800213c <HAL_ADC_ConfigChannel+0x238>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d123      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b10      	cmp	r3, #16
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_ConfigChannel+0x1e6>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	d11b      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d111      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_ADC_ConfigChannel+0x23c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <HAL_ADC_ConfigChannel+0x240>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9a      	lsrs	r2, r3, #18
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002114:	e002      	b.n	800211c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3b01      	subs	r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40012300 	.word	0x40012300
 800213c:	40012000 	.word	0x40012000
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83

08002148 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002150:	4b79      	ldr	r3, [pc, #484]	@ (8002338 <ADC_Init+0x1f0>)
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	431a      	orrs	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800217c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	021a      	lsls	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	4a58      	ldr	r2, [pc, #352]	@ (800233c <ADC_Init+0x1f4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d022      	beq.n	8002226 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e00f      	b.n	8002246 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002244:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0202 	bic.w	r2, r2, #2
 8002254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7e1b      	ldrb	r3, [r3, #24]
 8002260:	005a      	lsls	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002282:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002292:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	3b01      	subs	r3, #1
 80022a0:	035a      	lsls	r2, r3, #13
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e007      	b.n	80022bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	051a      	lsls	r2, r3, #20
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022fe:	025a      	lsls	r2, r3, #9
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6899      	ldr	r1, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	029a      	lsls	r2, r3, #10
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	609a      	str	r2, [r3, #8]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40012300 	.word	0x40012300
 800233c:	0f000001 	.word	0x0f000001

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	@ (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff29 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff3e 	bl	8002388 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff31 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e16b      	b.n	8002858 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 815a 	bne.w	8002852 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80b4 	beq.w	8002852 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b60      	ldr	r3, [pc, #384]	@ (8002870 <HAL_GPIO_Init+0x30c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002870 <HAL_GPIO_Init+0x30c>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002870 <HAL_GPIO_Init+0x30c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002706:	4a5b      	ldr	r2, [pc, #364]	@ (8002874 <HAL_GPIO_Init+0x310>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	@ (8002878 <HAL_GPIO_Init+0x314>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <HAL_GPIO_Init+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a51      	ldr	r2, [pc, #324]	@ (800287c <HAL_GPIO_Init+0x318>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d025      	beq.n	8002786 <HAL_GPIO_Init+0x222>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a50      	ldr	r2, [pc, #320]	@ (8002880 <HAL_GPIO_Init+0x31c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_GPIO_Init+0x21e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	@ (8002884 <HAL_GPIO_Init+0x320>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x21a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4e      	ldr	r2, [pc, #312]	@ (8002888 <HAL_GPIO_Init+0x324>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x216>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4d      	ldr	r2, [pc, #308]	@ (800288c <HAL_GPIO_Init+0x328>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x212>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4c      	ldr	r2, [pc, #304]	@ (8002890 <HAL_GPIO_Init+0x32c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4b      	ldr	r2, [pc, #300]	@ (8002894 <HAL_GPIO_Init+0x330>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x20a>
 800276a:	2307      	movs	r3, #7
 800276c:	e00e      	b.n	800278c <HAL_GPIO_Init+0x228>
 800276e:	2308      	movs	r3, #8
 8002770:	e00c      	b.n	800278c <HAL_GPIO_Init+0x228>
 8002772:	2306      	movs	r3, #6
 8002774:	e00a      	b.n	800278c <HAL_GPIO_Init+0x228>
 8002776:	2305      	movs	r3, #5
 8002778:	e008      	b.n	800278c <HAL_GPIO_Init+0x228>
 800277a:	2304      	movs	r3, #4
 800277c:	e006      	b.n	800278c <HAL_GPIO_Init+0x228>
 800277e:	2303      	movs	r3, #3
 8002780:	e004      	b.n	800278c <HAL_GPIO_Init+0x228>
 8002782:	2302      	movs	r3, #2
 8002784:	e002      	b.n	800278c <HAL_GPIO_Init+0x228>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_GPIO_Init+0x228>
 800278a:	2300      	movs	r3, #0
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f002 0203 	and.w	r2, r2, #3
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4093      	lsls	r3, r2
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800279c:	4935      	ldr	r1, [pc, #212]	@ (8002874 <HAL_GPIO_Init+0x310>)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	3302      	adds	r3, #2
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002898 <HAL_GPIO_Init+0x334>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ce:	4a32      	ldr	r2, [pc, #200]	@ (8002898 <HAL_GPIO_Init+0x334>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d4:	4b30      	ldr	r3, [pc, #192]	@ (8002898 <HAL_GPIO_Init+0x334>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f8:	4a27      	ldr	r2, [pc, #156]	@ (8002898 <HAL_GPIO_Init+0x334>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fe:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <HAL_GPIO_Init+0x334>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002822:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_GPIO_Init+0x334>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_GPIO_Init+0x334>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800284c:	4a12      	ldr	r2, [pc, #72]	@ (8002898 <HAL_GPIO_Init+0x334>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3301      	adds	r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b0f      	cmp	r3, #15
 800285c:	f67f ae90 	bls.w	8002580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3724      	adds	r7, #36	@ 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40013800 	.word	0x40013800
 8002878:	40020000 	.word	0x40020000
 800287c:	40020400 	.word	0x40020400
 8002880:	40020800 	.word	0x40020800
 8002884:	40020c00 	.word	0x40020c00
 8002888:	40021000 	.word	0x40021000
 800288c:	40021400 	.word	0x40021400
 8002890:	40021800 	.word	0x40021800
 8002894:	40021c00 	.word	0x40021c00
 8002898:	40013c00 	.word	0x40013c00

0800289c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
 80028b8:	e001      	b.n	80028be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e12b      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fe fbfa 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f002 feb2 	bl	80056cc <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a81      	ldr	r2, [pc, #516]	@ (8002b74 <HAL_I2C_Init+0x274>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a80      	ldr	r2, [pc, #512]	@ (8002b78 <HAL_I2C_Init+0x278>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a7d      	ldr	r2, [pc, #500]	@ (8002b7c <HAL_I2C_Init+0x27c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0e7      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a78      	ldr	r2, [pc, #480]	@ (8002b80 <HAL_I2C_Init+0x280>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b74 <HAL_I2C_Init+0x274>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a69      	ldr	r2, [pc, #420]	@ (8002b84 <HAL_I2C_Init+0x284>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	495c      	ldr	r1, [pc, #368]	@ (8002b74 <HAL_I2C_Init+0x274>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d819      	bhi.n	8002a3c <HAL_I2C_Init+0x13c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_I2C_Init+0x138>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e59      	subs	r1, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	e051      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e04f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_I2C_Init+0x168>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e012      	b.n	8002a8e <HAL_I2C_Init+0x18e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Init+0x196>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10e      	bne.n	8002abc <HAL_I2C_Init+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e58      	subs	r0, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aba:	e00f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6809      	ldr	r1, [r1, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6911      	ldr	r1, [r2, #16]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	000186a0 	.word	0x000186a0
 8002b78:	001e847f 	.word	0x001e847f
 8002b7c:	003d08ff 	.word	0x003d08ff
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	817b      	strh	r3, [r7, #10]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	813b      	strh	r3, [r7, #8]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ba2:	f7fe ff9d 	bl	8001ae0 <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	f040 80d9 	bne.w	8002d68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2319      	movs	r3, #25
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	496d      	ldr	r1, [pc, #436]	@ (8002d74 <HAL_I2C_Mem_Write+0x1ec>)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fc8b 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0cc      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_I2C_Mem_Write+0x56>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e0c5      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d007      	beq.n	8002c04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2221      	movs	r2, #33	@ 0x21
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2240      	movs	r2, #64	@ 0x40
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a4d      	ldr	r2, [pc, #308]	@ (8002d78 <HAL_I2C_Mem_Write+0x1f0>)
 8002c44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c46:	88f8      	ldrh	r0, [r7, #6]
 8002c48:	893a      	ldrh	r2, [r7, #8]
 8002c4a:	8979      	ldrh	r1, [r7, #10]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4603      	mov	r3, r0
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fac2 	bl	80031e0 <I2C_RequestMemoryWrite>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d052      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e081      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fd50 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d107      	bne.n	8002c8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06b      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11b      	bne.n	8002d08 <HAL_I2C_Mem_Write+0x180>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1aa      	bne.n	8002c66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fd43 	bl	80037a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d107      	bne.n	8002d38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e016      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	00100002 	.word	0x00100002
 8002d78:	ffff0000 	.word	0xffff0000

08002d7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	@ 0x30
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	817b      	strh	r3, [r7, #10]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d96:	f7fe fea3 	bl	8001ae0 <HAL_GetTick>
 8002d9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	f040 8214 	bne.w	80031d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2319      	movs	r3, #25
 8002db0:	2201      	movs	r2, #1
 8002db2:	497b      	ldr	r1, [pc, #492]	@ (8002fa0 <HAL_I2C_Mem_Read+0x224>)
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fb91 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e207      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Mem_Read+0x56>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e200      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d007      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2222      	movs	r2, #34	@ 0x22
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2240      	movs	r2, #64	@ 0x40
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a5b      	ldr	r2, [pc, #364]	@ (8002fa4 <HAL_I2C_Mem_Read+0x228>)
 8002e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e3a:	88f8      	ldrh	r0, [r7, #6]
 8002e3c:	893a      	ldrh	r2, [r7, #8]
 8002e3e:	8979      	ldrh	r1, [r7, #10]
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	4603      	mov	r3, r0
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 fa5e 	bl	800330c <I2C_RequestMemoryRead>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1bc      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d113      	bne.n	8002e8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	623b      	str	r3, [r7, #32]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e190      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d11b      	bne.n	8002eca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	61fb      	str	r3, [r7, #28]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e170      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d11b      	bne.n	8002f0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	e150      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f20:	e144      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	f200 80f1 	bhi.w	800310e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d123      	bne.n	8002f7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fc79 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e145      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f7a:	e117      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d14e      	bne.n	8003022 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4906      	ldr	r1, [pc, #24]	@ (8002fa8 <HAL_I2C_Mem_Read+0x22c>)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 faa4 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e11a      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
 8002f9e:	bf00      	nop
 8002fa0:	00100002 	.word	0x00100002
 8002fa4:	ffff0000 	.word	0xffff0000
 8002fa8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003020:	e0c4      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	2200      	movs	r2, #0
 800302a:	496c      	ldr	r1, [pc, #432]	@ (80031dc <HAL_I2C_Mem_Read+0x460>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fa55 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0cb      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	2200      	movs	r2, #0
 8003086:	4955      	ldr	r1, [pc, #340]	@ (80031dc <HAL_I2C_Mem_Read+0x460>)
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fa27 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e09d      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800310c:	e04e      	b.n	80031ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fb8c 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e058      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d124      	bne.n	80031ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	2b03      	cmp	r3, #3
 8003168:	d107      	bne.n	800317a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003178:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f aeb6 	bne.w	8002f22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e000      	b.n	80031d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
  }
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3728      	adds	r7, #40	@ 0x28
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	00010004 	.word	0x00010004

080031e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2200      	movs	r2, #0
 8003212:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f960 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00d      	beq.n	800323e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003230:	d103      	bne.n	800323a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e05f      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800324c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	492d      	ldr	r1, [pc, #180]	@ (8003308 <I2C_RequestMemoryWrite+0x128>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9bb 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e04c      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	6a39      	ldr	r1, [r7, #32]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa46 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00d      	beq.n	80032a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	2b04      	cmp	r3, #4
 8003290:	d107      	bne.n	80032a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e02b      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	e021      	b.n	80032fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032b8:	893b      	ldrh	r3, [r7, #8]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa20 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d107      	bne.n	80032ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e005      	b.n	80032fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f2:	893b      	ldrh	r3, [r7, #8]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	00010002 	.word	0x00010002

0800330c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003334:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	2200      	movs	r2, #0
 800334e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f8c2 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800336c:	d103      	bne.n	8003376 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e0aa      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	6a3a      	ldr	r2, [r7, #32]
 800338e:	4952      	ldr	r1, [pc, #328]	@ (80034d8 <I2C_RequestMemoryRead+0x1cc>)
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f91d 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e097      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b8:	6a39      	ldr	r1, [r7, #32]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f9a8 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d107      	bne.n	80033de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e076      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e8:	893b      	ldrh	r3, [r7, #8]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	e021      	b.n	8003438 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033f4:	893b      	ldrh	r3, [r7, #8]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	6a39      	ldr	r1, [r7, #32]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f982 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b04      	cmp	r3, #4
 8003418:	d107      	bne.n	800342a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e050      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800342e:	893b      	ldrh	r3, [r7, #8]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343a:	6a39      	ldr	r1, [r7, #32]
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f967 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	2b04      	cmp	r3, #4
 800344e:	d107      	bne.n	8003460 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800345e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e035      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003472:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2200      	movs	r2, #0
 800347c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f82b 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800349a:	d103      	bne.n	80034a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e013      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a8:	897b      	ldrh	r3, [r7, #10]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	6a3a      	ldr	r2, [r7, #32]
 80034bc:	4906      	ldr	r1, [pc, #24]	@ (80034d8 <I2C_RequestMemoryRead+0x1cc>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f886 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	00010002 	.word	0x00010002

080034dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ec:	e048      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d044      	beq.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe faf3 	bl	8001ae0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d139      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10d      	bne.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	e00c      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	429a      	cmp	r2, r3
 8003550:	d116      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e023      	b.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10d      	bne.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	e00c      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d093      	beq.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035de:	e071      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ee:	d123      	bne.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e067      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d041      	beq.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fe fa4e 	bl	8001ae0 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d136      	bne.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10c      	bne.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e00b      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e021      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10c      	bne.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e00b      	b.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af6d 	bne.w	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371c:	e034      	b.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8e3 	bl	80038ea <I2C_IsAcknowledgeFailed>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e034      	b.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d028      	beq.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7fe f9d3 	bl	8001ae0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11d      	bne.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b80      	cmp	r3, #128	@ 0x80
 8003758:	d016      	beq.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d1c3      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ac:	e034      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f89b 	bl	80038ea <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e034      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d028      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe f98b 	bl	8001ae0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d016      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d1c3      	bne.n	80037ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800383c:	e049      	b.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d119      	bne.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e030      	b.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe f92e 	bl	8001ae0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d016      	beq.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d1ae      	bne.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003900:	d11b      	bne.n	800393a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800390a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e101      	b.n	8003b5e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f005 fc01 	bl	800917c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2203      	movs	r2, #3
 800397e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003988:	d102      	bne.n	8003990 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f001 ffc4 	bl	8005922 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7c1a      	ldrb	r2, [r3, #16]
 80039a2:	f88d 2000 	strb.w	r2, [sp]
 80039a6:	3304      	adds	r3, #4
 80039a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039aa:	f001 fea3 	bl	80056f4 <USB_CoreInit>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0ce      	b.n	8003b5e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 ffbc 	bl	8005944 <USB_SetCurrentMode>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0bf      	b.n	8003b5e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e04a      	b.n	8003a7a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	3315      	adds	r3, #21
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039f8:	7bfa      	ldrb	r2, [r7, #15]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3314      	adds	r3, #20
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	b298      	uxth	r0, r3
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	332e      	adds	r3, #46	@ 0x2e
 8003a20:	4602      	mov	r2, r0
 8003a22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3318      	adds	r3, #24
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	331c      	adds	r3, #28
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3320      	adds	r3, #32
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3324      	adds	r3, #36	@ 0x24
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	3301      	adds	r3, #1
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3af      	bcc.n	80039e4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e044      	b.n	8003b14 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	3301      	adds	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	791b      	ldrb	r3, [r3, #4]
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3b5      	bcc.n	8003a8a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	7c1a      	ldrb	r2, [r3, #16]
 8003b26:	f88d 2000 	strb.w	r2, [sp]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b2e:	f001 ff55 	bl	80059dc <USB_DevInit>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e00c      	b.n	8003b5e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f002 ff9f 	bl	8006a9a <USB_DevDisconnect>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_PCD_Start+0x1c>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e022      	b.n	8003bc8 <HAL_PCD_Start+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fea6 	bl	8005900 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 ff4d 	bl	8006a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b08d      	sub	sp, #52	@ 0x34
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 f80b 	bl	8006c02 <USB_GetMode>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 848c 	bne.w	800450c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f002 ff6f 	bl	8006adc <USB_ReadInterrupts>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8482 	beq.w	800450a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 ff5c 	bl	8006adc <USB_ReadInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 0202 	and.w	r2, r2, #2
 8003c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 ff4a 	bl	8006adc <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d161      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699a      	ldr	r2, [r3, #24]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c8c:	d124      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d035      	beq.n	8003d06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ca4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	6a38      	ldr	r0, [r7, #32]
 8003cae:	f002 fd81 	bl	80067b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cbe:	441a      	add	r2, r3
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	615a      	str	r2, [r3, #20]
 8003cd6:	e016      	b.n	8003d06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003cde:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ce2:	d110      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cea:	2208      	movs	r2, #8
 8003cec:	4619      	mov	r1, r3
 8003cee:	6a38      	ldr	r0, [r7, #32]
 8003cf0:	f002 fd60 	bl	80067b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d00:	441a      	add	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0210 	orr.w	r2, r2, #16
 8003d14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 fede 	bl	8006adc <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d2a:	f040 80a7 	bne.w	8003e7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f002 fee3 	bl	8006b02 <USB_ReadDevAllOutEpInterrupt>
 8003d3c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003d3e:	e099      	b.n	8003e74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 808e 	beq.w	8003e68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 ff07 	bl	8006b6a <USB_ReadDevOutEPInterrupt>
 8003d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00c      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	2301      	movs	r3, #1
 8003d78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fea3 	bl	8004ac8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 ff79 	bl	8004c98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2310      	movs	r3, #16
 8003dc0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d030      	beq.n	8003e2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	2b80      	cmp	r3, #128	@ 0x80
 8003dd6:	d109      	bne.n	8003dec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3304      	adds	r3, #4
 8003e00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	78db      	ldrb	r3, [r3, #3]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f005 fab6 	bl	8009388 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	2320      	movs	r3, #32
 8003e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f47f af62 	bne.w	8003d40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fe2b 	bl	8006adc <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e90:	f040 80db 	bne.w	800404a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f002 fe4c 	bl	8006b36 <USB_ReadDevAllInEpInterrupt>
 8003e9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003ea4:	e0cd      	b.n	8004042 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80c2 	beq.w	8004036 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 fe72 	bl	8006ba6 <USB_ReadDevInEPInterrupt>
 8003ec2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d057      	beq.n	8003f7e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69f9      	ldr	r1, [r7, #28]
 8003eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003eee:	4013      	ands	r3, r2
 8003ef0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003efe:	461a      	mov	r2, r3
 8003f00:	2301      	movs	r3, #1
 8003f02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	799b      	ldrb	r3, [r3, #6]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d132      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3320      	adds	r3, #32
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4403      	add	r3, r0
 8003f2c:	331c      	adds	r3, #28
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4419      	add	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4403      	add	r3, r0
 8003f40:	3320      	adds	r3, #32
 8003f42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d113      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x3a2>
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3324      	adds	r3, #36	@ 0x24
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	f002 fe79 	bl	8006c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f005 f980 	bl	800927e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f94:	461a      	mov	r2, r3
 8003f96:	2308      	movs	r3, #8
 8003f98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d008      	beq.n	8003fd2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2340      	movs	r3, #64	@ 0x40
 8003fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d023      	beq.n	8004024 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fde:	6a38      	ldr	r0, [r7, #32]
 8003fe0:	f001 fe60 	bl	8005ca4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	3310      	adds	r3, #16
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	78db      	ldrb	r3, [r3, #3]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d108      	bne.n	8004012 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f005 f9cd 	bl	80093ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401e:	461a      	mov	r2, r3
 8004020:	2302      	movs	r3, #2
 8004022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800402e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fcbd 	bl	80049b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	3301      	adds	r3, #1
 800403a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f af2e 	bne.w	8003ea6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f002 fd44 	bl	8006adc <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800405e:	d122      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004086:	2100      	movs	r1, #0
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fea3 	bl	8004dd4 <HAL_PCDEx_LPM_Callback>
 800408e:	e002      	b.n	8004096 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f005 f96b 	bl	800936c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80040a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 fd16 	bl	8006adc <USB_ReadInterrupts>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ba:	d112      	bne.n	80040e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f005 f927 	bl	8009320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80040e0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f002 fcf8 	bl	8006adc <USB_ReadInterrupts>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f6:	f040 80b7 	bne.w	8004268 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2110      	movs	r1, #16
 8004114:	4618      	mov	r0, r3
 8004116:	f001 fdc5 	bl	8005ca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800411e:	e046      	b.n	80041ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800412c:	461a      	mov	r2, r3
 800412e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004132:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004152:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004160:	461a      	mov	r2, r3
 8004162:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004166:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004198:	0151      	lsls	r1, r2, #5
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	440a      	add	r2, r1
 800419e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80041a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041aa:	3301      	adds	r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d3b2      	bcc.n	8004120 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80041cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7bdb      	ldrb	r3, [r3, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e6:	f043 030b 	orr.w	r3, r3, #11
 80041ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041fc:	f043 030b 	orr.w	r3, r3, #11
 8004200:	6453      	str	r3, [r2, #68]	@ 0x44
 8004202:	e015      	b.n	8004230 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004212:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004216:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800421a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800422a:	f043 030b 	orr.w	r3, r3, #11
 800422e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800423e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004242:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004252:	461a      	mov	r2, r3
 8004254:	f002 fd06 	bl	8006c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f002 fc35 	bl	8006adc <USB_ReadInterrupts>
 8004272:	4603      	mov	r3, r0
 8004274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d123      	bne.n	80042c6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f002 fccb 	bl	8006c1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fd82 	bl	8005d96 <USB_GetDevSpeed>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681c      	ldr	r4, [r3, #0]
 800429e:	f001 fa09 	bl	80056b4 <HAL_RCC_GetHCLKFreq>
 80042a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042a8:	461a      	mov	r2, r3
 80042aa:	4620      	mov	r0, r4
 80042ac:	f001 fa86 	bl	80057bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f005 f80c 	bl	80092ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80042c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fc06 	bl	8006adc <USB_ReadInterrupts>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d10a      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f004 ffe9 	bl	80092b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f002 0208 	and.w	r2, r2, #8
 80042ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f002 fbf1 	bl	8006adc <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004300:	2b80      	cmp	r3, #128	@ 0x80
 8004302:	d123      	bne.n	800434c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004310:	2301      	movs	r3, #1
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
 8004314:	e014      	b.n	8004340 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	b2db      	uxtb	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fb0a 	bl	800494e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	3301      	adds	r3, #1
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	461a      	mov	r2, r3
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	4293      	cmp	r3, r2
 800434a:	d3e4      	bcc.n	8004316 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fbc3 	bl	8006adc <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800435c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004360:	d13c      	bne.n	80043dc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004362:	2301      	movs	r3, #1
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
 8004366:	e02b      	b.n	80043c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3318      	adds	r3, #24
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d115      	bne.n	80043ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800438e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	da12      	bge.n	80043ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	3317      	adds	r3, #23
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 faca 	bl	800494e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	3301      	adds	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d3cd      	bcc.n	8004368 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80043da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f002 fb7b 	bl	8006adc <USB_ReadInterrupts>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f0:	d156      	bne.n	80044a0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043f2:	2301      	movs	r3, #1
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f6:	e045      	b.n	8004484 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d12e      	bne.n	800447e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004420:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	da2b      	bge.n	800447e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	0c1a      	lsrs	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004430:	4053      	eors	r3, r2
 8004432:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004436:	2b00      	cmp	r3, #0
 8004438:	d121      	bne.n	800447e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800444c:	2201      	movs	r2, #1
 800444e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800447a:	6053      	str	r3, [r2, #4]
            break;
 800447c:	e008      	b.n	8004490 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	3301      	adds	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	461a      	mov	r2, r3
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	4293      	cmp	r3, r2
 800448e:	d3b3      	bcc.n	80043f8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800449e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f002 fb19 	bl	8006adc <USB_ReadInterrupts>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b4:	d10a      	bne.n	80044cc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f004 ff8a 	bl	80093d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80044ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f002 fb03 	bl	8006adc <USB_ReadInterrupts>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d115      	bne.n	800450c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f004 ff7a 	bl	80093ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	e000      	b.n	800450c <HAL_PCD_IRQHandler+0x93c>
      return;
 800450a:	bf00      	nop
    }
  }
}
 800450c:	3734      	adds	r7, #52	@ 0x34
 800450e:	46bd      	mov	sp, r7
 8004510:	bd90      	pop	{r4, r7, pc}

08004512 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_PCD_SetAddress+0x1a>
 8004528:	2302      	movs	r3, #2
 800452a:	e012      	b.n	8004552 <HAL_PCD_SetAddress+0x40>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	4611      	mov	r1, r2
 8004542:	4618      	mov	r0, r3
 8004544:	f002 fa62 	bl	8006a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	461a      	mov	r2, r3
 8004568:	4603      	mov	r3, r0
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	460b      	mov	r3, r1
 800456e:	803b      	strh	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	da0f      	bge.n	80045a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	3310      	adds	r3, #16
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	3304      	adds	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	705a      	strb	r2, [r3, #1]
 800459e:	e00f      	b.n	80045c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80045cc:	883b      	ldrh	r3, [r7, #0]
 80045ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	78ba      	ldrb	r2, [r7, #2]
 80045da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045ee:	78bb      	ldrb	r3, [r7, #2]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d102      	bne.n	80045fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_PCD_EP_Open+0xae>
 8004604:	2302      	movs	r3, #2
 8004606:	e00e      	b.n	8004626 <HAL_PCD_EP_Open+0xcc>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	4618      	mov	r0, r3
 8004618:	f001 fbe2 	bl	8005de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004624:	7afb      	ldrb	r3, [r7, #11]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800463a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800463e:	2b00      	cmp	r3, #0
 8004640:	da0f      	bge.n	8004662 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004642:	78fb      	ldrb	r3, [r7, #3]
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	3310      	adds	r3, #16
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	3304      	adds	r3, #4
 8004658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	705a      	strb	r2, [r3, #1]
 8004660:	e00f      	b.n	8004682 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 020f 	and.w	r2, r3, #15
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	4413      	add	r3, r2
 8004678:	3304      	adds	r3, #4
 800467a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_PCD_EP_Close+0x6e>
 8004698:	2302      	movs	r3, #2
 800469a:	e00e      	b.n	80046ba <HAL_PCD_EP_Close+0x8c>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68f9      	ldr	r1, [r7, #12]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 fc20 	bl	8005ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	460b      	mov	r3, r1
 80046d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d2:	7afb      	ldrb	r3, [r7, #11]
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2200      	movs	r2, #0
 80046fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	b2da      	uxtb	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	799b      	ldrb	r3, [r3, #6]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d102      	bne.n	800471e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	799b      	ldrb	r3, [r3, #6]
 8004726:	461a      	mov	r2, r3
 8004728:	6979      	ldr	r1, [r7, #20]
 800472a:	f001 fcbd 	bl	80060a8 <USB_EPStartXfer>

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	460b      	mov	r3, r1
 8004776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	3310      	adds	r3, #16
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	3304      	adds	r3, #4
 800478e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2201      	movs	r2, #1
 80047a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a8:	7afb      	ldrb	r3, [r7, #11]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	799b      	ldrb	r3, [r3, #6]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d102      	bne.n	80047c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	799b      	ldrb	r3, [r3, #6]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	f001 fc6b 	bl	80060a8 <USB_EPStartXfer>

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	7912      	ldrb	r2, [r2, #4]
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e04f      	b.n	800489a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da0f      	bge.n	8004822 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	3310      	adds	r3, #16
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	3304      	adds	r3, #4
 8004818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	705a      	strb	r2, [r3, #1]
 8004820:	e00d      	b.n	800483e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_PCD_EP_SetStall+0x82>
 800485a:	2302      	movs	r3, #2
 800485c:	e01d      	b.n	800489a <HAL_PCD_EP_SetStall+0xbe>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	f001 fff9 	bl	8006864 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	7999      	ldrb	r1, [r3, #6]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800488a:	461a      	mov	r2, r3
 800488c:	f002 f9ea 	bl	8006c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	7912      	ldrb	r2, [r2, #4]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e042      	b.n	8004946 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	da0f      	bge.n	80048e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	3310      	adds	r3, #16
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	4413      	add	r3, r2
 80048dc:	3304      	adds	r3, #4
 80048de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	705a      	strb	r2, [r3, #1]
 80048e6:	e00f      	b.n	8004908 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	3304      	adds	r3, #4
 8004900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_PCD_EP_ClrStall+0x86>
 8004924:	2302      	movs	r3, #2
 8004926:	e00e      	b.n	8004946 <HAL_PCD_EP_ClrStall+0xa4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	4618      	mov	r0, r3
 8004938:	f002 f802 	bl	8006940 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	460b      	mov	r3, r1
 8004958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800495a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495e:	2b00      	cmp	r3, #0
 8004960:	da0c      	bge.n	800497c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	3310      	adds	r3, #16
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	3304      	adds	r3, #4
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e00c      	b.n	8004996 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	3304      	adds	r3, #4
 8004994:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fe21 	bl	80065e4 <USB_EPStopXfer>
 80049a2:	4603      	mov	r3, r0
 80049a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80049a6:	7afb      	ldrb	r3, [r7, #11]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	@ 0x28
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	3310      	adds	r3, #16
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4413      	add	r3, r2
 80049d4:	3304      	adds	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d901      	bls.n	80049e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e06b      	b.n	8004ac0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d902      	bls.n	8004a04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	3303      	adds	r3, #3
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a0c:	e02a      	b.n	8004a64 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d902      	bls.n	8004a2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3303      	adds	r3, #3
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68d9      	ldr	r1, [r3, #12]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	4603      	mov	r3, r0
 8004a46:	6978      	ldr	r0, [r7, #20]
 8004a48:	f001 fe76 	bl	8006738 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	441a      	add	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	441a      	add	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d809      	bhi.n	8004a8e <PCD_WriteEmptyTxFifo+0xde>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d203      	bcs.n	8004a8e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1bf      	bne.n	8004a0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d811      	bhi.n	8004abe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	6939      	ldr	r1, [r7, #16]
 8004ab6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aba:	4013      	ands	r3, r2
 8004abc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	333c      	adds	r3, #60	@ 0x3c
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	799b      	ldrb	r3, [r3, #6]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d17b      	bne.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d015      	beq.n	8004b34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4a61      	ldr	r2, [pc, #388]	@ (8004c90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	f240 80b9 	bls.w	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80b3 	beq.w	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b30:	6093      	str	r3, [r2, #8]
 8004b32:	e0a7      	b.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2320      	movs	r3, #32
 8004b4e:	6093      	str	r3, [r2, #8]
 8004b50:	e098      	b.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 8093 	bne.w	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4a4b      	ldr	r2, [pc, #300]	@ (8004c90 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d90f      	bls.n	8004b86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b82:	6093      	str	r3, [r2, #8]
 8004b84:	e07e      	b.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4413      	add	r3, r2
 8004b98:	3304      	adds	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	0159      	lsls	r1, r3, #5
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	1ad2      	subs	r2, r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d114      	bne.n	8004be8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	f002 f846 	bl	8006c64 <USB_EP0_OutStart>
 8004bd8:	e006      	b.n	8004be8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f004 fb2a 	bl	8009248 <HAL_PCD_DataOutStageCallback>
 8004bf4:	e046      	b.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	@ (8004c94 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d124      	bne.n	8004c48 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c14:	461a      	mov	r2, r3
 8004c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1a:	6093      	str	r3, [r2, #8]
 8004c1c:	e032      	b.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c34:	461a      	mov	r2, r3
 8004c36:	2320      	movs	r3, #32
 8004c38:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f004 fb01 	bl	8009248 <HAL_PCD_DataOutStageCallback>
 8004c46:	e01d      	b.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d114      	bne.n	8004c78 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c70:	461a      	mov	r2, r3
 8004c72:	2100      	movs	r1, #0
 8004c74:	f001 fff6 	bl	8006c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f004 fae2 	bl	8009248 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	4f54300a 	.word	0x4f54300a
 8004c94:	4f54310a 	.word	0x4f54310a

08004c98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	333c      	adds	r3, #60	@ 0x3c
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d90e      	bls.n	8004cec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f004 fa99 	bl	8009224 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8004d20 <PCD_EP_OutSetupPacket_int+0x88>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d90c      	bls.n	8004d14 <PCD_EP_OutSetupPacket_int+0x7c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	799b      	ldrb	r3, [r3, #6]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d108      	bne.n	8004d14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2101      	movs	r1, #1
 8004d10:	f001 ffa8 	bl	8006c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	4f54300a 	.word	0x4f54300a

08004d24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	70fb      	strb	r3, [r7, #3]
 8004d30:	4613      	mov	r3, r2
 8004d32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d107      	bne.n	8004d52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d42:	883b      	ldrh	r3, [r7, #0]
 8004d44:	0419      	lsls	r1, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d50:	e028      	b.n	8004da4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
 8004d64:	e00d      	b.n	8004d82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	3340      	adds	r3, #64	@ 0x40
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	7bfa      	ldrb	r2, [r7, #15]
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d3ec      	bcc.n	8004d66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d8c:	883b      	ldrh	r3, [r7, #0]
 8004d8e:	0418      	lsls	r0, r3, #16
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	4302      	orrs	r2, r0
 8004d9c:	3340      	adds	r3, #64	@ 0x40
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	887a      	ldrh	r2, [r7, #2]
 8004dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e267      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d075      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e0a:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00c      	beq.n	8004e30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4b85      	ldr	r3, [pc, #532]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d112      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e22:	4b82      	ldr	r3, [pc, #520]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	4b7e      	ldr	r3, [pc, #504]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x108>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d157      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e242      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x74>
 8004e52:	4b76      	ldr	r3, [pc, #472]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a75      	ldr	r2, [pc, #468]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e01d      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x98>
 8004e6a:	4b70      	ldr	r3, [pc, #448]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a6f      	ldr	r2, [pc, #444]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b6d      	ldr	r3, [pc, #436]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e84:	4b69      	ldr	r3, [pc, #420]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a68      	ldr	r2, [pc, #416]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	4b66      	ldr	r3, [pc, #408]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a65      	ldr	r2, [pc, #404]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fc fe1c 	bl	8001ae0 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fc fe18 	bl	8001ae0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	@ 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e207      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0xc0>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fc fe08 	bl	8001ae0 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fc fe04 	bl	8001ae0 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	@ 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1f3      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee6:	4b51      	ldr	r3, [pc, #324]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xe8>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d063      	beq.n	8004fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f02:	4b4a      	ldr	r3, [pc, #296]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b47      	ldr	r3, [pc, #284]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d11c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b44      	ldr	r3, [pc, #272]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d116      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	4b41      	ldr	r3, [pc, #260]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e1c7      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4937      	ldr	r1, [pc, #220]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f52:	e03a      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f5c:	4b34      	ldr	r3, [pc, #208]	@ (8005030 <HAL_RCC_OscConfig+0x244>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fc fdbd 	bl	8001ae0 <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6a:	f7fc fdb9 	bl	8001ae0 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e1a8      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4925      	ldr	r1, [pc, #148]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]
 8004f9c:	e015      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9e:	4b24      	ldr	r3, [pc, #144]	@ (8005030 <HAL_RCC_OscConfig+0x244>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fd9c 	bl	8001ae0 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fac:	f7fc fd98 	bl	8001ae0 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e187      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d036      	beq.n	8005044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <HAL_RCC_OscConfig+0x248>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fc fd7c 	bl	8001ae0 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fec:	f7fc fd78 	bl	8001ae0 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e167      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_OscConfig+0x240>)
 8005000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x200>
 800500a:	e01b      	b.n	8005044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500c:	4b09      	ldr	r3, [pc, #36]	@ (8005034 <HAL_RCC_OscConfig+0x248>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005012:	f7fc fd65 	bl	8001ae0 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	e00e      	b.n	8005038 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501a:	f7fc fd61 	bl	8001ae0 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d907      	bls.n	8005038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e150      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
 800502c:	40023800 	.word	0x40023800
 8005030:	42470000 	.word	0x42470000
 8005034:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	4b88      	ldr	r3, [pc, #544]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ea      	bne.n	800501a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 8097 	beq.w	8005180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b81      	ldr	r3, [pc, #516]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	4b7d      	ldr	r3, [pc, #500]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	4a7c      	ldr	r2, [pc, #496]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	@ 0x40
 8005072:	4b7a      	ldr	r3, [pc, #488]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b77      	ldr	r3, [pc, #476]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d118      	bne.n	80050c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508e:	4b74      	ldr	r3, [pc, #464]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a73      	ldr	r2, [pc, #460]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509a:	f7fc fd21 	bl	8001ae0 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fc fd1d 	bl	8001ae0 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e10c      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005260 <HAL_RCC_OscConfig+0x474>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d106      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2ea>
 80050c8:	4b64      	ldr	r3, [pc, #400]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050cc:	4a63      	ldr	r2, [pc, #396]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d4:	e01c      	b.n	8005110 <HAL_RCC_OscConfig+0x324>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x30c>
 80050de:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	4a5e      	ldr	r2, [pc, #376]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050e4:	f043 0304 	orr.w	r3, r3, #4
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ea:	4b5c      	ldr	r3, [pc, #368]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	4a5b      	ldr	r2, [pc, #364]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050f6:	e00b      	b.n	8005110 <HAL_RCC_OscConfig+0x324>
 80050f8:	4b58      	ldr	r3, [pc, #352]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fc:	4a57      	ldr	r2, [pc, #348]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80050fe:	f023 0301 	bic.w	r3, r3, #1
 8005102:	6713      	str	r3, [r2, #112]	@ 0x70
 8005104:	4b55      	ldr	r3, [pc, #340]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005108:	4a54      	ldr	r2, [pc, #336]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800510a:	f023 0304 	bic.w	r3, r3, #4
 800510e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d015      	beq.n	8005144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fc fce2 	bl	8001ae0 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	e00a      	b.n	8005136 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005120:	f7fc fcde 	bl	8001ae0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e0cb      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	4b49      	ldr	r3, [pc, #292]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ee      	beq.n	8005120 <HAL_RCC_OscConfig+0x334>
 8005142:	e014      	b.n	800516e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005144:	f7fc fccc 	bl	8001ae0 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514a:	e00a      	b.n	8005162 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7fc fcc8 	bl	8001ae0 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e0b5      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005162:	4b3e      	ldr	r3, [pc, #248]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1ee      	bne.n	800514c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005174:	4b39      	ldr	r3, [pc, #228]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	4a38      	ldr	r2, [pc, #224]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800517a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 80a1 	beq.w	80052cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800518a:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b08      	cmp	r3, #8
 8005194:	d05c      	beq.n	8005250 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d141      	bne.n	8005222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCC_OscConfig+0x478>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fc fc9c 	bl	8001ae0 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fc fc98 	bl	8001ae0 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e087      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051be:	4b27      	ldr	r3, [pc, #156]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	019b      	lsls	r3, r3, #6
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	3b01      	subs	r3, #1
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	491b      	ldr	r1, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x478>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fa:	f7fc fc71 	bl	8001ae0 <HAL_GetTick>
 80051fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005200:	e008      	b.n	8005214 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005202:	f7fc fc6d 	bl	8001ae0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e05c      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <HAL_RCC_OscConfig+0x416>
 8005220:	e054      	b.n	80052cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <HAL_RCC_OscConfig+0x478>)
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005228:	f7fc fc5a 	bl	8001ae0 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fc fc56 	bl	8001ae0 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e045      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b06      	ldr	r3, [pc, #24]	@ (800525c <HAL_RCC_OscConfig+0x470>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x444>
 800524e:	e03d      	b.n	80052cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e038      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
 800525c:	40023800 	.word	0x40023800
 8005260:	40007000 	.word	0x40007000
 8005264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005268:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d028      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d121      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d11a      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005298:	4013      	ands	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800529e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d111      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	3b01      	subs	r3, #1
 80052b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d107      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023800 	.word	0x40023800

080052dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0cc      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b68      	ldr	r3, [pc, #416]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90c      	bls.n	8005318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b65      	ldr	r3, [pc, #404]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a58      	ldr	r2, [pc, #352]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800533a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a52      	ldr	r2, [pc, #328]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d044      	beq.n	80053fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d003      	beq.n	800539a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005396:	2b03      	cmp	r3, #3
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539a:	4b3f      	ldr	r3, [pc, #252]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e067      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4934      	ldr	r1, [pc, #208]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fc fb88 	bl	8001ae0 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fc fb84 	bl	8001ae0 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e04f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b25      	ldr	r3, [pc, #148]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d20c      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b22      	ldr	r3, [pc, #136]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	@ (800549c <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc fae8 	bl	8001a58 <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00
 8005498:	40023800 	.word	0x40023800
 800549c:	0800ab64 	.word	0x0800ab64
 80054a0:	20000000 	.word	0x20000000
 80054a4:	20000004 	.word	0x20000004

080054a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ac:	b094      	sub	sp, #80	@ 0x50
 80054ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c0:	4b79      	ldr	r3, [pc, #484]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d00d      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x40>
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	f200 80e1 	bhi.w	8005694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x34>
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054da:	e0db      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054dc:	4b73      	ldr	r3, [pc, #460]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x204>)
 80054de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e0:	e0db      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e2:	4b73      	ldr	r3, [pc, #460]	@ (80056b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80054e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e6:	e0d8      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e8:	4b6f      	ldr	r3, [pc, #444]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f2:	4b6d      	ldr	r3, [pc, #436]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d063      	beq.n	80055c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fe:	4b6a      	ldr	r3, [pc, #424]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	2200      	movs	r2, #0
 8005506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005508:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800550a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800550c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005510:	633b      	str	r3, [r7, #48]	@ 0x30
 8005512:	2300      	movs	r3, #0
 8005514:	637b      	str	r3, [r7, #52]	@ 0x34
 8005516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	f04f 0000 	mov.w	r0, #0
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	0159      	lsls	r1, r3, #5
 8005528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800552c:	0150      	lsls	r0, r2, #5
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4621      	mov	r1, r4
 8005534:	1a51      	subs	r1, r2, r1
 8005536:	6139      	str	r1, [r7, #16]
 8005538:	4629      	mov	r1, r5
 800553a:	eb63 0301 	sbc.w	r3, r3, r1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800554c:	4659      	mov	r1, fp
 800554e:	018b      	lsls	r3, r1, #6
 8005550:	4651      	mov	r1, sl
 8005552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005556:	4651      	mov	r1, sl
 8005558:	018a      	lsls	r2, r1, #6
 800555a:	4651      	mov	r1, sl
 800555c:	ebb2 0801 	subs.w	r8, r2, r1
 8005560:	4659      	mov	r1, fp
 8005562:	eb63 0901 	sbc.w	r9, r3, r1
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800557a:	4690      	mov	r8, r2
 800557c:	4699      	mov	r9, r3
 800557e:	4623      	mov	r3, r4
 8005580:	eb18 0303 	adds.w	r3, r8, r3
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	462b      	mov	r3, r5
 8005588:	eb49 0303 	adc.w	r3, r9, r3
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800559a:	4629      	mov	r1, r5
 800559c:	024b      	lsls	r3, r1, #9
 800559e:	4621      	mov	r1, r4
 80055a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055a4:	4621      	mov	r1, r4
 80055a6:	024a      	lsls	r2, r1, #9
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ae:	2200      	movs	r2, #0
 80055b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055b8:	f7fb fb08 	bl	8000bcc <__aeabi_uldivmod>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4613      	mov	r3, r2
 80055c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c4:	e058      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c6:	4b38      	ldr	r3, [pc, #224]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	2200      	movs	r2, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	4611      	mov	r1, r2
 80055d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055d6:	623b      	str	r3, [r7, #32]
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
 80055dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f04f 0100 	mov.w	r1, #0
 80055ec:	0159      	lsls	r1, r3, #5
 80055ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055f2:	0150      	lsls	r0, r2, #5
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4641      	mov	r1, r8
 80055fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80055fe:	4649      	mov	r1, r9
 8005600:	eb63 0b01 	sbc.w	fp, r3, r1
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005618:	ebb2 040a 	subs.w	r4, r2, sl
 800561c:	eb63 050b 	sbc.w	r5, r3, fp
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	00eb      	lsls	r3, r5, #3
 800562a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800562e:	00e2      	lsls	r2, r4, #3
 8005630:	4614      	mov	r4, r2
 8005632:	461d      	mov	r5, r3
 8005634:	4643      	mov	r3, r8
 8005636:	18e3      	adds	r3, r4, r3
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	464b      	mov	r3, r9
 800563c:	eb45 0303 	adc.w	r3, r5, r3
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800564e:	4629      	mov	r1, r5
 8005650:	028b      	lsls	r3, r1, #10
 8005652:	4621      	mov	r1, r4
 8005654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005658:	4621      	mov	r1, r4
 800565a:	028a      	lsls	r2, r1, #10
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005662:	2200      	movs	r2, #0
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	61fa      	str	r2, [r7, #28]
 8005668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566c:	f7fb faae 	bl	8000bcc <__aeabi_uldivmod>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4613      	mov	r3, r2
 8005676:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005678:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	0c1b      	lsrs	r3, r3, #16
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	3301      	adds	r3, #1
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800568a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005692:	e002      	b.n	800569a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800569a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800569c:	4618      	mov	r0, r3
 800569e:	3750      	adds	r7, #80	@ 0x50
 80056a0:	46bd      	mov	sp, r7
 80056a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	00f42400 	.word	0x00f42400
 80056b0:	007a1200 	.word	0x007a1200

080056b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056b8:	4b03      	ldr	r3, [pc, #12]	@ (80056c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000000 	.word	0x20000000

080056cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056d0:	f7ff fff0 	bl	80056b4 <HAL_RCC_GetHCLKFreq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	0a9b      	lsrs	r3, r3, #10
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	4903      	ldr	r1, [pc, #12]	@ (80056f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056e2:	5ccb      	ldrb	r3, [r1, r3]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40023800 	.word	0x40023800
 80056f0:	0800ab74 	.word	0x0800ab74

080056f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f4:	b084      	sub	sp, #16
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	f107 001c 	add.w	r0, r7, #28
 8005702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005706:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800570a:	2b01      	cmp	r3, #1
 800570c:	d123      	bne.n	8005756 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fae8 	bl	8006d20 <USB_CoreReset>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	e01b      	b.n	800578e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fadc 	bl	8006d20 <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800576c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005780:	e005      	b.n	800578e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800578e:	7fbb      	ldrb	r3, [r7, #30]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10b      	bne.n	80057ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f043 0206 	orr.w	r2, r3, #6
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr

080057bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d165      	bne.n	800589c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a41      	ldr	r2, [pc, #260]	@ (80058d8 <USB_SetTurnaroundTime+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d906      	bls.n	80057e6 <USB_SetTurnaroundTime+0x2a>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a40      	ldr	r2, [pc, #256]	@ (80058dc <USB_SetTurnaroundTime+0x120>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d202      	bcs.n	80057e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057e0:	230f      	movs	r3, #15
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e062      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a3c      	ldr	r2, [pc, #240]	@ (80058dc <USB_SetTurnaroundTime+0x120>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d306      	bcc.n	80057fc <USB_SetTurnaroundTime+0x40>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a3b      	ldr	r2, [pc, #236]	@ (80058e0 <USB_SetTurnaroundTime+0x124>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d202      	bcs.n	80057fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057f6:	230e      	movs	r3, #14
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e057      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a38      	ldr	r2, [pc, #224]	@ (80058e0 <USB_SetTurnaroundTime+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d306      	bcc.n	8005812 <USB_SetTurnaroundTime+0x56>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a37      	ldr	r2, [pc, #220]	@ (80058e4 <USB_SetTurnaroundTime+0x128>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d202      	bcs.n	8005812 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800580c:	230d      	movs	r3, #13
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e04c      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a33      	ldr	r2, [pc, #204]	@ (80058e4 <USB_SetTurnaroundTime+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d306      	bcc.n	8005828 <USB_SetTurnaroundTime+0x6c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a32      	ldr	r2, [pc, #200]	@ (80058e8 <USB_SetTurnaroundTime+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d802      	bhi.n	8005828 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005822:	230c      	movs	r3, #12
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e041      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <USB_SetTurnaroundTime+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d906      	bls.n	800583e <USB_SetTurnaroundTime+0x82>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a2e      	ldr	r2, [pc, #184]	@ (80058ec <USB_SetTurnaroundTime+0x130>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d802      	bhi.n	800583e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005838:	230b      	movs	r3, #11
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e036      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a2a      	ldr	r2, [pc, #168]	@ (80058ec <USB_SetTurnaroundTime+0x130>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d906      	bls.n	8005854 <USB_SetTurnaroundTime+0x98>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a29      	ldr	r2, [pc, #164]	@ (80058f0 <USB_SetTurnaroundTime+0x134>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d802      	bhi.n	8005854 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800584e:	230a      	movs	r3, #10
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e02b      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a26      	ldr	r2, [pc, #152]	@ (80058f0 <USB_SetTurnaroundTime+0x134>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d906      	bls.n	800586a <USB_SetTurnaroundTime+0xae>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a25      	ldr	r2, [pc, #148]	@ (80058f4 <USB_SetTurnaroundTime+0x138>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d202      	bcs.n	800586a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005864:	2309      	movs	r3, #9
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e020      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <USB_SetTurnaroundTime+0x138>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d306      	bcc.n	8005880 <USB_SetTurnaroundTime+0xc4>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4a20      	ldr	r2, [pc, #128]	@ (80058f8 <USB_SetTurnaroundTime+0x13c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d802      	bhi.n	8005880 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800587a:	2308      	movs	r3, #8
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e015      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <USB_SetTurnaroundTime+0x13c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d906      	bls.n	8005896 <USB_SetTurnaroundTime+0xda>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <USB_SetTurnaroundTime+0x140>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d202      	bcs.n	8005896 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005890:	2307      	movs	r3, #7
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e00a      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005896:	2306      	movs	r3, #6
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e007      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058a2:	2309      	movs	r3, #9
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e001      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058a8:	2309      	movs	r3, #9
 80058aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	00d8acbf 	.word	0x00d8acbf
 80058dc:	00e4e1c0 	.word	0x00e4e1c0
 80058e0:	00f42400 	.word	0x00f42400
 80058e4:	01067380 	.word	0x01067380
 80058e8:	011a499f 	.word	0x011a499f
 80058ec:	01312cff 	.word	0x01312cff
 80058f0:	014ca43f 	.word	0x014ca43f
 80058f4:	016e3600 	.word	0x016e3600
 80058f8:	01a6ab1f 	.word	0x01a6ab1f
 80058fc:	01e84800 	.word	0x01e84800

08005900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d115      	bne.n	8005992 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005972:	200a      	movs	r0, #10
 8005974:	f7fc f8c0 	bl	8001af8 <HAL_Delay>
      ms += 10U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	330a      	adds	r3, #10
 800597c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 f93f 	bl	8006c02 <USB_GetMode>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d01e      	beq.n	80059c8 <USB_SetCurrentMode+0x84>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2bc7      	cmp	r3, #199	@ 0xc7
 800598e:	d9f0      	bls.n	8005972 <USB_SetCurrentMode+0x2e>
 8005990:	e01a      	b.n	80059c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d115      	bne.n	80059c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059a4:	200a      	movs	r0, #10
 80059a6:	f7fc f8a7 	bl	8001af8 <HAL_Delay>
      ms += 10U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	330a      	adds	r3, #10
 80059ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f926 	bl	8006c02 <USB_GetMode>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <USB_SetCurrentMode+0x84>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2bc7      	cmp	r3, #199	@ 0xc7
 80059c0:	d9f0      	bls.n	80059a4 <USB_SetCurrentMode+0x60>
 80059c2:	e001      	b.n	80059c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e005      	b.n	80059d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80059cc:	d101      	bne.n	80059d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059dc:	b084      	sub	sp, #16
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e009      	b.n	8005a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3340      	adds	r3, #64	@ 0x40
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b0e      	cmp	r3, #14
 8005a14:	d9f2      	bls.n	80059fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d11c      	bne.n	8005a58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a2c:	f043 0302 	orr.w	r3, r3, #2
 8005a30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a56:	e00b      	b.n	8005a70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10d      	bne.n	8005aa0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f968 	bl	8005d64 <USB_SetDevSpeed>
 8005a94:	e008      	b.n	8005aa8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a96:	2101      	movs	r1, #1
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f963 	bl	8005d64 <USB_SetDevSpeed>
 8005a9e:	e003      	b.n	8005aa8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f95e 	bl	8005d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aa8:	2110      	movs	r1, #16
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8fa 	bl	8005ca4 <USB_FlushTxFifo>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f924 	bl	8005d08 <USB_FlushRxFifo>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005adc:	461a      	mov	r2, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e043      	b.n	8005b7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b0a:	d118      	bne.n	8005b3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e013      	b.n	8005b50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b34:	461a      	mov	r2, r3
 8005b36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e008      	b.n	8005b50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b80:	461a      	mov	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d3b5      	bcc.n	8005af4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e043      	b.n	8005c16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ba4:	d118      	bne.n	8005bd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e013      	b.n	8005bea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e008      	b.n	8005bea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d3b5      	bcc.n	8005b8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f043 0210 	orr.w	r2, r3, #16
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <USB_DevInit+0x2c4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f043 0208 	orr.w	r2, r3, #8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9c:	b004      	add	sp, #16
 8005c9e:	4770      	bx	lr
 8005ca0:	803c3800 	.word	0x803c3800

08005ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cbe:	d901      	bls.n	8005cc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e01b      	b.n	8005cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	daf2      	bge.n	8005cb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ce8:	d901      	bls.n	8005cee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e006      	b.n	8005cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d0f0      	beq.n	8005cdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d20:	d901      	bls.n	8005d26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e018      	b.n	8005d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	daf2      	bge.n	8005d14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2210      	movs	r2, #16
 8005d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d44:	d901      	bls.n	8005d4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e006      	b.n	8005d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d0f0      	beq.n	8005d38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
 8005dba:	e00a      	b.n	8005dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d002      	beq.n	8005dc8 <USB_GetDevSpeed+0x32>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d102      	bne.n	8005dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	e001      	b.n	8005dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dce:	230f      	movs	r3, #15
 8005dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d13a      	bne.n	8005e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d155      	bne.n	8005ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	059b      	lsls	r3, r3, #22
 8005e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e036      	b.n	8005ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11a      	bne.n	8005ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d161      	bne.n	8005fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f22:	d11f      	bne.n	8005f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f84:	4013      	ands	r3, r2
 8005f86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0159      	lsls	r1, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4b35      	ldr	r3, [pc, #212]	@ (80060a0 <USB_DeactivateEndpoint+0x1b0>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
 8005fce:	e060      	b.n	8006092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fe6:	d11f      	bne.n	8006028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f303 	lsl.w	r3, r1, r3
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	43db      	mvns	r3, r3
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006048:	4013      	ands	r3, r2
 800604a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	0159      	lsls	r1, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	440b      	add	r3, r1
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	4619      	mov	r1, r3
 800608c:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <USB_DeactivateEndpoint+0x1b4>)
 800608e:	4013      	ands	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	ec337800 	.word	0xec337800
 80060a4:	eff37800 	.word	0xeff37800

080060a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f040 817f 	bne.w	80063c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d132      	bne.n	8006138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006130:	0cdb      	lsrs	r3, r3, #19
 8006132:	04db      	lsls	r3, r3, #19
 8006134:	6113      	str	r3, [r2, #16]
 8006136:	e097      	b.n	8006268 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006152:	0cdb      	lsrs	r3, r3, #19
 8006154:	04db      	lsls	r3, r3, #19
 8006156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006172:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006176:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800617a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d11a      	bne.n	80061b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d903      	bls.n	8006196 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061b4:	6113      	str	r3, [r2, #16]
 80061b6:	e044      	b.n	8006242 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	8afb      	ldrh	r3, [r7, #22]
 80061de:	04d9      	lsls	r1, r3, #19
 80061e0:	4ba4      	ldr	r3, [pc, #656]	@ (8006474 <USB_EPStartXfer+0x3cc>)
 80061e2:	400b      	ands	r3, r1
 80061e4:	69b9      	ldr	r1, [r7, #24]
 80061e6:	0148      	lsls	r0, r1, #5
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	4401      	add	r1, r0
 80061ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061f0:	4313      	orrs	r3, r2
 80061f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d122      	bne.n	8006242 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006216:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800621a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	8afb      	ldrh	r3, [r7, #22]
 800622c:	075b      	lsls	r3, r3, #29
 800622e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006232:	69b9      	ldr	r1, [r7, #24]
 8006234:	0148      	lsls	r0, r1, #5
 8006236:	69f9      	ldr	r1, [r7, #28]
 8006238:	4401      	add	r1, r0
 800623a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	0148      	lsls	r0, r1, #5
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	4401      	add	r1, r0
 8006260:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d14b      	bne.n	8006306 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	791b      	ldrb	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d128      	bne.n	80062e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d110      	bne.n	80062c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e00f      	b.n	80062e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e166      	b.n	80065d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006320:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006324:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	791b      	ldrb	r3, [r3, #4]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d015      	beq.n	800635a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 814e 	beq.w	80065d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	2101      	movs	r1, #1
 800634a:	fa01 f303 	lsl.w	r3, r1, r3
 800634e:	69f9      	ldr	r1, [r7, #28]
 8006350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006354:	4313      	orrs	r3, r2
 8006356:	634b      	str	r3, [r1, #52]	@ 0x34
 8006358:	e13c      	b.n	80065d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d110      	bne.n	800638c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00f      	b.n	80063ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68d9      	ldr	r1, [r3, #12]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	b298      	uxth	r0, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4603      	mov	r3, r0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f9b9 	bl	8006738 <USB_WritePacket>
 80063c6:	e105      	b.n	80065d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e2:	0cdb      	lsrs	r3, r3, #19
 80063e4:	04db      	lsls	r3, r3, #19
 80063e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006402:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006406:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800640a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d132      	bne.n	8006478 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	0148      	lsls	r0, r1, #5
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	4401      	add	r1, r0
 8006448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644c:	4313      	orrs	r3, r2
 800644e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800646a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800646e:	6113      	str	r3, [r2, #16]
 8006470:	e062      	b.n	8006538 <USB_EPStartXfer+0x490>
 8006472:	bf00      	nop
 8006474:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d123      	bne.n	80064c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	0148      	lsls	r0, r1, #5
 800649a:	69f9      	ldr	r1, [r7, #28]
 800649c:	4401      	add	r1, r0
 800649e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064a2:	4313      	orrs	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064c4:	6113      	str	r3, [r2, #16]
 80064c6:	e037      	b.n	8006538 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	1e5a      	subs	r2, r3, #1
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	8afa      	ldrh	r2, [r7, #22]
 80064e4:	fb03 f202 	mul.w	r2, r3, r2
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	04d9      	lsls	r1, r3, #19
 80064fe:	4b38      	ldr	r3, [pc, #224]	@ (80065e0 <USB_EPStartXfer+0x538>)
 8006500:	400b      	ands	r3, r1
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	0148      	lsls	r0, r1, #5
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	4401      	add	r1, r0
 800650a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800650e:	4313      	orrs	r3, r2
 8006510:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006528:	69b9      	ldr	r1, [r7, #24]
 800652a:	0148      	lsls	r0, r1, #5
 800652c:	69f9      	ldr	r1, [r7, #28]
 800652e:	4401      	add	r1, r0
 8006530:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d10d      	bne.n	800655a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	68d9      	ldr	r1, [r3, #12]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006556:	460a      	mov	r2, r1
 8006558:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	791b      	ldrb	r3, [r3, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d128      	bne.n	80065b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d110      	bne.n	8006594 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800658c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e00f      	b.n	80065b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	1ff80000 	.word	0x1ff80000

080065e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d14a      	bne.n	8006698 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800661a:	f040 8086 	bne.w	800672a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006640:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006672:	4293      	cmp	r3, r2
 8006674:	d902      	bls.n	800667c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
          break;
 800667a:	e056      	b.n	800672a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006694:	d0e7      	beq.n	8006666 <USB_EPStopXfer+0x82>
 8006696:	e048      	b.n	800672a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b0:	d13b      	bne.n	800672a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006706:	4293      	cmp	r3, r2
 8006708:	d902      	bls.n	8006710 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
          break;
 800670e:	e00c      	b.n	800672a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006728:	d0e7      	beq.n	80066fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	@ 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	460b      	mov	r3, r1
 8006748:	71fb      	strb	r3, [r7, #7]
 800674a:	4613      	mov	r3, r2
 800674c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006756:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d123      	bne.n	80067a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800675e:	88bb      	ldrh	r3, [r7, #4]
 8006760:	3303      	adds	r3, #3
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e018      	b.n	800679e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	031a      	lsls	r2, r3, #12
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	4413      	add	r3, r2
 8006774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006778:	461a      	mov	r2, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3301      	adds	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3301      	adds	r3, #1
 8006796:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	3301      	adds	r3, #1
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3e2      	bcc.n	800676c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3724      	adds	r7, #36	@ 0x24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b08b      	sub	sp, #44	@ 0x2c
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	e014      	b.n	800680a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	3301      	adds	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	3301      	adds	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	3301      	adds	r3, #1
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	3301      	adds	r3, #1
 8006808:	623b      	str	r3, [r7, #32]
 800680a:	6a3a      	ldr	r2, [r7, #32]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	429a      	cmp	r2, r3
 8006810:	d3e6      	bcc.n	80067e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006822:	461a      	mov	r2, r3
 8006824:	f107 0310 	add.w	r3, r7, #16
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	b2da      	uxtb	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	701a      	strb	r2, [r3, #0]
      i++;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	3301      	adds	r3, #1
 8006842:	623b      	str	r3, [r7, #32]
      pDest++;
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	3301      	adds	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800684a:	8bfb      	ldrh	r3, [r7, #30]
 800684c:	3b01      	subs	r3, #1
 800684e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006850:	8bfb      	ldrh	r3, [r7, #30]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ea      	bne.n	800682c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006858:	4618      	mov	r0, r3
 800685a:	372c      	adds	r7, #44	@ 0x2c
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d12c      	bne.n	80068da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	db12      	blt.n	80068b8 <USB_EPSetStall+0x54>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e02b      	b.n	8006932 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db12      	blt.n	8006912 <USB_EPSetStall+0xae>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00f      	beq.n	8006912 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800690c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006910:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800692c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d128      	bne.n	80069ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800697a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	791b      	ldrb	r3, [r3, #4]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d003      	beq.n	800698c <USB_EPClearStall+0x4c>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d138      	bne.n	80069fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e027      	b.n	80069fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d003      	beq.n	80069de <USB_EPClearStall+0x9e>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	791b      	ldrb	r3, [r3, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d10f      	bne.n	80069fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a86:	f023 0302 	bic.w	r3, r3, #2
 8006a8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ab4:	f023 0303 	bic.w	r3, r3, #3
 8006ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	0c1b      	lsrs	r3, r3, #16
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	b29b      	uxth	r3, r3
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b98:	68bb      	ldr	r3, [r7, #8]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c3c:	f023 0307 	bic.w	r3, r3, #7
 8006c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	333c      	adds	r3, #60	@ 0x3c
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4a26      	ldr	r2, [pc, #152]	@ (8006d1c <USB_EP0_OutStart+0xb8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d90a      	bls.n	8006c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c98:	d101      	bne.n	8006c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e037      	b.n	8006d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ccc:	f043 0318 	orr.w	r3, r3, #24
 8006cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10f      	bne.n	8006d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	4f54300a 	.word	0x4f54300a

08006d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d38:	d901      	bls.n	8006d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e022      	b.n	8006d84 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	daf2      	bge.n	8006d2c <USB_CoreReset+0xc>

  count = 10U;
 8006d46:	230a      	movs	r3, #10
 8006d48:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006d4a:	e002      	b.n	8006d52 <USB_CoreReset+0x32>
  {
    count--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f9      	bne.n	8006d4c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3301      	adds	r3, #1
 8006d68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d70:	d901      	bls.n	8006d76 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e006      	b.n	8006d84 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d0f0      	beq.n	8006d64 <USB_CoreReset+0x44>

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006da0:	f002 fcbc 	bl	800971c <USBD_static_malloc>
 8006da4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	32b0      	adds	r2, #176	@ 0xb0
 8006db6:	2100      	movs	r1, #0
 8006db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e0d4      	b.n	8006f6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006dc0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f003 f90a 	bl	8009fe0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32b0      	adds	r2, #176	@ 0xb0
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32b0      	adds	r2, #176	@ 0xb0
 8006de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	7c1b      	ldrb	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d138      	bne.n	8006e6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006df8:	4b5e      	ldr	r3, [pc, #376]	@ (8006f74 <USBD_CDC_Init+0x1e4>)
 8006dfa:	7819      	ldrb	r1, [r3, #0]
 8006dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e00:	2202      	movs	r2, #2
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f002 fb67 	bl	80094d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e08:	4b5a      	ldr	r3, [pc, #360]	@ (8006f74 <USBD_CDC_Init+0x1e4>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 020f 	and.w	r2, r3, #15
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	3323      	adds	r3, #35	@ 0x23
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e22:	4b55      	ldr	r3, [pc, #340]	@ (8006f78 <USBD_CDC_Init+0x1e8>)
 8006e24:	7819      	ldrb	r1, [r3, #0]
 8006e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f002 fb52 	bl	80094d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e32:	4b51      	ldr	r3, [pc, #324]	@ (8006f78 <USBD_CDC_Init+0x1e8>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 020f 	and.w	r2, r3, #15
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8006f7c <USBD_CDC_Init+0x1ec>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	f003 020f 	and.w	r2, r3, #15
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	331c      	adds	r3, #28
 8006e64:	2210      	movs	r2, #16
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e035      	b.n	8006ed6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e6a:	4b42      	ldr	r3, [pc, #264]	@ (8006f74 <USBD_CDC_Init+0x1e4>)
 8006e6c:	7819      	ldrb	r1, [r3, #0]
 8006e6e:	2340      	movs	r3, #64	@ 0x40
 8006e70:	2202      	movs	r2, #2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 fb2f 	bl	80094d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e78:	4b3e      	ldr	r3, [pc, #248]	@ (8006f74 <USBD_CDC_Init+0x1e4>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 020f 	and.w	r2, r3, #15
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	3323      	adds	r3, #35	@ 0x23
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e92:	4b39      	ldr	r3, [pc, #228]	@ (8006f78 <USBD_CDC_Init+0x1e8>)
 8006e94:	7819      	ldrb	r1, [r3, #0]
 8006e96:	2340      	movs	r3, #64	@ 0x40
 8006e98:	2202      	movs	r2, #2
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f002 fb1b 	bl	80094d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ea0:	4b35      	ldr	r3, [pc, #212]	@ (8006f78 <USBD_CDC_Init+0x1e8>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	f003 020f 	and.w	r2, r3, #15
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006eb8:	2201      	movs	r2, #1
 8006eba:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8006f7c <USBD_CDC_Init+0x1ec>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	331c      	adds	r3, #28
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ed6:	4b29      	ldr	r3, [pc, #164]	@ (8006f7c <USBD_CDC_Init+0x1ec>)
 8006ed8:	7819      	ldrb	r1, [r3, #0]
 8006eda:	2308      	movs	r3, #8
 8006edc:	2203      	movs	r2, #3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f002 faf9 	bl	80094d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ee4:	4b25      	ldr	r3, [pc, #148]	@ (8006f7c <USBD_CDC_Init+0x1ec>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 020f 	and.w	r2, r3, #15
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3323      	adds	r3, #35	@ 0x23
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	33b0      	adds	r3, #176	@ 0xb0
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f34:	2302      	movs	r3, #2
 8006f36:	e018      	b.n	8006f6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7c1b      	ldrb	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f40:	4b0d      	ldr	r3, [pc, #52]	@ (8006f78 <USBD_CDC_Init+0x1e8>)
 8006f42:	7819      	ldrb	r1, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f002 fbb0 	bl	80096b4 <USBD_LL_PrepareReceive>
 8006f54:	e008      	b.n	8006f68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f56:	4b08      	ldr	r3, [pc, #32]	@ (8006f78 <USBD_CDC_Init+0x1e8>)
 8006f58:	7819      	ldrb	r1, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f60:	2340      	movs	r3, #64	@ 0x40
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f002 fba6 	bl	80096b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000093 	.word	0x20000093
 8006f78:	20000094 	.word	0x20000094
 8006f7c:	20000095 	.word	0x20000095

08006f80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007078 <USBD_CDC_DeInit+0xf8>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f002 fac5 	bl	8009522 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f98:	4b37      	ldr	r3, [pc, #220]	@ (8007078 <USBD_CDC_DeInit+0xf8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 020f 	and.w	r2, r3, #15
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	3323      	adds	r3, #35	@ 0x23
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fb2:	4b32      	ldr	r3, [pc, #200]	@ (800707c <USBD_CDC_DeInit+0xfc>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f002 fab2 	bl	8009522 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800707c <USBD_CDC_DeInit+0xfc>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 020f 	and.w	r2, r3, #15
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fda:	4b29      	ldr	r3, [pc, #164]	@ (8007080 <USBD_CDC_DeInit+0x100>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f002 fa9e 	bl	8009522 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fe6:	4b26      	ldr	r3, [pc, #152]	@ (8007080 <USBD_CDC_DeInit+0x100>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3323      	adds	r3, #35	@ 0x23
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007000:	4b1f      	ldr	r3, [pc, #124]	@ (8007080 <USBD_CDC_DeInit+0x100>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f003 020f 	and.w	r2, r3, #15
 8007008:	6879      	ldr	r1, [r7, #4]
 800700a:	4613      	mov	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	331c      	adds	r3, #28
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	32b0      	adds	r2, #176	@ 0xb0
 8007024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01f      	beq.n	800706c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	33b0      	adds	r3, #176	@ 0xb0
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32b0      	adds	r2, #176	@ 0xb0
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	4618      	mov	r0, r3
 8007050:	f002 fb72 	bl	8009738 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	32b0      	adds	r2, #176	@ 0xb0
 800705e:	2100      	movs	r1, #0
 8007060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000093 	.word	0x20000093
 800707c:	20000094 	.word	0x20000094
 8007080:	20000095 	.word	0x20000095

08007084 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	32b0      	adds	r2, #176	@ 0xb0
 8007098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e0bf      	b.n	8007234 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d050      	beq.n	8007162 <USBD_CDC_Setup+0xde>
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	f040 80af 	bne.w	8007224 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	88db      	ldrh	r3, [r3, #6]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d03a      	beq.n	8007144 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b25b      	sxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da1b      	bge.n	8007110 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	33b0      	adds	r3, #176	@ 0xb0
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	88d2      	ldrh	r2, [r2, #6]
 80070f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	88db      	ldrh	r3, [r3, #6]
 80070fa:	2b07      	cmp	r3, #7
 80070fc:	bf28      	it	cs
 80070fe:	2307      	movcs	r3, #7
 8007100:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	89fa      	ldrh	r2, [r7, #14]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fda9 	bl	8008c60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800710e:	e090      	b.n	8007232 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	785a      	ldrb	r2, [r3, #1]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	88db      	ldrh	r3, [r3, #6]
 800711e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007120:	d803      	bhi.n	800712a <USBD_CDC_Setup+0xa6>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	b2da      	uxtb	r2, r3
 8007128:	e000      	b.n	800712c <USBD_CDC_Setup+0xa8>
 800712a:	2240      	movs	r2, #64	@ 0x40
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007132:	6939      	ldr	r1, [r7, #16]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800713a:	461a      	mov	r2, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fdbe 	bl	8008cbe <USBD_CtlPrepareRx>
      break;
 8007142:	e076      	b.n	8007232 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	33b0      	adds	r3, #176	@ 0xb0
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	7850      	ldrb	r0, [r2, #1]
 800715a:	2200      	movs	r2, #0
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	4798      	blx	r3
      break;
 8007160:	e067      	b.n	8007232 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	785b      	ldrb	r3, [r3, #1]
 8007166:	2b0b      	cmp	r3, #11
 8007168:	d851      	bhi.n	800720e <USBD_CDC_Setup+0x18a>
 800716a:	a201      	add	r2, pc, #4	@ (adr r2, 8007170 <USBD_CDC_Setup+0xec>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	080071a1 	.word	0x080071a1
 8007174:	0800721d 	.word	0x0800721d
 8007178:	0800720f 	.word	0x0800720f
 800717c:	0800720f 	.word	0x0800720f
 8007180:	0800720f 	.word	0x0800720f
 8007184:	0800720f 	.word	0x0800720f
 8007188:	0800720f 	.word	0x0800720f
 800718c:	0800720f 	.word	0x0800720f
 8007190:	0800720f 	.word	0x0800720f
 8007194:	0800720f 	.word	0x0800720f
 8007198:	080071cb 	.word	0x080071cb
 800719c:	080071f5 	.word	0x080071f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d107      	bne.n	80071bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071ac:	f107 030a 	add.w	r3, r7, #10
 80071b0:	2202      	movs	r2, #2
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fd53 	bl	8008c60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071ba:	e032      	b.n	8007222 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fcd1 	bl	8008b66 <USBD_CtlError>
            ret = USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	75fb      	strb	r3, [r7, #23]
          break;
 80071c8:	e02b      	b.n	8007222 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d107      	bne.n	80071e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071d6:	f107 030d 	add.w	r3, r7, #13
 80071da:	2201      	movs	r2, #1
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 fd3e 	bl	8008c60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071e4:	e01d      	b.n	8007222 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fcbc 	bl	8008b66 <USBD_CtlError>
            ret = USBD_FAIL;
 80071ee:	2303      	movs	r3, #3
 80071f0:	75fb      	strb	r3, [r7, #23]
          break;
 80071f2:	e016      	b.n	8007222 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d00f      	beq.n	8007220 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f001 fcaf 	bl	8008b66 <USBD_CtlError>
            ret = USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800720c:	e008      	b.n	8007220 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fca8 	bl	8008b66 <USBD_CtlError>
          ret = USBD_FAIL;
 8007216:	2303      	movs	r3, #3
 8007218:	75fb      	strb	r3, [r7, #23]
          break;
 800721a:	e002      	b.n	8007222 <USBD_CDC_Setup+0x19e>
          break;
 800721c:	bf00      	nop
 800721e:	e008      	b.n	8007232 <USBD_CDC_Setup+0x1ae>
          break;
 8007220:	bf00      	nop
      }
      break;
 8007222:	e006      	b.n	8007232 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f001 fc9d 	bl	8008b66 <USBD_CtlError>
      ret = USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	75fb      	strb	r3, [r7, #23]
      break;
 8007230:	bf00      	nop
  }

  return (uint8_t)ret;
 8007232:	7dfb      	ldrb	r3, [r7, #23]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800724e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	32b0      	adds	r2, #176	@ 0xb0
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007262:	2303      	movs	r3, #3
 8007264:	e065      	b.n	8007332 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32b0      	adds	r2, #176	@ 0xb0
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	3314      	adds	r3, #20
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d02f      	beq.n	80072f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	f003 020f 	and.w	r2, r3, #15
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	3314      	adds	r3, #20
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	f003 010f 	and.w	r1, r3, #15
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	460b      	mov	r3, r1
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	440b      	add	r3, r1
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4403      	add	r3, r0
 80072b8:	331c      	adds	r3, #28
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d112      	bne.n	80072f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	f003 020f 	and.w	r2, r3, #15
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3314      	adds	r3, #20
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072e2:	78f9      	ldrb	r1, [r7, #3]
 80072e4:	2300      	movs	r3, #0
 80072e6:	2200      	movs	r2, #0
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 f9c2 	bl	8009672 <USBD_LL_Transmit>
 80072ee:	e01f      	b.n	8007330 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	33b0      	adds	r3, #176	@ 0xb0
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d010      	beq.n	8007330 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	33b0      	adds	r3, #176	@ 0xb0
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	32b0      	adds	r2, #176	@ 0xb0
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	32b0      	adds	r2, #176	@ 0xb0
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007368:	2303      	movs	r3, #3
 800736a:	e01a      	b.n	80073a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f002 f9c0 	bl	80096f6 <USBD_LL_GetRxDataSize>
 8007376:	4602      	mov	r2, r0
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	33b0      	adds	r3, #176	@ 0xb0
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800739c:	4611      	mov	r1, r2
 800739e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	32b0      	adds	r2, #176	@ 0xb0
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e024      	b.n	8007416 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	33b0      	adds	r3, #176	@ 0xb0
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d019      	beq.n	8007414 <USBD_CDC_EP0_RxReady+0x6a>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073e6:	2bff      	cmp	r3, #255	@ 0xff
 80073e8:	d014      	beq.n	8007414 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	33b0      	adds	r3, #176	@ 0xb0
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007402:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800740a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	22ff      	movs	r2, #255	@ 0xff
 8007410:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007428:	2182      	movs	r1, #130	@ 0x82
 800742a:	4818      	ldr	r0, [pc, #96]	@ (800748c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800742c:	f000 fd62 	bl	8007ef4 <USBD_GetEpDesc>
 8007430:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007432:	2101      	movs	r1, #1
 8007434:	4815      	ldr	r0, [pc, #84]	@ (800748c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007436:	f000 fd5d 	bl	8007ef4 <USBD_GetEpDesc>
 800743a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800743c:	2181      	movs	r1, #129	@ 0x81
 800743e:	4813      	ldr	r0, [pc, #76]	@ (800748c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007440:	f000 fd58 	bl	8007ef4 <USBD_GetEpDesc>
 8007444:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2210      	movs	r2, #16
 8007450:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2200      	movs	r2, #0
 800745c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007460:	711a      	strb	r2, [r3, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d006      	beq.n	800747a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007474:	711a      	strb	r2, [r3, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2243      	movs	r2, #67	@ 0x43
 800747e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20000050 	.word	0x20000050

08007490 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007498:	2182      	movs	r1, #130	@ 0x82
 800749a:	4818      	ldr	r0, [pc, #96]	@ (80074fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800749c:	f000 fd2a 	bl	8007ef4 <USBD_GetEpDesc>
 80074a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074a2:	2101      	movs	r1, #1
 80074a4:	4815      	ldr	r0, [pc, #84]	@ (80074fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074a6:	f000 fd25 	bl	8007ef4 <USBD_GetEpDesc>
 80074aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074ac:	2181      	movs	r1, #129	@ 0x81
 80074ae:	4813      	ldr	r0, [pc, #76]	@ (80074fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074b0:	f000 fd20 	bl	8007ef4 <USBD_GetEpDesc>
 80074b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2210      	movs	r2, #16
 80074c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d006      	beq.n	80074d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2200      	movs	r2, #0
 80074cc:	711a      	strb	r2, [r3, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f042 0202 	orr.w	r2, r2, #2
 80074d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d006      	beq.n	80074ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	711a      	strb	r2, [r3, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f042 0202 	orr.w	r2, r2, #2
 80074e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2243      	movs	r2, #67	@ 0x43
 80074ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3718      	adds	r7, #24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000050 	.word	0x20000050

08007500 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007508:	2182      	movs	r1, #130	@ 0x82
 800750a:	4818      	ldr	r0, [pc, #96]	@ (800756c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800750c:	f000 fcf2 	bl	8007ef4 <USBD_GetEpDesc>
 8007510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007512:	2101      	movs	r1, #1
 8007514:	4815      	ldr	r0, [pc, #84]	@ (800756c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007516:	f000 fced 	bl	8007ef4 <USBD_GetEpDesc>
 800751a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800751c:	2181      	movs	r1, #129	@ 0x81
 800751e:	4813      	ldr	r0, [pc, #76]	@ (800756c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007520:	f000 fce8 	bl	8007ef4 <USBD_GetEpDesc>
 8007524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2210      	movs	r2, #16
 8007530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d006      	beq.n	8007546 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2200      	movs	r2, #0
 800753c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007540:	711a      	strb	r2, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d006      	beq.n	800755a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007554:	711a      	strb	r2, [r3, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2243      	movs	r2, #67	@ 0x43
 800755e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007560:	4b02      	ldr	r3, [pc, #8]	@ (800756c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000050 	.word	0x20000050

08007570 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	220a      	movs	r2, #10
 800757c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800757e:	4b03      	ldr	r3, [pc, #12]	@ (800758c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007580:	4618      	mov	r0, r3
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	2000000c 	.word	0x2000000c

08007590 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e009      	b.n	80075b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	33b0      	adds	r3, #176	@ 0xb0
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	32b0      	adds	r2, #176	@ 0xb0
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e008      	b.n	80075fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	32b0      	adds	r2, #176	@ 0xb0
 800761c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007620:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007628:	2303      	movs	r3, #3
 800762a:	e004      	b.n	8007636 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32b0      	adds	r2, #176	@ 0xb0
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	e025      	b.n	80076b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11f      	bne.n	80076b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2201      	movs	r2, #1
 8007678:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800767c:	4b10      	ldr	r3, [pc, #64]	@ (80076c0 <USBD_CDC_TransmitPacket+0x7c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f003 020f 	and.w	r2, r3, #15
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4403      	add	r3, r0
 8007696:	3314      	adds	r3, #20
 8007698:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800769a:	4b09      	ldr	r3, [pc, #36]	@ (80076c0 <USBD_CDC_TransmitPacket+0x7c>)
 800769c:	7819      	ldrb	r1, [r3, #0]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 ffe1 	bl	8009672 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000093 	.word	0x20000093

080076c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	32b0      	adds	r2, #176	@ 0xb0
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32b0      	adds	r2, #176	@ 0xb0
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e018      	b.n	8007724 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7c1b      	ldrb	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076fa:	4b0c      	ldr	r3, [pc, #48]	@ (800772c <USBD_CDC_ReceivePacket+0x68>)
 80076fc:	7819      	ldrb	r1, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 ffd3 	bl	80096b4 <USBD_LL_PrepareReceive>
 800770e:	e008      	b.n	8007722 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007710:	4b06      	ldr	r3, [pc, #24]	@ (800772c <USBD_CDC_ReceivePacket+0x68>)
 8007712:	7819      	ldrb	r1, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800771a:	2340      	movs	r3, #64	@ 0x40
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f001 ffc9 	bl	80096b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000094 	.word	0x20000094

08007730 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007744:	2303      	movs	r3, #3
 8007746:	e01f      	b.n	8007788 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	79fa      	ldrb	r2, [r7, #7]
 800777a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f001 fe43 	bl	8009408 <USBD_LL_Init>
 8007782:	4603      	mov	r3, r0
 8007784:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e025      	b.n	80077f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	32ae      	adds	r2, #174	@ 0xae
 80077ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00f      	beq.n	80077e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	32ae      	adds	r2, #174	@ 0xae
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	f107 020e 	add.w	r2, r7, #14
 80077d8:	4610      	mov	r0, r2
 80077da:	4798      	blx	r3
 80077dc:	4602      	mov	r2, r0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fe4b 	bl	80094a0 <USBD_LL_Start>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007840:	2b00      	cmp	r3, #0
 8007842:	d009      	beq.n	8007858 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	4611      	mov	r1, r2
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	460b      	mov	r3, r1
 800786c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	4611      	mov	r1, r2
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007888:	2303      	movs	r3, #3
 800788a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 f922 	bl	8008af2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078ca:	f003 031f 	and.w	r3, r3, #31
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d01a      	beq.n	8007908 <USBD_LL_SetupStage+0x72>
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d822      	bhi.n	800791c <USBD_LL_SetupStage+0x86>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <USBD_LL_SetupStage+0x4a>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d00a      	beq.n	80078f4 <USBD_LL_SetupStage+0x5e>
 80078de:	e01d      	b.n	800791c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fb77 	bl	8007fdc <USBD_StdDevReq>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73fb      	strb	r3, [r7, #15]
      break;
 80078f2:	e020      	b.n	8007936 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbdf 	bl	80080c0 <USBD_StdItfReq>
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
      break;
 8007906:	e016      	b.n	8007936 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc41 	bl	8008198 <USBD_StdEPReq>
 8007916:	4603      	mov	r3, r0
 8007918:	73fb      	strb	r3, [r7, #15]
      break;
 800791a:	e00c      	b.n	8007936 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007922:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007926:	b2db      	uxtb	r3, r3
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f001 fe18 	bl	8009560 <USBD_LL_StallEP>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
      break;
 8007934:	bf00      	nop
  }

  return ret;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	460b      	mov	r3, r1
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007952:	7afb      	ldrb	r3, [r7, #11]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d177      	bne.n	8007a48 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800795e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007966:	2b03      	cmp	r3, #3
 8007968:	f040 80a1 	bne.w	8007aae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	8992      	ldrh	r2, [r2, #12]
 8007974:	4293      	cmp	r3, r2
 8007976:	d91c      	bls.n	80079b2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	8992      	ldrh	r2, [r2, #12]
 8007980:	1a9a      	subs	r2, r3, r2
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	8992      	ldrh	r2, [r2, #12]
 800798e:	441a      	add	r2, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	6919      	ldr	r1, [r3, #16]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	899b      	ldrh	r3, [r3, #12]
 800799c:	461a      	mov	r2, r3
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	4293      	cmp	r3, r2
 80079a4:	bf38      	it	cc
 80079a6:	4613      	movcc	r3, r2
 80079a8:	461a      	mov	r2, r3
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f001 f9a8 	bl	8008d00 <USBD_CtlContinueRx>
 80079b0:	e07d      	b.n	8007aae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d014      	beq.n	80079ea <USBD_LL_DataOutStage+0xaa>
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d81d      	bhi.n	8007a00 <USBD_LL_DataOutStage+0xc0>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <USBD_LL_DataOutStage+0x8e>
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d003      	beq.n	80079d4 <USBD_LL_DataOutStage+0x94>
 80079cc:	e018      	b.n	8007a00 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	75bb      	strb	r3, [r7, #22]
            break;
 80079d2:	e018      	b.n	8007a06 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fa6e 	bl	8007ec0 <USBD_CoreFindIF>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75bb      	strb	r3, [r7, #22]
            break;
 80079e8:	e00d      	b.n	8007a06 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fa70 	bl	8007eda <USBD_CoreFindEP>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75bb      	strb	r3, [r7, #22]
            break;
 80079fe:	e002      	b.n	8007a06 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	75bb      	strb	r3, [r7, #22]
            break;
 8007a04:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a06:	7dbb      	ldrb	r3, [r7, #22]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d119      	bne.n	8007a40 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d113      	bne.n	8007a40 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a18:	7dba      	ldrb	r2, [r7, #22]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	32ae      	adds	r2, #174	@ 0xae
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007a28:	7dba      	ldrb	r2, [r7, #22]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a30:	7dba      	ldrb	r2, [r7, #22]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	32ae      	adds	r2, #174	@ 0xae
 8007a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 f96e 	bl	8008d22 <USBD_CtlSendStatus>
 8007a46:	e032      	b.n	8007aae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fa41 	bl	8007eda <USBD_CoreFindEP>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
 8007a5e:	2bff      	cmp	r3, #255	@ 0xff
 8007a60:	d025      	beq.n	8007aae <USBD_LL_DataOutStage+0x16e>
 8007a62:	7dbb      	ldrb	r3, [r7, #22]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d122      	bne.n	8007aae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d117      	bne.n	8007aa4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a74:	7dba      	ldrb	r2, [r7, #22]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	32ae      	adds	r2, #174	@ 0xae
 8007a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00f      	beq.n	8007aa4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007a84:	7dba      	ldrb	r2, [r7, #22]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a8c:	7dba      	ldrb	r2, [r7, #22]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	32ae      	adds	r2, #174	@ 0xae
 8007a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	7afa      	ldrb	r2, [r7, #11]
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	4798      	blx	r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	e000      	b.n	8007ab0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d178      	bne.n	8007bbe <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3314      	adds	r3, #20
 8007ad0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d163      	bne.n	8007ba4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	8992      	ldrh	r2, [r2, #12]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d91c      	bls.n	8007b22 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	8992      	ldrh	r2, [r2, #12]
 8007af0:	1a9a      	subs	r2, r3, r2
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	8992      	ldrh	r2, [r2, #12]
 8007afe:	441a      	add	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	6919      	ldr	r1, [r3, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 f8c4 	bl	8008c9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b14:	2300      	movs	r3, #0
 8007b16:	2200      	movs	r2, #0
 8007b18:	2100      	movs	r1, #0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fdca 	bl	80096b4 <USBD_LL_PrepareReceive>
 8007b20:	e040      	b.n	8007ba4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	899b      	ldrh	r3, [r3, #12]
 8007b26:	461a      	mov	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d11c      	bne.n	8007b6a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d316      	bcc.n	8007b6a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d20f      	bcs.n	8007b6a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f001 f8a4 	bl	8008c9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f001 fda6 	bl	80096b4 <USBD_LL_PrepareReceive>
 8007b68:	e01c      	b.n	8007ba4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d10f      	bne.n	8007b96 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d009      	beq.n	8007b96 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b96:	2180      	movs	r1, #128	@ 0x80
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f001 fce1 	bl	8009560 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f001 f8d2 	bl	8008d48 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d03a      	beq.n	8007c24 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fe30 	bl	8007814 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007bbc:	e032      	b.n	8007c24 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f986 	bl	8007eda <USBD_CoreFindEP>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	2bff      	cmp	r3, #255	@ 0xff
 8007bd6:	d025      	beq.n	8007c24 <USBD_LL_DataInStage+0x16c>
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d122      	bne.n	8007c24 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d11c      	bne.n	8007c24 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bea:	7dfa      	ldrb	r2, [r7, #23]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	32ae      	adds	r2, #174	@ 0xae
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d014      	beq.n	8007c24 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007bfa:	7dfa      	ldrb	r2, [r7, #23]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c02:	7dfa      	ldrb	r2, [r7, #23]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	32ae      	adds	r2, #174	@ 0xae
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	7afa      	ldrb	r2, [r7, #11]
 8007c10:	4611      	mov	r1, r2
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	4798      	blx	r3
 8007c16:	4603      	mov	r3, r0
 8007c18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c1a:	7dbb      	ldrb	r3, [r7, #22]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007c20:	7dbb      	ldrb	r3, [r7, #22]
 8007c22:	e000      	b.n	8007c26 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d014      	beq.n	8007c94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00e      	beq.n	8007c94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6852      	ldr	r2, [r2, #4]
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	4611      	mov	r1, r2
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c90:	2303      	movs	r3, #3
 8007c92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c94:	2340      	movs	r3, #64	@ 0x40
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fc1b 	bl	80094d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2240      	movs	r2, #64	@ 0x40
 8007cac:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb0:	2340      	movs	r3, #64	@ 0x40
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2180      	movs	r1, #128	@ 0x80
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fc0d 	bl	80094d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2240      	movs	r2, #64	@ 0x40
 8007cc8:	841a      	strh	r2, [r3, #32]

  return ret;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	78fa      	ldrb	r2, [r7, #3]
 8007ce4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d006      	beq.n	8007d16 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d106      	bne.n	8007d4e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d110      	bne.n	8007d92 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00b      	beq.n	8007d92 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	32ae      	adds	r2, #174	@ 0xae
 8007db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e01c      	b.n	8007df8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d115      	bne.n	8007df6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	32ae      	adds	r2, #174	@ 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	32ae      	adds	r2, #174	@ 0xae
 8007de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	78fa      	ldrb	r2, [r7, #3]
 8007df0:	4611      	mov	r1, r2
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	32ae      	adds	r2, #174	@ 0xae
 8007e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e01c      	b.n	8007e5c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d115      	bne.n	8007e5a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	32ae      	adds	r2, #174	@ 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	32ae      	adds	r2, #174	@ 0xae
 8007e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	78fa      	ldrb	r2, [r7, #3]
 8007e54:	4611      	mov	r1, r2
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00e      	beq.n	8007eb6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	6852      	ldr	r2, [r2, #4]
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ecc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ee6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	885b      	ldrh	r3, [r3, #2]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d91f      	bls.n	8007f5a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f20:	e013      	b.n	8007f4a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f22:	f107 030a 	add.w	r3, r7, #10
 8007f26:	4619      	mov	r1, r3
 8007f28:	6978      	ldr	r0, [r7, #20]
 8007f2a:	f000 f81b 	bl	8007f64 <USBD_GetNextDesc>
 8007f2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d108      	bne.n	8007f4a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	789b      	ldrb	r3, [r3, #2]
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d008      	beq.n	8007f58 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	897b      	ldrh	r3, [r7, #10]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d8e5      	bhi.n	8007f22 <USBD_GetEpDesc+0x2e>
 8007f56:	e000      	b.n	8007f5a <USBD_GetEpDesc+0x66>
          break;
 8007f58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f5a:	693b      	ldr	r3, [r7, #16]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	7812      	ldrb	r2, [r2, #0]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	b21a      	sxth	r2, r3
 8007fc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b21b      	sxth	r3, r3
 8007fca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	371c      	adds	r7, #28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
	...

08007fdc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ff2:	2b40      	cmp	r3, #64	@ 0x40
 8007ff4:	d005      	beq.n	8008002 <USBD_StdDevReq+0x26>
 8007ff6:	2b40      	cmp	r3, #64	@ 0x40
 8007ff8:	d857      	bhi.n	80080aa <USBD_StdDevReq+0xce>
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <USBD_StdDevReq+0x42>
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d153      	bne.n	80080aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32ae      	adds	r2, #174	@ 0xae
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]
      break;
 800801c:	e04a      	b.n	80080b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b09      	cmp	r3, #9
 8008024:	d83b      	bhi.n	800809e <USBD_StdDevReq+0xc2>
 8008026:	a201      	add	r2, pc, #4	@ (adr r2, 800802c <USBD_StdDevReq+0x50>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008081 	.word	0x08008081
 8008030:	08008095 	.word	0x08008095
 8008034:	0800809f 	.word	0x0800809f
 8008038:	0800808b 	.word	0x0800808b
 800803c:	0800809f 	.word	0x0800809f
 8008040:	0800805f 	.word	0x0800805f
 8008044:	08008055 	.word	0x08008055
 8008048:	0800809f 	.word	0x0800809f
 800804c:	08008077 	.word	0x08008077
 8008050:	08008069 	.word	0x08008069
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa3e 	bl	80084d8 <USBD_GetDescriptor>
          break;
 800805c:	e024      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fba3 	bl	80087ac <USBD_SetAddress>
          break;
 8008066:	e01f      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fbe2 	bl	8008834 <USBD_SetConfig>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]
          break;
 8008074:	e018      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fc85 	bl	8008988 <USBD_GetConfig>
          break;
 800807e:	e013      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fcb6 	bl	80089f4 <USBD_GetStatus>
          break;
 8008088:	e00e      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fce5 	bl	8008a5c <USBD_SetFeature>
          break;
 8008092:	e009      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fd09 	bl	8008aae <USBD_ClrFeature>
          break;
 800809c:	e004      	b.n	80080a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fd60 	bl	8008b66 <USBD_CtlError>
          break;
 80080a6:	bf00      	nop
      }
      break;
 80080a8:	e004      	b.n	80080b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fd5a 	bl	8008b66 <USBD_CtlError>
      break;
 80080b2:	bf00      	nop
  }

  return ret;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop

080080c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080d6:	2b40      	cmp	r3, #64	@ 0x40
 80080d8:	d005      	beq.n	80080e6 <USBD_StdItfReq+0x26>
 80080da:	2b40      	cmp	r3, #64	@ 0x40
 80080dc:	d852      	bhi.n	8008184 <USBD_StdItfReq+0xc4>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <USBD_StdItfReq+0x26>
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d14e      	bne.n	8008184 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d840      	bhi.n	8008176 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	889b      	ldrh	r3, [r3, #4]
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d836      	bhi.n	800816c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	889b      	ldrh	r3, [r3, #4]
 8008102:	b2db      	uxtb	r3, r3
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff feda 	bl	8007ec0 <USBD_CoreFindIF>
 800810c:	4603      	mov	r3, r0
 800810e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2bff      	cmp	r3, #255	@ 0xff
 8008114:	d01d      	beq.n	8008152 <USBD_StdItfReq+0x92>
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11a      	bne.n	8008152 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800811c:	7bba      	ldrb	r2, [r7, #14]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	32ae      	adds	r2, #174	@ 0xae
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00f      	beq.n	800814c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800812c:	7bba      	ldrb	r2, [r7, #14]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008134:	7bba      	ldrb	r2, [r7, #14]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	@ 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800814a:	e004      	b.n	8008156 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800814c:	2303      	movs	r3, #3
 800814e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008150:	e001      	b.n	8008156 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	88db      	ldrh	r3, [r3, #6]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d110      	bne.n	8008180 <USBD_StdItfReq+0xc0>
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10d      	bne.n	8008180 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fddc 	bl	8008d22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800816a:	e009      	b.n	8008180 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fcf9 	bl	8008b66 <USBD_CtlError>
          break;
 8008174:	e004      	b.n	8008180 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fcf4 	bl	8008b66 <USBD_CtlError>
          break;
 800817e:	e000      	b.n	8008182 <USBD_StdItfReq+0xc2>
          break;
 8008180:	bf00      	nop
      }
      break;
 8008182:	e004      	b.n	800818e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fced 	bl	8008b66 <USBD_CtlError>
      break;
 800818c:	bf00      	nop
  }

  return ret;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	889b      	ldrh	r3, [r3, #4]
 80081aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081b4:	2b40      	cmp	r3, #64	@ 0x40
 80081b6:	d007      	beq.n	80081c8 <USBD_StdEPReq+0x30>
 80081b8:	2b40      	cmp	r3, #64	@ 0x40
 80081ba:	f200 8181 	bhi.w	80084c0 <USBD_StdEPReq+0x328>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d02a      	beq.n	8008218 <USBD_StdEPReq+0x80>
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	f040 817c 	bne.w	80084c0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff fe84 	bl	8007eda <USBD_CoreFindEP>
 80081d2:	4603      	mov	r3, r0
 80081d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d6:	7b7b      	ldrb	r3, [r7, #13]
 80081d8:	2bff      	cmp	r3, #255	@ 0xff
 80081da:	f000 8176 	beq.w	80084ca <USBD_StdEPReq+0x332>
 80081de:	7b7b      	ldrb	r3, [r7, #13]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f040 8172 	bne.w	80084ca <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80081e6:	7b7a      	ldrb	r2, [r7, #13]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081ee:	7b7a      	ldrb	r2, [r7, #13]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	32ae      	adds	r2, #174	@ 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8165 	beq.w	80084ca <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008200:	7b7a      	ldrb	r2, [r7, #13]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32ae      	adds	r2, #174	@ 0xae
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008216:	e158      	b.n	80084ca <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b03      	cmp	r3, #3
 800821e:	d008      	beq.n	8008232 <USBD_StdEPReq+0x9a>
 8008220:	2b03      	cmp	r3, #3
 8008222:	f300 8147 	bgt.w	80084b4 <USBD_StdEPReq+0x31c>
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 809b 	beq.w	8008362 <USBD_StdEPReq+0x1ca>
 800822c:	2b01      	cmp	r3, #1
 800822e:	d03c      	beq.n	80082aa <USBD_StdEPReq+0x112>
 8008230:	e140      	b.n	80084b4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d002      	beq.n	8008244 <USBD_StdEPReq+0xac>
 800823e:	2b03      	cmp	r3, #3
 8008240:	d016      	beq.n	8008270 <USBD_StdEPReq+0xd8>
 8008242:	e02c      	b.n	800829e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <USBD_StdEPReq+0xce>
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b80      	cmp	r3, #128	@ 0x80
 800824e:	d00a      	beq.n	8008266 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f983 	bl	8009560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800825a:	2180      	movs	r1, #128	@ 0x80
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f97f 	bl	8009560 <USBD_LL_StallEP>
 8008262:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008264:	e020      	b.n	80082a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008266:	6839      	ldr	r1, [r7, #0]
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc7c 	bl	8008b66 <USBD_CtlError>
              break;
 800826e:	e01b      	b.n	80082a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10e      	bne.n	8008296 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008278:	7bbb      	ldrb	r3, [r7, #14]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00b      	beq.n	8008296 <USBD_StdEPReq+0xfe>
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b80      	cmp	r3, #128	@ 0x80
 8008282:	d008      	beq.n	8008296 <USBD_StdEPReq+0xfe>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	88db      	ldrh	r3, [r3, #6]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f965 	bl	8009560 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fd43 	bl	8008d22 <USBD_CtlSendStatus>

              break;
 800829c:	e004      	b.n	80082a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc60 	bl	8008b66 <USBD_CtlError>
              break;
 80082a6:	bf00      	nop
          }
          break;
 80082a8:	e109      	b.n	80084be <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d002      	beq.n	80082bc <USBD_StdEPReq+0x124>
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d016      	beq.n	80082e8 <USBD_StdEPReq+0x150>
 80082ba:	e04b      	b.n	8008354 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00d      	beq.n	80082de <USBD_StdEPReq+0x146>
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b80      	cmp	r3, #128	@ 0x80
 80082c6:	d00a      	beq.n	80082de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 f947 	bl	8009560 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082d2:	2180      	movs	r1, #128	@ 0x80
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 f943 	bl	8009560 <USBD_LL_StallEP>
 80082da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082dc:	e040      	b.n	8008360 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fc40 	bl	8008b66 <USBD_CtlError>
              break;
 80082e6:	e03b      	b.n	8008360 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	885b      	ldrh	r3, [r3, #2]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d136      	bne.n	800835e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d004      	beq.n	8008304 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 f94d 	bl	800959e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fd0c 	bl	8008d22 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7ff fde3 	bl	8007eda <USBD_CoreFindEP>
 8008314:	4603      	mov	r3, r0
 8008316:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008318:	7b7b      	ldrb	r3, [r7, #13]
 800831a:	2bff      	cmp	r3, #255	@ 0xff
 800831c:	d01f      	beq.n	800835e <USBD_StdEPReq+0x1c6>
 800831e:	7b7b      	ldrb	r3, [r7, #13]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11c      	bne.n	800835e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008324:	7b7a      	ldrb	r2, [r7, #13]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800832c:	7b7a      	ldrb	r2, [r7, #13]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	32ae      	adds	r2, #174	@ 0xae
 8008332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d010      	beq.n	800835e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32ae      	adds	r2, #174	@ 0xae
 8008342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008352:	e004      	b.n	800835e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fc05 	bl	8008b66 <USBD_CtlError>
              break;
 800835c:	e000      	b.n	8008360 <USBD_StdEPReq+0x1c8>
              break;
 800835e:	bf00      	nop
          }
          break;
 8008360:	e0ad      	b.n	80084be <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d002      	beq.n	8008374 <USBD_StdEPReq+0x1dc>
 800836e:	2b03      	cmp	r3, #3
 8008370:	d033      	beq.n	80083da <USBD_StdEPReq+0x242>
 8008372:	e099      	b.n	80084a8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <USBD_StdEPReq+0x1f2>
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	2b80      	cmp	r3, #128	@ 0x80
 800837e:	d004      	beq.n	800838a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fbef 	bl	8008b66 <USBD_CtlError>
                break;
 8008388:	e093      	b.n	80084b2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800838a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da0b      	bge.n	80083aa <USBD_StdEPReq+0x212>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	3310      	adds	r3, #16
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	3304      	adds	r3, #4
 80083a8:	e00b      	b.n	80083c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	4413      	add	r3, r2
 80083c0:	3304      	adds	r3, #4
 80083c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2200      	movs	r2, #0
 80083c8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	330e      	adds	r3, #14
 80083ce:	2202      	movs	r2, #2
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fc44 	bl	8008c60 <USBD_CtlSendData>
              break;
 80083d8:	e06b      	b.n	80084b2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da11      	bge.n	8008406 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	f003 020f 	and.w	r2, r3, #15
 80083e8:	6879      	ldr	r1, [r7, #4]
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	440b      	add	r3, r1
 80083f4:	3323      	adds	r3, #35	@ 0x23
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d117      	bne.n	800842c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fbb1 	bl	8008b66 <USBD_CtlError>
                  break;
 8008404:	e055      	b.n	80084b2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	f003 020f 	and.w	r2, r3, #15
 800840c:	6879      	ldr	r1, [r7, #4]
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	440b      	add	r3, r1
 8008418:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fb9e 	bl	8008b66 <USBD_CtlError>
                  break;
 800842a:	e042      	b.n	80084b2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800842c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da0b      	bge.n	800844c <USBD_StdEPReq+0x2b4>
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	3310      	adds	r3, #16
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	4413      	add	r3, r2
 8008448:	3304      	adds	r3, #4
 800844a:	e00b      	b.n	8008464 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	4413      	add	r3, r2
 8008462:	3304      	adds	r3, #4
 8008464:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <USBD_StdEPReq+0x2da>
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	2b80      	cmp	r3, #128	@ 0x80
 8008470:	d103      	bne.n	800847a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2200      	movs	r2, #0
 8008476:	739a      	strb	r2, [r3, #14]
 8008478:	e00e      	b.n	8008498 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 f8ac 	bl	80095dc <USBD_LL_IsStallEP>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2201      	movs	r2, #1
 800848e:	739a      	strb	r2, [r3, #14]
 8008490:	e002      	b.n	8008498 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	330e      	adds	r3, #14
 800849c:	2202      	movs	r2, #2
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fbdd 	bl	8008c60 <USBD_CtlSendData>
              break;
 80084a6:	e004      	b.n	80084b2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fb5b 	bl	8008b66 <USBD_CtlError>
              break;
 80084b0:	bf00      	nop
          }
          break;
 80084b2:	e004      	b.n	80084be <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fb55 	bl	8008b66 <USBD_CtlError>
          break;
 80084bc:	bf00      	nop
      }
      break;
 80084be:	e005      	b.n	80084cc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb4f 	bl	8008b66 <USBD_CtlError>
      break;
 80084c8:	e000      	b.n	80084cc <USBD_StdEPReq+0x334>
      break;
 80084ca:	bf00      	nop
  }

  return ret;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	2b06      	cmp	r3, #6
 80084fa:	f200 8128 	bhi.w	800874e <USBD_GetDescriptor+0x276>
 80084fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <USBD_GetDescriptor+0x2c>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008521 	.word	0x08008521
 8008508:	08008539 	.word	0x08008539
 800850c:	08008579 	.word	0x08008579
 8008510:	0800874f 	.word	0x0800874f
 8008514:	0800874f 	.word	0x0800874f
 8008518:	080086ef 	.word	0x080086ef
 800851c:	0800871b 	.word	0x0800871b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	7c12      	ldrb	r2, [r2, #16]
 800852c:	f107 0108 	add.w	r1, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
      break;
 8008536:	e112      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7c1b      	ldrb	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	f107 0208 	add.w	r2, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	2202      	movs	r2, #2
 8008558:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800855a:	e100      	b.n	800875e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008564:	f107 0208 	add.w	r2, r7, #8
 8008568:	4610      	mov	r0, r2
 800856a:	4798      	blx	r3
 800856c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3301      	adds	r3, #1
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
      break;
 8008576:	e0f2      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	885b      	ldrh	r3, [r3, #2]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b05      	cmp	r3, #5
 8008580:	f200 80ac 	bhi.w	80086dc <USBD_GetDescriptor+0x204>
 8008584:	a201      	add	r2, pc, #4	@ (adr r2, 800858c <USBD_GetDescriptor+0xb4>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	080085a5 	.word	0x080085a5
 8008590:	080085d9 	.word	0x080085d9
 8008594:	0800860d 	.word	0x0800860d
 8008598:	08008641 	.word	0x08008641
 800859c:	08008675 	.word	0x08008675
 80085a0:	080086a9 	.word	0x080086a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	7c12      	ldrb	r2, [r2, #16]
 80085bc:	f107 0108 	add.w	r1, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c6:	e091      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 facb 	bl	8008b66 <USBD_CtlError>
            err++;
 80085d0:	7afb      	ldrb	r3, [r7, #11]
 80085d2:	3301      	adds	r3, #1
 80085d4:	72fb      	strb	r3, [r7, #11]
          break;
 80085d6:	e089      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	7c12      	ldrb	r2, [r2, #16]
 80085f0:	f107 0108 	add.w	r1, r7, #8
 80085f4:	4610      	mov	r0, r2
 80085f6:	4798      	blx	r3
 80085f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fa:	e077      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fab1 	bl	8008b66 <USBD_CtlError>
            err++;
 8008604:	7afb      	ldrb	r3, [r7, #11]
 8008606:	3301      	adds	r3, #1
 8008608:	72fb      	strb	r3, [r7, #11]
          break;
 800860a:	e06f      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	7c12      	ldrb	r2, [r2, #16]
 8008624:	f107 0108 	add.w	r1, r7, #8
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
 800862c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862e:	e05d      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa97 	bl	8008b66 <USBD_CtlError>
            err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
          break;
 800863e:	e055      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7c12      	ldrb	r2, [r2, #16]
 8008658:	f107 0108 	add.w	r1, r7, #8
 800865c:	4610      	mov	r0, r2
 800865e:	4798      	blx	r3
 8008660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008662:	e043      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa7d 	bl	8008b66 <USBD_CtlError>
            err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
          break;
 8008672:	e03b      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	7c12      	ldrb	r2, [r2, #16]
 800868c:	f107 0108 	add.w	r1, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008696:	e029      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa63 	bl	8008b66 <USBD_CtlError>
            err++;
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	3301      	adds	r3, #1
 80086a4:	72fb      	strb	r3, [r7, #11]
          break;
 80086a6:	e021      	b.n	80086ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	7c12      	ldrb	r2, [r2, #16]
 80086c0:	f107 0108 	add.w	r1, r7, #8
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ca:	e00f      	b.n	80086ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa49 	bl	8008b66 <USBD_CtlError>
            err++;
 80086d4:	7afb      	ldrb	r3, [r7, #11]
 80086d6:	3301      	adds	r3, #1
 80086d8:	72fb      	strb	r3, [r7, #11]
          break;
 80086da:	e007      	b.n	80086ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa41 	bl	8008b66 <USBD_CtlError>
          err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086ea:	bf00      	nop
      }
      break;
 80086ec:	e037      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	7c1b      	ldrb	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fe:	f107 0208 	add.w	r2, r7, #8
 8008702:	4610      	mov	r0, r2
 8008704:	4798      	blx	r3
 8008706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008708:	e029      	b.n	800875e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fa2a 	bl	8008b66 <USBD_CtlError>
        err++;
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	3301      	adds	r3, #1
 8008716:	72fb      	strb	r3, [r7, #11]
      break;
 8008718:	e021      	b.n	800875e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	7c1b      	ldrb	r3, [r3, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10d      	bne.n	800873e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872a:	f107 0208 	add.w	r2, r7, #8
 800872e:	4610      	mov	r0, r2
 8008730:	4798      	blx	r3
 8008732:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3301      	adds	r3, #1
 8008738:	2207      	movs	r2, #7
 800873a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800873c:	e00f      	b.n	800875e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fa10 	bl	8008b66 <USBD_CtlError>
        err++;
 8008746:	7afb      	ldrb	r3, [r7, #11]
 8008748:	3301      	adds	r3, #1
 800874a:	72fb      	strb	r3, [r7, #11]
      break;
 800874c:	e007      	b.n	800875e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa08 	bl	8008b66 <USBD_CtlError>
      err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	bf00      	nop
  }

  if (err != 0U)
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d11e      	bne.n	80087a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	88db      	ldrh	r3, [r3, #6]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d016      	beq.n	800879a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800876c:	893b      	ldrh	r3, [r7, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00e      	beq.n	8008790 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88da      	ldrh	r2, [r3, #6]
 8008776:	893b      	ldrh	r3, [r7, #8]
 8008778:	4293      	cmp	r3, r2
 800877a:	bf28      	it	cs
 800877c:	4613      	movcs	r3, r2
 800877e:	b29b      	uxth	r3, r3
 8008780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008782:	893b      	ldrh	r3, [r7, #8]
 8008784:	461a      	mov	r2, r3
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fa69 	bl	8008c60 <USBD_CtlSendData>
 800878e:	e009      	b.n	80087a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9e7 	bl	8008b66 <USBD_CtlError>
 8008798:	e004      	b.n	80087a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fac1 	bl	8008d22 <USBD_CtlSendStatus>
 80087a0:	e000      	b.n	80087a4 <USBD_GetDescriptor+0x2cc>
    return;
 80087a2:	bf00      	nop
  }
}
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop

080087ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	889b      	ldrh	r3, [r3, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d131      	bne.n	8008822 <USBD_SetAddress+0x76>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88db      	ldrh	r3, [r3, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d12d      	bne.n	8008822 <USBD_SetAddress+0x76>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80087cc:	d829      	bhi.n	8008822 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d104      	bne.n	80087f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f9bc 	bl	8008b66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ee:	e01d      	b.n	800882c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7bfa      	ldrb	r2, [r7, #15]
 80087f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 ff19 	bl	8009634 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa8d 	bl	8008d22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2202      	movs	r2, #2
 8008812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008816:	e009      	b.n	800882c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008820:	e004      	b.n	800882c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f99e 	bl	8008b66 <USBD_CtlError>
  }
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	885b      	ldrh	r3, [r3, #2]
 8008846:	b2da      	uxtb	r2, r3
 8008848:	4b4e      	ldr	r3, [pc, #312]	@ (8008984 <USBD_SetConfig+0x150>)
 800884a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800884c:	4b4d      	ldr	r3, [pc, #308]	@ (8008984 <USBD_SetConfig+0x150>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d905      	bls.n	8008860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f985 	bl	8008b66 <USBD_CtlError>
    return USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	e08c      	b.n	800897a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d002      	beq.n	8008872 <USBD_SetConfig+0x3e>
 800886c:	2b03      	cmp	r3, #3
 800886e:	d029      	beq.n	80088c4 <USBD_SetConfig+0x90>
 8008870:	e075      	b.n	800895e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008872:	4b44      	ldr	r3, [pc, #272]	@ (8008984 <USBD_SetConfig+0x150>)
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d020      	beq.n	80088bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800887a:	4b42      	ldr	r3, [pc, #264]	@ (8008984 <USBD_SetConfig+0x150>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008884:	4b3f      	ldr	r3, [pc, #252]	@ (8008984 <USBD_SetConfig+0x150>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7fe ffcd 	bl	800782a <USBD_SetClassConfig>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d008      	beq.n	80088ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f962 	bl	8008b66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088aa:	e065      	b.n	8008978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fa38 	bl	8008d22 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2203      	movs	r2, #3
 80088b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80088ba:	e05d      	b.n	8008978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa30 	bl	8008d22 <USBD_CtlSendStatus>
      break;
 80088c2:	e059      	b.n	8008978 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008984 <USBD_SetConfig+0x150>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d112      	bne.n	80088f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80088d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008984 <USBD_SetConfig+0x150>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088de:	4b29      	ldr	r3, [pc, #164]	@ (8008984 <USBD_SetConfig+0x150>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	4619      	mov	r1, r3
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7fe ffbc 	bl	8007862 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa19 	bl	8008d22 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088f0:	e042      	b.n	8008978 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088f2:	4b24      	ldr	r3, [pc, #144]	@ (8008984 <USBD_SetConfig+0x150>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d02a      	beq.n	8008956 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	b2db      	uxtb	r3, r3
 8008906:	4619      	mov	r1, r3
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fe ffaa 	bl	8007862 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800890e:	4b1d      	ldr	r3, [pc, #116]	@ (8008984 <USBD_SetConfig+0x150>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008918:	4b1a      	ldr	r3, [pc, #104]	@ (8008984 <USBD_SetConfig+0x150>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fe ff83 	bl	800782a <USBD_SetClassConfig>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00f      	beq.n	800894e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f918 	bl	8008b66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7fe ff8f 	bl	8007862 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800894c:	e014      	b.n	8008978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f9e7 	bl	8008d22 <USBD_CtlSendStatus>
      break;
 8008954:	e010      	b.n	8008978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9e3 	bl	8008d22 <USBD_CtlSendStatus>
      break;
 800895c:	e00c      	b.n	8008978 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f900 	bl	8008b66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008966:	4b07      	ldr	r3, [pc, #28]	@ (8008984 <USBD_SetConfig+0x150>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fe ff78 	bl	8007862 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008972:	2303      	movs	r3, #3
 8008974:	73fb      	strb	r3, [r7, #15]
      break;
 8008976:	bf00      	nop
  }

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000708 	.word	0x20000708

08008988 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	88db      	ldrh	r3, [r3, #6]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d004      	beq.n	80089a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f8e2 	bl	8008b66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089a2:	e023      	b.n	80089ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	dc02      	bgt.n	80089b6 <USBD_GetConfig+0x2e>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	dc03      	bgt.n	80089bc <USBD_GetConfig+0x34>
 80089b4:	e015      	b.n	80089e2 <USBD_GetConfig+0x5a>
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d00b      	beq.n	80089d2 <USBD_GetConfig+0x4a>
 80089ba:	e012      	b.n	80089e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3308      	adds	r3, #8
 80089c6:	2201      	movs	r2, #1
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f948 	bl	8008c60 <USBD_CtlSendData>
        break;
 80089d0:	e00c      	b.n	80089ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3304      	adds	r3, #4
 80089d6:	2201      	movs	r2, #1
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f940 	bl	8008c60 <USBD_CtlSendData>
        break;
 80089e0:	e004      	b.n	80089ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f8be 	bl	8008b66 <USBD_CtlError>
        break;
 80089ea:	bf00      	nop
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	3b01      	subs	r3, #1
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d81e      	bhi.n	8008a4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	88db      	ldrh	r3, [r3, #6]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d004      	beq.n	8008a1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f8a5 	bl	8008b66 <USBD_CtlError>
        break;
 8008a1c:	e01a      	b.n	8008a54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f043 0202 	orr.w	r2, r3, #2
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	2202      	movs	r2, #2
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f90c 	bl	8008c60 <USBD_CtlSendData>
      break;
 8008a48:	e004      	b.n	8008a54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f88a 	bl	8008b66 <USBD_CtlError>
      break;
 8008a52:	bf00      	nop
  }
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	885b      	ldrh	r3, [r3, #2]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d107      	bne.n	8008a7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f953 	bl	8008d22 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a7c:	e013      	b.n	8008aa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	885b      	ldrh	r3, [r3, #2]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d10b      	bne.n	8008a9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	889b      	ldrh	r3, [r3, #4]
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f943 	bl	8008d22 <USBD_CtlSendStatus>
}
 8008a9c:	e003      	b.n	8008aa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f860 	bl	8008b66 <USBD_CtlError>
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d80b      	bhi.n	8008ade <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	885b      	ldrh	r3, [r3, #2]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d10c      	bne.n	8008ae8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f923 	bl	8008d22 <USBD_CtlSendStatus>
      }
      break;
 8008adc:	e004      	b.n	8008ae8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f840 	bl	8008b66 <USBD_CtlError>
      break;
 8008ae6:	e000      	b.n	8008aea <USBD_ClrFeature+0x3c>
      break;
 8008ae8:	bf00      	nop
  }
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	781a      	ldrb	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff fa3d 	bl	8007f9c <SWAPBYTE>
 8008b22:	4603      	mov	r3, r0
 8008b24:	461a      	mov	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3301      	adds	r3, #1
 8008b34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff fa30 	bl	8007f9c <SWAPBYTE>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff fa23 	bl	8007f9c <SWAPBYTE>
 8008b56:	4603      	mov	r3, r0
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	80da      	strh	r2, [r3, #6]
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b70:	2180      	movs	r1, #128	@ 0x80
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fcf4 	bl	8009560 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b78:	2100      	movs	r1, #0
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fcf0 	bl	8009560 <USBD_LL_StallEP>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d042      	beq.n	8008c24 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008ba2:	6938      	ldr	r0, [r7, #16]
 8008ba4:	f000 f842 	bl	8008c2c <USBD_GetLen>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	3301      	adds	r3, #1
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb2:	d808      	bhi.n	8008bc6 <USBD_GetString+0x3e>
 8008bb4:	6938      	ldr	r0, [r7, #16]
 8008bb6:	f000 f839 	bl	8008c2c <USBD_GetLen>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	e001      	b.n	8008bca <USBD_GetString+0x42>
 8008bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	7812      	ldrb	r2, [r2, #0]
 8008bd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	4413      	add	r3, r2
 8008be6:	2203      	movs	r2, #3
 8008be8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	3301      	adds	r3, #1
 8008bee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bf0:	e013      	b.n	8008c1a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	7812      	ldrb	r2, [r2, #0]
 8008bfc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	3301      	adds	r3, #1
 8008c02:	613b      	str	r3, [r7, #16]
    idx++;
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	3301      	adds	r3, #1
 8008c08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c0a:	7dfb      	ldrb	r3, [r7, #23]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	4413      	add	r3, r2
 8008c10:	2200      	movs	r2, #0
 8008c12:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	3301      	adds	r3, #1
 8008c18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e7      	bne.n	8008bf2 <USBD_GetString+0x6a>
 8008c22:	e000      	b.n	8008c26 <USBD_GetString+0x9e>
    return;
 8008c24:	bf00      	nop
  }
}
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c3c:	e005      	b.n	8008c4a <USBD_GetLen+0x1e>
  {
    len++;
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	3301      	adds	r3, #1
 8008c42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1f5      	bne.n	8008c3e <USBD_GetLen+0x12>
  }

  return len;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fcf0 	bl	8009672 <USBD_LL_Transmit>

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	2100      	movs	r1, #0
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fcdf 	bl	8009672 <USBD_LL_Transmit>

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2203      	movs	r2, #3
 8008cce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	2100      	movs	r1, #0
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fcdf 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	2100      	movs	r1, #0
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fcce 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2204      	movs	r2, #4
 8008d2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d32:	2300      	movs	r3, #0
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fc9a 	bl	8009672 <USBD_LL_Transmit>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2205      	movs	r2, #5
 8008d54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d58:	2300      	movs	r3, #0
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fca8 	bl	80096b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4912      	ldr	r1, [pc, #72]	@ (8008dc0 <MX_USB_DEVICE_Init+0x50>)
 8008d78:	4812      	ldr	r0, [pc, #72]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d7a:	f7fe fcd9 	bl	8007730 <USBD_Init>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d84:	f7f8 fd6c 	bl	8001860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d88:	490f      	ldr	r1, [pc, #60]	@ (8008dc8 <MX_USB_DEVICE_Init+0x58>)
 8008d8a:	480e      	ldr	r0, [pc, #56]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d8c:	f7fe fd00 	bl	8007790 <USBD_RegisterClass>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d96:	f7f8 fd63 	bl	8001860 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d9a:	490c      	ldr	r1, [pc, #48]	@ (8008dcc <MX_USB_DEVICE_Init+0x5c>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008d9e:	f7fe fbf7 	bl	8007590 <USBD_CDC_RegisterInterface>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008da8:	f7f8 fd5a 	bl	8001860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008dac:	4805      	ldr	r0, [pc, #20]	@ (8008dc4 <MX_USB_DEVICE_Init+0x54>)
 8008dae:	f7fe fd25 	bl	80077fc <USBD_Start>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008db8:	f7f8 fd52 	bl	8001860 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dbc:	bf00      	nop
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200000ac 	.word	0x200000ac
 8008dc4:	2000070c 	.word	0x2000070c
 8008dc8:	20000018 	.word	0x20000018
 8008dcc:	20000098 	.word	0x20000098

08008dd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4905      	ldr	r1, [pc, #20]	@ (8008dec <CDC_Init_FS+0x1c>)
 8008dd8:	4805      	ldr	r0, [pc, #20]	@ (8008df0 <CDC_Init_FS+0x20>)
 8008dda:	f7fe fbf3 	bl	80075c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dde:	4905      	ldr	r1, [pc, #20]	@ (8008df4 <CDC_Init_FS+0x24>)
 8008de0:	4803      	ldr	r0, [pc, #12]	@ (8008df0 <CDC_Init_FS+0x20>)
 8008de2:	f7fe fc11 	bl	8007608 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008de6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	200011e8 	.word	0x200011e8
 8008df0:	2000070c 	.word	0x2000070c
 8008df4:	200009e8 	.word	0x200009e8

08008df8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dfc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6039      	str	r1, [r7, #0]
 8008e12:	71fb      	strb	r3, [r7, #7]
 8008e14:	4613      	mov	r3, r2
 8008e16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	2b23      	cmp	r3, #35	@ 0x23
 8008e1c:	d84a      	bhi.n	8008eb4 <CDC_Control_FS+0xac>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <CDC_Control_FS+0x1c>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008eb5 	.word	0x08008eb5
 8008e28:	08008eb5 	.word	0x08008eb5
 8008e2c:	08008eb5 	.word	0x08008eb5
 8008e30:	08008eb5 	.word	0x08008eb5
 8008e34:	08008eb5 	.word	0x08008eb5
 8008e38:	08008eb5 	.word	0x08008eb5
 8008e3c:	08008eb5 	.word	0x08008eb5
 8008e40:	08008eb5 	.word	0x08008eb5
 8008e44:	08008eb5 	.word	0x08008eb5
 8008e48:	08008eb5 	.word	0x08008eb5
 8008e4c:	08008eb5 	.word	0x08008eb5
 8008e50:	08008eb5 	.word	0x08008eb5
 8008e54:	08008eb5 	.word	0x08008eb5
 8008e58:	08008eb5 	.word	0x08008eb5
 8008e5c:	08008eb5 	.word	0x08008eb5
 8008e60:	08008eb5 	.word	0x08008eb5
 8008e64:	08008eb5 	.word	0x08008eb5
 8008e68:	08008eb5 	.word	0x08008eb5
 8008e6c:	08008eb5 	.word	0x08008eb5
 8008e70:	08008eb5 	.word	0x08008eb5
 8008e74:	08008eb5 	.word	0x08008eb5
 8008e78:	08008eb5 	.word	0x08008eb5
 8008e7c:	08008eb5 	.word	0x08008eb5
 8008e80:	08008eb5 	.word	0x08008eb5
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008eb5 	.word	0x08008eb5
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008eb5 	.word	0x08008eb5
 8008e98:	08008eb5 	.word	0x08008eb5
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008eb5 	.word	0x08008eb5
 8008ea4:	08008eb5 	.word	0x08008eb5
 8008ea8:	08008eb5 	.word	0x08008eb5
 8008eac:	08008eb5 	.word	0x08008eb5
 8008eb0:	08008eb5 	.word	0x08008eb5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008eb4:	bf00      	nop
  }

  return (USBD_OK);
 8008eb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4805      	ldr	r0, [pc, #20]	@ (8008ee8 <CDC_Receive_FS+0x24>)
 8008ed2:	f7fe fb99 	bl	8007608 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ed6:	4804      	ldr	r0, [pc, #16]	@ (8008ee8 <CDC_Receive_FS+0x24>)
 8008ed8:	f7fe fbf4 	bl	80076c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008edc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	2000070c 	.word	0x2000070c

08008eec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008efc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <CDC_Transmit_FS+0x48>)
 8008efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e00b      	b.n	8008f2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f12:	887b      	ldrh	r3, [r7, #2]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6879      	ldr	r1, [r7, #4]
 8008f18:	4806      	ldr	r0, [pc, #24]	@ (8008f34 <CDC_Transmit_FS+0x48>)
 8008f1a:	f7fe fb53 	bl	80075c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f1e:	4805      	ldr	r0, [pc, #20]	@ (8008f34 <CDC_Transmit_FS+0x48>)
 8008f20:	f7fe fb90 	bl	8007644 <USBD_CDC_TransmitPacket>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	2000070c 	.word	0x2000070c

08008f38 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	371c      	adds	r7, #28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2212      	movs	r2, #18
 8008f6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f6e:	4b03      	ldr	r3, [pc, #12]	@ (8008f7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	200000c8 	.word	0x200000c8

08008f80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	6039      	str	r1, [r7, #0]
 8008f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2204      	movs	r2, #4
 8008f90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f92:	4b03      	ldr	r3, [pc, #12]	@ (8008fa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	200000dc 	.word	0x200000dc

08008fa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fb0:	79fb      	ldrb	r3, [r7, #7]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d105      	bne.n	8008fc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4907      	ldr	r1, [pc, #28]	@ (8008fd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fba:	4808      	ldr	r0, [pc, #32]	@ (8008fdc <USBD_FS_ProductStrDescriptor+0x38>)
 8008fbc:	f7ff fde4 	bl	8008b88 <USBD_GetString>
 8008fc0:	e004      	b.n	8008fcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	4904      	ldr	r1, [pc, #16]	@ (8008fd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fc6:	4805      	ldr	r0, [pc, #20]	@ (8008fdc <USBD_FS_ProductStrDescriptor+0x38>)
 8008fc8:	f7ff fdde 	bl	8008b88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	@ (8008fd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	200019e8 	.word	0x200019e8
 8008fdc:	0800ab1c 	.word	0x0800ab1c

08008fe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fec:	683a      	ldr	r2, [r7, #0]
 8008fee:	4904      	ldr	r1, [pc, #16]	@ (8009000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ff0:	4804      	ldr	r0, [pc, #16]	@ (8009004 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ff2:	f7ff fdc9 	bl	8008b88 <USBD_GetString>
  return USBD_StrDesc;
 8008ff6:	4b02      	ldr	r3, [pc, #8]	@ (8009000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	200019e8 	.word	0x200019e8
 8009004:	0800ab34 	.word	0x0800ab34

08009008 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	6039      	str	r1, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	221a      	movs	r2, #26
 8009018:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800901a:	f000 f843 	bl	80090a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800901e:	4b02      	ldr	r3, [pc, #8]	@ (8009028 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	200000e0 	.word	0x200000e0

0800902c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	4907      	ldr	r1, [pc, #28]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009042:	4808      	ldr	r0, [pc, #32]	@ (8009064 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009044:	f7ff fda0 	bl	8008b88 <USBD_GetString>
 8009048:	e004      	b.n	8009054 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4904      	ldr	r1, [pc, #16]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x34>)
 800904e:	4805      	ldr	r0, [pc, #20]	@ (8009064 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009050:	f7ff fd9a 	bl	8008b88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009054:	4b02      	ldr	r3, [pc, #8]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200019e8 	.word	0x200019e8
 8009064:	0800ab48 	.word	0x0800ab48

08009068 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d105      	bne.n	8009086 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4907      	ldr	r1, [pc, #28]	@ (800909c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800907e:	4808      	ldr	r0, [pc, #32]	@ (80090a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009080:	f7ff fd82 	bl	8008b88 <USBD_GetString>
 8009084:	e004      	b.n	8009090 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	4904      	ldr	r1, [pc, #16]	@ (800909c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800908a:	4805      	ldr	r0, [pc, #20]	@ (80090a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800908c:	f7ff fd7c 	bl	8008b88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009090:	4b02      	ldr	r3, [pc, #8]	@ (800909c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200019e8 	.word	0x200019e8
 80090a0:	0800ab54 	.word	0x0800ab54

080090a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090aa:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <Get_SerialNum+0x44>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090b0:	4b0e      	ldr	r3, [pc, #56]	@ (80090ec <Get_SerialNum+0x48>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090b6:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <Get_SerialNum+0x4c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4413      	add	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090ca:	2208      	movs	r2, #8
 80090cc:	4909      	ldr	r1, [pc, #36]	@ (80090f4 <Get_SerialNum+0x50>)
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f814 	bl	80090fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090d4:	2204      	movs	r2, #4
 80090d6:	4908      	ldr	r1, [pc, #32]	@ (80090f8 <Get_SerialNum+0x54>)
 80090d8:	68b8      	ldr	r0, [r7, #8]
 80090da:	f000 f80f 	bl	80090fc <IntToUnicode>
  }
}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	1fff7a10 	.word	0x1fff7a10
 80090ec:	1fff7a14 	.word	0x1fff7a14
 80090f0:	1fff7a18 	.word	0x1fff7a18
 80090f4:	200000e2 	.word	0x200000e2
 80090f8:	200000f2 	.word	0x200000f2

080090fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4613      	mov	r3, r2
 8009108:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800910e:	2300      	movs	r3, #0
 8009110:	75fb      	strb	r3, [r7, #23]
 8009112:	e027      	b.n	8009164 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	0f1b      	lsrs	r3, r3, #28
 8009118:	2b09      	cmp	r3, #9
 800911a:	d80b      	bhi.n	8009134 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	0f1b      	lsrs	r3, r3, #28
 8009120:	b2da      	uxtb	r2, r3
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4619      	mov	r1, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	440b      	add	r3, r1
 800912c:	3230      	adds	r2, #48	@ 0x30
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]
 8009132:	e00a      	b.n	800914a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	0f1b      	lsrs	r3, r3, #28
 8009138:	b2da      	uxtb	r2, r3
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	4619      	mov	r1, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	440b      	add	r3, r1
 8009144:	3237      	adds	r2, #55	@ 0x37
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	3301      	adds	r3, #1
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	4413      	add	r3, r2
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	3301      	adds	r3, #1
 8009162:	75fb      	strb	r3, [r7, #23]
 8009164:	7dfa      	ldrb	r2, [r7, #23]
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	429a      	cmp	r2, r3
 800916a:	d3d3      	bcc.n	8009114 <IntToUnicode+0x18>
  }
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b08a      	sub	sp, #40	@ 0x28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009184:	f107 0314 	add.w	r3, r7, #20
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	605a      	str	r2, [r3, #4]
 800918e:	609a      	str	r2, [r3, #8]
 8009190:	60da      	str	r2, [r3, #12]
 8009192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800919c:	d13a      	bne.n	8009214 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800919e:	2300      	movs	r3, #0
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	4b1e      	ldr	r3, [pc, #120]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a6:	4a1d      	ldr	r2, [pc, #116]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80091ae:	4b1b      	ldr	r3, [pc, #108]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80091be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091c0:	2302      	movs	r3, #2
 80091c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091c8:	2303      	movs	r3, #3
 80091ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091cc:	230a      	movs	r3, #10
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091d0:	f107 0314 	add.w	r3, r7, #20
 80091d4:	4619      	mov	r1, r3
 80091d6:	4812      	ldr	r0, [pc, #72]	@ (8009220 <HAL_PCD_MspInit+0xa4>)
 80091d8:	f7f9 f9c4 	bl	8002564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091dc:	4b0f      	ldr	r3, [pc, #60]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e0:	4a0e      	ldr	r2, [pc, #56]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091e6:	6353      	str	r3, [r2, #52]	@ 0x34
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	4b0b      	ldr	r3, [pc, #44]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f0:	4a0a      	ldr	r2, [pc, #40]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80091f8:	4b08      	ldr	r3, [pc, #32]	@ (800921c <HAL_PCD_MspInit+0xa0>)
 80091fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009204:	2200      	movs	r2, #0
 8009206:	2100      	movs	r1, #0
 8009208:	2043      	movs	r0, #67	@ 0x43
 800920a:	f7f9 f974 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800920e:	2043      	movs	r0, #67	@ 0x43
 8009210:	f7f9 f98d 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009214:	bf00      	nop
 8009216:	3728      	adds	r7, #40	@ 0x28
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40023800 	.word	0x40023800
 8009220:	40020000 	.word	0x40020000

08009224 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fe fb2b 	bl	8007896 <USBD_LL_SetupStage>
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	4619      	mov	r1, r3
 8009272:	f7fe fb65 	bl	8007940 <USBD_LL_DataOutStage>
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	4613      	mov	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	3320      	adds	r3, #32
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	4619      	mov	r1, r3
 80092a6:	f7fe fc07 	bl	8007ab8 <USBD_LL_DataInStage>
}
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fd4b 	bl	8007d5c <USBD_LL_SOF>
}
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092d6:	2301      	movs	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	79db      	ldrb	r3, [r3, #7]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
 80092e6:	e008      	b.n	80092fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	79db      	ldrb	r3, [r3, #7]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d102      	bne.n	80092f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e001      	b.n	80092fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80092f6:	f7f8 fab3 	bl	8001860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009300:	7bfa      	ldrb	r2, [r7, #15]
 8009302:	4611      	mov	r1, r2
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fce5 	bl	8007cd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe fc8c 	bl	8007c2e <USBD_LL_Reset>
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fce0 	bl	8007cf4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009346:	f043 0301 	orr.w	r3, r3, #1
 800934a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	7adb      	ldrb	r3, [r3, #11]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009354:	4b04      	ldr	r3, [pc, #16]	@ (8009368 <HAL_PCD_SuspendCallback+0x48>)
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	4a03      	ldr	r2, [pc, #12]	@ (8009368 <HAL_PCD_SuspendCallback+0x48>)
 800935a:	f043 0306 	orr.w	r3, r3, #6
 800935e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	e000ed00 	.word	0xe000ed00

0800936c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800937a:	4618      	mov	r0, r3
 800937c:	f7fe fcd6 	bl	8007d2c <USBD_LL_Resume>
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fd2e 	bl	8007e00 <USBD_LL_IsoOUTIncomplete>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fcea 	bl	8007d9c <USBD_LL_IsoINIncomplete>
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fd40 	bl	8007e64 <USBD_LL_DevConnected>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe fd3d 	bl	8007e7a <USBD_LL_DevDisconnected>
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d13c      	bne.n	8009492 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009418:	4a20      	ldr	r2, [pc, #128]	@ (800949c <USBD_LL_Init+0x94>)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a1e      	ldr	r2, [pc, #120]	@ (800949c <USBD_LL_Init+0x94>)
 8009424:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009428:	4b1c      	ldr	r3, [pc, #112]	@ (800949c <USBD_LL_Init+0x94>)
 800942a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800942e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009430:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <USBD_LL_Init+0x94>)
 8009432:	2204      	movs	r2, #4
 8009434:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009436:	4b19      	ldr	r3, [pc, #100]	@ (800949c <USBD_LL_Init+0x94>)
 8009438:	2202      	movs	r2, #2
 800943a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800943c:	4b17      	ldr	r3, [pc, #92]	@ (800949c <USBD_LL_Init+0x94>)
 800943e:	2200      	movs	r2, #0
 8009440:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009442:	4b16      	ldr	r3, [pc, #88]	@ (800949c <USBD_LL_Init+0x94>)
 8009444:	2202      	movs	r2, #2
 8009446:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009448:	4b14      	ldr	r3, [pc, #80]	@ (800949c <USBD_LL_Init+0x94>)
 800944a:	2200      	movs	r2, #0
 800944c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800944e:	4b13      	ldr	r3, [pc, #76]	@ (800949c <USBD_LL_Init+0x94>)
 8009450:	2200      	movs	r2, #0
 8009452:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009454:	4b11      	ldr	r3, [pc, #68]	@ (800949c <USBD_LL_Init+0x94>)
 8009456:	2200      	movs	r2, #0
 8009458:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800945a:	4b10      	ldr	r3, [pc, #64]	@ (800949c <USBD_LL_Init+0x94>)
 800945c:	2200      	movs	r2, #0
 800945e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009460:	4b0e      	ldr	r3, [pc, #56]	@ (800949c <USBD_LL_Init+0x94>)
 8009462:	2200      	movs	r2, #0
 8009464:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009466:	480d      	ldr	r0, [pc, #52]	@ (800949c <USBD_LL_Init+0x94>)
 8009468:	f7fa fa6e 	bl	8003948 <HAL_PCD_Init>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009472:	f7f8 f9f5 	bl	8001860 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009476:	2180      	movs	r1, #128	@ 0x80
 8009478:	4808      	ldr	r0, [pc, #32]	@ (800949c <USBD_LL_Init+0x94>)
 800947a:	f7fb fc9a 	bl	8004db2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800947e:	2240      	movs	r2, #64	@ 0x40
 8009480:	2100      	movs	r1, #0
 8009482:	4806      	ldr	r0, [pc, #24]	@ (800949c <USBD_LL_Init+0x94>)
 8009484:	f7fb fc4e 	bl	8004d24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009488:	2280      	movs	r2, #128	@ 0x80
 800948a:	2101      	movs	r1, #1
 800948c:	4803      	ldr	r0, [pc, #12]	@ (800949c <USBD_LL_Init+0x94>)
 800948e:	f7fb fc49 	bl	8004d24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20001be8 	.word	0x20001be8

080094a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fa fb55 	bl	8003b66 <HAL_PCD_Start>
 80094bc:	4603      	mov	r3, r0
 80094be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 f942 	bl	800974c <USBD_Get_USB_Status>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	461a      	mov	r2, r3
 80094e4:	4603      	mov	r3, r0
 80094e6:	70fb      	strb	r3, [r7, #3]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70bb      	strb	r3, [r7, #2]
 80094ec:	4613      	mov	r3, r2
 80094ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094fe:	78bb      	ldrb	r3, [r7, #2]
 8009500:	883a      	ldrh	r2, [r7, #0]
 8009502:	78f9      	ldrb	r1, [r7, #3]
 8009504:	f7fb f829 	bl	800455a <HAL_PCD_EP_Open>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f91c 	bl	800974c <USBD_Get_USB_Status>
 8009514:	4603      	mov	r3, r0
 8009516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009518:	7bbb      	ldrb	r3, [r7, #14]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800953c:	78fa      	ldrb	r2, [r7, #3]
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f7fb f874 	bl	800462e <HAL_PCD_EP_Close>
 8009546:	4603      	mov	r3, r0
 8009548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f8fd 	bl	800974c <USBD_Get_USB_Status>
 8009552:	4603      	mov	r3, r0
 8009554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009556:	7bbb      	ldrb	r3, [r7, #14]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800957a:	78fa      	ldrb	r2, [r7, #3]
 800957c:	4611      	mov	r1, r2
 800957e:	4618      	mov	r0, r3
 8009580:	f7fb f92c 	bl	80047dc <HAL_PCD_EP_SetStall>
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f8de 	bl	800974c <USBD_Get_USB_Status>
 8009590:	4603      	mov	r3, r0
 8009592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009594:	7bbb      	ldrb	r3, [r7, #14]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	460b      	mov	r3, r1
 80095a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095b8:	78fa      	ldrb	r2, [r7, #3]
 80095ba:	4611      	mov	r1, r2
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fb f970 	bl	80048a2 <HAL_PCD_EP_ClrStall>
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 f8bf 	bl	800974c <USBD_Get_USB_Status>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	da0b      	bge.n	8009610 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095f8:	78fb      	ldrb	r3, [r7, #3]
 80095fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095fe:	68f9      	ldr	r1, [r7, #12]
 8009600:	4613      	mov	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	440b      	add	r3, r1
 800960a:	3316      	adds	r3, #22
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	e00b      	b.n	8009628 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	4613      	mov	r3, r2
 800961a:	00db      	lsls	r3, r3, #3
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009626:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7fa ff5d 	bl	8004512 <HAL_PCD_SetAddress>
 8009658:	4603      	mov	r3, r0
 800965a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965c:	7bfb      	ldrb	r3, [r7, #15]
 800965e:	4618      	mov	r0, r3
 8009660:	f000 f874 	bl	800974c <USBD_Get_USB_Status>
 8009664:	4603      	mov	r3, r0
 8009666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009668:	7bbb      	ldrb	r3, [r7, #14]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b086      	sub	sp, #24
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
 800967e:	460b      	mov	r3, r1
 8009680:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009690:	7af9      	ldrb	r1, [r7, #11]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	f7fb f867 	bl	8004768 <HAL_PCD_EP_Transmit>
 800969a:	4603      	mov	r3, r0
 800969c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f853 	bl	800974c <USBD_Get_USB_Status>
 80096a6:	4603      	mov	r3, r0
 80096a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	607a      	str	r2, [r7, #4]
 80096be:	603b      	str	r3, [r7, #0]
 80096c0:	460b      	mov	r3, r1
 80096c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80096d2:	7af9      	ldrb	r1, [r7, #11]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	f7fa fff3 	bl	80046c2 <HAL_PCD_EP_Receive>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f832 	bl	800974c <USBD_Get_USB_Status>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009708:	78fa      	ldrb	r2, [r7, #3]
 800970a:	4611      	mov	r1, r2
 800970c:	4618      	mov	r0, r3
 800970e:	f7fb f813 	bl	8004738 <HAL_PCD_EP_GetRxCount>
 8009712:	4603      	mov	r3, r0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009724:	4b03      	ldr	r3, [pc, #12]	@ (8009734 <USBD_static_malloc+0x18>)
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	200020cc 	.word	0x200020cc

08009738 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]

}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	2b03      	cmp	r3, #3
 800975e:	d817      	bhi.n	8009790 <USBD_Get_USB_Status+0x44>
 8009760:	a201      	add	r2, pc, #4	@ (adr r2, 8009768 <USBD_Get_USB_Status+0x1c>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	08009779 	.word	0x08009779
 800976c:	0800977f 	.word	0x0800977f
 8009770:	08009785 	.word	0x08009785
 8009774:	0800978b 	.word	0x0800978b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
    break;
 800977c:	e00b      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800977e:	2303      	movs	r3, #3
 8009780:	73fb      	strb	r3, [r7, #15]
    break;
 8009782:	e008      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009784:	2301      	movs	r3, #1
 8009786:	73fb      	strb	r3, [r7, #15]
    break;
 8009788:	e005      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800978a:	2303      	movs	r3, #3
 800978c:	73fb      	strb	r3, [r7, #15]
    break;
 800978e:	e002      	b.n	8009796 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	bf00      	nop
  }
  return usb_status;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3714      	adds	r7, #20
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <funchad34.constprop.0>:
 80097a4:	b500      	push	{lr}
 80097a6:	4b07      	ldr	r3, [pc, #28]	@ (80097c4 <funchad34.constprop.0+0x20>)
 80097a8:	4907      	ldr	r1, [pc, #28]	@ (80097c8 <funchad34.constprop.0+0x24>)
 80097aa:	f8d0 e000 	ldr.w	lr, [r0]
 80097ae:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80097b2:	6882      	ldr	r2, [r0, #8]
 80097b4:	f8c3 e000 	str.w	lr, [r3]
 80097b8:	f8c3 c004 	str.w	ip, [r3, #4]
 80097bc:	600a      	str	r2, [r1, #0]
 80097be:	609a      	str	r2, [r3, #8]
 80097c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80097c4:	200022f0 	.word	0x200022f0
 80097c8:	200022ec 	.word	0x200022ec
 80097cc:	00000000 	.word	0x00000000

080097d0 <neai_anomalydetection_learn>:
 80097d0:	4be3      	ldr	r3, [pc, #908]	@ (8009b60 <neai_anomalydetection_learn+0x390>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d003      	beq.n	80097e0 <neai_anomalydetection_learn+0x10>
 80097d8:	4be2      	ldr	r3, [pc, #904]	@ (8009b64 <neai_anomalydetection_learn+0x394>)
 80097da:	207b      	movs	r0, #123	@ 0x7b
 80097dc:	7018      	strb	r0, [r3, #0]
 80097de:	4770      	bx	lr
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	ed2d 8b02 	vpush	{d8}
 80097e8:	f7ff ffdc 	bl	80097a4 <funchad34.constprop.0>
 80097ec:	4bde      	ldr	r3, [pc, #888]	@ (8009b68 <neai_anomalydetection_learn+0x398>)
 80097ee:	681e      	ldr	r6, [r3, #0]
 80097f0:	f106 0801 	add.w	r8, r6, #1
 80097f4:	f1b8 0f02 	cmp.w	r8, #2
 80097f8:	f8c3 8000 	str.w	r8, [r3]
 80097fc:	f200 8096 	bhi.w	800992c <neai_anomalydetection_learn+0x15c>
 8009800:	4fda      	ldr	r7, [pc, #872]	@ (8009b6c <neai_anomalydetection_learn+0x39c>)
 8009802:	4ddb      	ldr	r5, [pc, #876]	@ (8009b70 <neai_anomalydetection_learn+0x3a0>)
 8009804:	4cdb      	ldr	r4, [pc, #876]	@ (8009b74 <neai_anomalydetection_learn+0x3a4>)
 8009806:	ed95 5a00 	vldr	s10, [r5]
 800980a:	ed94 7a00 	vldr	s14, [r4]
 800980e:	edd7 7a00 	vldr	s15, [r7]
 8009812:	edd5 4a01 	vldr	s9, [r5, #4]
 8009816:	4bd3      	ldr	r3, [pc, #844]	@ (8009b64 <neai_anomalydetection_learn+0x394>)
 8009818:	3602      	adds	r6, #2
 800981a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800981e:	ee65 5a05 	vmul.f32	s11, s10, s10
 8009822:	ee07 6a10 	vmov	s14, r6
 8009826:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800982a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800982e:	ee77 6ac5 	vsub.f32	s13, s15, s10
 8009832:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009836:	ee86 6a87 	vdiv.f32	s12, s13, s14
 800983a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800983e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8009842:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009846:	ee26 5a06 	vmul.f32	s10, s12, s12
 800984a:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800984e:	edd4 6a01 	vldr	s13, [r4, #4]
 8009852:	ed85 6a00 	vstr	s12, [r5]
 8009856:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800985a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800985e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009866:	bfa8      	it	ge
 8009868:	eeb1 4ae7 	vsqrtge.f32	s8, s15
 800986c:	ee24 5aa4 	vmul.f32	s10, s9, s9
 8009870:	edd7 7a01 	vldr	s15, [r7, #4]
 8009874:	bfb8      	it	lt
 8009876:	ed9f 4ac0 	vldrlt	s8, [pc, #768]	@ 8009b78 <neai_anomalydetection_learn+0x3a8>
 800987a:	ee77 3ae4 	vsub.f32	s7, s15, s9
 800987e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8009882:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009886:	eec3 5a87 	vdiv.f32	s11, s7, s14
 800988a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800988e:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8009892:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009896:	ee25 6aa5 	vmul.f32	s12, s11, s11
 800989a:	ee76 7a85 	vadd.f32	s15, s13, s10
 800989e:	ed95 5a02 	vldr	s10, [r5, #8]
 80098a2:	edd7 6a02 	vldr	s13, [r7, #8]
 80098a6:	ed84 4a00 	vstr	s8, [r4]
 80098aa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80098ae:	ee25 6a05 	vmul.f32	s12, s10, s10
 80098b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80098b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ba:	bfa8      	it	ge
 80098bc:	eef1 4ae7 	vsqrtge.f32	s9, s15
 80098c0:	edd4 7a02 	vldr	s15, [r4, #8]
 80098c4:	edc5 5a01 	vstr	s11, [r5, #4]
 80098c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098cc:	ee36 4ac5 	vsub.f32	s8, s13, s10
 80098d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80098d4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80098d8:	ee84 6a07 	vdiv.f32	s12, s8, s14
 80098dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80098e0:	bfb8      	it	lt
 80098e2:	eddf 4aa5 	vldrlt	s9, [pc, #660]	@ 8009b78 <neai_anomalydetection_learn+0x3a8>
 80098e6:	eec6 5a87 	vdiv.f32	s11, s13, s14
 80098ea:	ee36 7a05 	vadd.f32	s14, s12, s10
 80098ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80098f2:	ee67 6a07 	vmul.f32	s13, s14, s14
 80098f6:	edc4 4a01 	vstr	s9, [r4, #4]
 80098fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80098fe:	ed85 7a02 	vstr	s14, [r5, #8]
 8009902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990a:	bfac      	ite	ge
 800990c:	eef1 6ae7 	vsqrtge.f32	s13, s15
 8009910:	eddf 6a99 	vldrlt	s13, [pc, #612]	@ 8009b78 <neai_anomalydetection_learn+0x3a8>
 8009914:	f1b8 0f09 	cmp.w	r8, #9
 8009918:	bf8c      	ite	hi
 800991a:	207f      	movhi	r0, #127	@ 0x7f
 800991c:	207e      	movls	r0, #126	@ 0x7e
 800991e:	7018      	strb	r0, [r3, #0]
 8009920:	ecbd 8b02 	vpop	{d8}
 8009924:	edc4 6a02 	vstr	s13, [r4, #8]
 8009928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992c:	4c91      	ldr	r4, [pc, #580]	@ (8009b74 <neai_anomalydetection_learn+0x3a4>)
 800992e:	4f8f      	ldr	r7, [pc, #572]	@ (8009b6c <neai_anomalydetection_learn+0x39c>)
 8009930:	edd4 6a00 	vldr	s13, [r4]
 8009934:	4d8e      	ldr	r5, [pc, #568]	@ (8009b70 <neai_anomalydetection_learn+0x3a0>)
 8009936:	ed97 7a00 	vldr	s14, [r7]
 800993a:	edd5 7a00 	vldr	s15, [r5]
 800993e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009946:	d034      	beq.n	80099b2 <neai_anomalydetection_learn+0x1e2>
 8009948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800994c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009954:	f100 80e2 	bmi.w	8009b1c <neai_anomalydetection_learn+0x34c>
 8009958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800995c:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8009b78 <neai_anomalydetection_learn+0x3a8>
 8009960:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009968:	f300 80e1 	bgt.w	8009b2e <neai_anomalydetection_learn+0x35e>
 800996c:	edd4 5a01 	vldr	s11, [r4, #4]
 8009970:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009978:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800997c:	f040 80c7 	bne.w	8009b0e <neai_anomalydetection_learn+0x33e>
 8009980:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009b7c <neai_anomalydetection_learn+0x3ac>
 8009984:	edd4 5a02 	vldr	s11, [r4, #8]
 8009988:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800998c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009990:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009994:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a0:	f000 80c2 	beq.w	8009b28 <neai_anomalydetection_learn+0x358>
 80099a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80099a8:	ed95 5a02 	vldr	s10, [r5, #8]
 80099ac:	eef0 7a66 	vmov.f32	s15, s13
 80099b0:	e021      	b.n	80099f6 <neai_anomalydetection_learn+0x226>
 80099b2:	edd4 5a01 	vldr	s11, [r4, #4]
 80099b6:	eef5 5a40 	vcmp.f32	s11, #0.0
 80099ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099be:	f040 808b 	bne.w	8009ad8 <neai_anomalydetection_learn+0x308>
 80099c2:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8009b7c <neai_anomalydetection_learn+0x3ac>
 80099c6:	eef0 6a47 	vmov.f32	s13, s14
 80099ca:	eef0 7a47 	vmov.f32	s15, s14
 80099ce:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80099d2:	edd4 5a02 	vldr	s11, [r4, #8]
 80099d6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80099da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80099de:	eef5 5a40 	vcmp.f32	s11, #0.0
 80099e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80099ea:	f000 809a 	beq.w	8009b22 <neai_anomalydetection_learn+0x352>
 80099ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80099f2:	ed95 5a02 	vldr	s10, [r5, #8]
 80099f6:	ee36 6a45 	vsub.f32	s12, s12, s10
 80099fa:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80099fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a02:	bf48      	it	mi
 8009a04:	eeb1 6a46 	vnegmi.f32	s12, s12
 8009a08:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8009a0c:	eef4 6a67 	vcmp.f32	s13, s15
 8009a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a14:	bfc8      	it	gt
 8009a16:	eef0 7a66 	vmovgt.f32	s15, s13
 8009a1a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009a1e:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 8009a22:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8009a26:	4856      	ldr	r0, [pc, #344]	@ (8009b80 <neai_anomalydetection_learn+0x3b0>)
 8009a28:	4956      	ldr	r1, [pc, #344]	@ (8009b84 <neai_anomalydetection_learn+0x3b4>)
 8009a2a:	6803      	ldr	r3, [r0, #0]
 8009a2c:	4a56      	ldr	r2, [pc, #344]	@ (8009b88 <neai_anomalydetection_learn+0x3b8>)
 8009a2e:	3301      	adds	r3, #1
 8009a30:	6003      	str	r3, [r0, #0]
 8009a32:	edd1 5a00 	vldr	s11, [r1]
 8009a36:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009a3a:	ee06 3a90 	vmov	s13, r3
 8009a3e:	ed92 6a00 	vldr	s12, [r2]
 8009a42:	eeb8 5a66 	vcvt.f32.u32	s10, s13
 8009a46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009a4a:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009a4e:	ee87 8a85 	vdiv.f32	s16, s15, s10
 8009a52:	eec7 6a05 	vdiv.f32	s13, s14, s10
 8009a56:	ee38 8a06 	vadd.f32	s16, s16, s12
 8009a5a:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8009a5e:	ed82 8a00 	vstr	s16, [r2]
 8009a62:	edc1 7a00 	vstr	s15, [r1]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f43f aecd 	beq.w	8009806 <neai_anomalydetection_learn+0x36>
 8009a6c:	4b47      	ldr	r3, [pc, #284]	@ (8009b8c <neai_anomalydetection_learn+0x3bc>)
 8009a6e:	edd3 8a00 	vldr	s17, [r3]
 8009a72:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009a76:	ee17 0a90 	vmov	r0, s15
 8009a7a:	f7f6 fd65 	bl	8000548 <__aeabi_f2d>
 8009a7e:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8009b50 <neai_anomalydetection_learn+0x380>
 8009a82:	ec41 0b10 	vmov	d0, r0, r1
 8009a86:	f000 ff29 	bl	800a8dc <fmax>
 8009a8a:	ec51 0b10 	vmov	r0, r1, d0
 8009a8e:	f7f7 f84d 	bl	8000b2c <__aeabi_d2f>
 8009a92:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8009a96:	ee00 0a10 	vmov	s0, r0
 8009a9a:	f000 ff6d 	bl	800a978 <fminf>
 8009a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8009b90 <neai_anomalydetection_learn+0x3c0>)
 8009aa0:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009aa4:	ed83 0a00 	vstr	s0, [r3]
 8009aa8:	ee17 0a90 	vmov	r0, s15
 8009aac:	f7f6 fd4c 	bl	8000548 <__aeabi_f2d>
 8009ab0:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8009b58 <neai_anomalydetection_learn+0x388>
 8009ab4:	ec41 0b10 	vmov	d0, r0, r1
 8009ab8:	f000 ff10 	bl	800a8dc <fmax>
 8009abc:	ec51 0b10 	vmov	r0, r1, d0
 8009ac0:	f7f7 f834 	bl	8000b2c <__aeabi_d2f>
 8009ac4:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8009b7c <neai_anomalydetection_learn+0x3ac>
 8009ac8:	ee00 0a10 	vmov	s0, r0
 8009acc:	f000 ff54 	bl	800a978 <fminf>
 8009ad0:	4b30      	ldr	r3, [pc, #192]	@ (8009b94 <neai_anomalydetection_learn+0x3c4>)
 8009ad2:	ed83 0a00 	vstr	s0, [r3]
 8009ad6:	e696      	b.n	8009806 <neai_anomalydetection_learn+0x36>
 8009ad8:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8009b7c <neai_anomalydetection_learn+0x3ac>
 8009adc:	ed97 6a01 	vldr	s12, [r7, #4]
 8009ae0:	ed95 5a01 	vldr	s10, [r5, #4]
 8009ae4:	eeb0 7a67 	vmov.f32	s14, s15
 8009ae8:	ee36 6a45 	vsub.f32	s12, s12, s10
 8009aec:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8009af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af4:	d501      	bpl.n	8009afa <neai_anomalydetection_learn+0x32a>
 8009af6:	eeb1 6a46 	vneg.f32	s12, s12
 8009afa:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8009afe:	eef4 6a67 	vcmp.f32	s13, s15
 8009b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b06:	bfc8      	it	gt
 8009b08:	eef0 7a66 	vmovgt.f32	s15, s13
 8009b0c:	e75f      	b.n	80099ce <neai_anomalydetection_learn+0x1fe>
 8009b0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009b12:	ed95 5a01 	vldr	s10, [r5, #4]
 8009b16:	eef0 7a66 	vmov.f32	s15, s13
 8009b1a:	e7e5      	b.n	8009ae8 <neai_anomalydetection_learn+0x318>
 8009b1c:	eeb1 7a47 	vneg.f32	s14, s14
 8009b20:	e71a      	b.n	8009958 <neai_anomalydetection_learn+0x188>
 8009b22:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8009b7c <neai_anomalydetection_learn+0x3ac>
 8009b26:	e771      	b.n	8009a0c <neai_anomalydetection_learn+0x23c>
 8009b28:	eef0 7a66 	vmov.f32	s15, s13
 8009b2c:	e775      	b.n	8009a1a <neai_anomalydetection_learn+0x24a>
 8009b2e:	edd4 5a01 	vldr	s11, [r4, #4]
 8009b32:	ed97 6a01 	vldr	s12, [r7, #4]
 8009b36:	ed95 5a01 	vldr	s10, [r5, #4]
 8009b3a:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b42:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009b46:	d1cf      	bne.n	8009ae8 <neai_anomalydetection_learn+0x318>
 8009b48:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8009b7c <neai_anomalydetection_learn+0x3ac>
 8009b4c:	e7d7      	b.n	8009afe <neai_anomalydetection_learn+0x32e>
 8009b4e:	bf00      	nop
 8009b50:	00000000 	.word	0x00000000
 8009b54:	3ff00000 	.word	0x3ff00000
 8009b58:	00000000 	.word	0x00000000
 8009b5c:	40080000 	.word	0x40080000
 8009b60:	20000158 	.word	0x20000158
 8009b64:	20000150 	.word	0x20000150
 8009b68:	20000154 	.word	0x20000154
 8009b6c:	200022f0 	.word	0x200022f0
 8009b70:	2000017c 	.word	0x2000017c
 8009b74:	20000188 	.word	0x20000188
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	42c80000 	.word	0x42c80000
 8009b80:	2000015c 	.word	0x2000015c
 8009b84:	20000164 	.word	0x20000164
 8009b88:	20000160 	.word	0x20000160
 8009b8c:	20000170 	.word	0x20000170
 8009b90:	20000178 	.word	0x20000178
 8009b94:	20000174 	.word	0x20000174

08009b98 <neai_anomalydetection_detect>:
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	ed2d 8b06 	vpush	{d8-d10}
 8009b9e:	4aac      	ldr	r2, [pc, #688]	@ (8009e50 <neai_anomalydetection_detect+0x2b8>)
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	7813      	ldrb	r3, [r2, #0]
 8009ba4:	21ff      	movs	r1, #255	@ 0xff
 8009ba6:	7021      	strb	r1, [r4, #0]
 8009ba8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8009bac:	2901      	cmp	r1, #1
 8009bae:	d95b      	bls.n	8009c68 <neai_anomalydetection_detect+0xd0>
 8009bb0:	2b80      	cmp	r3, #128	@ 0x80
 8009bb2:	d059      	beq.n	8009c68 <neai_anomalydetection_detect+0xd0>
 8009bb4:	4ba7      	ldr	r3, [pc, #668]	@ (8009e54 <neai_anomalydetection_detect+0x2bc>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d953      	bls.n	8009c64 <neai_anomalydetection_detect+0xcc>
 8009bbc:	f7ff fdf2 	bl	80097a4 <funchad34.constprop.0>
 8009bc0:	4ba5      	ldr	r3, [pc, #660]	@ (8009e58 <neai_anomalydetection_detect+0x2c0>)
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	f7f6 fcc0 	bl	8000548 <__aeabi_f2d>
 8009bc8:	a39d      	add	r3, pc, #628	@ (adr r3, 8009e40 <neai_anomalydetection_detect+0x2a8>)
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	f7f6 ffab 	bl	8000b2c <__aeabi_d2f>
 8009bd6:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 8009e5c <neai_anomalydetection_detect+0x2c4>
 8009bda:	ee08 0a10 	vmov	s16, r0
 8009bde:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be6:	da43      	bge.n	8009c70 <neai_anomalydetection_detect+0xd8>
 8009be8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf0:	4b9b      	ldr	r3, [pc, #620]	@ (8009e60 <neai_anomalydetection_detect+0x2c8>)
 8009bf2:	dd74      	ble.n	8009cde <neai_anomalydetection_detect+0x146>
 8009bf4:	eddf 9a9b 	vldr	s19, [pc, #620]	@ 8009e64 <neai_anomalydetection_detect+0x2cc>
 8009bf8:	edc3 7a00 	vstr	s15, [r3]
 8009bfc:	eeb0 8a67 	vmov.f32	s16, s15
 8009c00:	4b99      	ldr	r3, [pc, #612]	@ (8009e68 <neai_anomalydetection_detect+0x2d0>)
 8009c02:	499a      	ldr	r1, [pc, #616]	@ (8009e6c <neai_anomalydetection_detect+0x2d4>)
 8009c04:	edd3 6a00 	vldr	s13, [r3]
 8009c08:	4a99      	ldr	r2, [pc, #612]	@ (8009e70 <neai_anomalydetection_detect+0x2d8>)
 8009c0a:	edd1 7a00 	vldr	s15, [r1]
 8009c0e:	ed92 7a00 	vldr	s14, [r2]
 8009c12:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1a:	d038      	beq.n	8009c8e <neai_anomalydetection_detect+0xf6>
 8009c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	d501      	bpl.n	8009c2e <neai_anomalydetection_detect+0x96>
 8009c2a:	eef1 7a67 	vneg.f32	s15, s15
 8009c2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009c32:	eddf 7a90 	vldr	s15, [pc, #576]	@ 8009e74 <neai_anomalydetection_detect+0x2dc>
 8009c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3e:	f300 80ec 	bgt.w	8009e1a <neai_anomalydetection_detect+0x282>
 8009c42:	edd3 5a01 	vldr	s11, [r3, #4]
 8009c46:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c4e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8009c52:	f000 80dc 	beq.w	8009e0e <neai_anomalydetection_detect+0x276>
 8009c56:	ed91 6a01 	vldr	s12, [r1, #4]
 8009c5a:	ed92 5a01 	vldr	s10, [r2, #4]
 8009c5e:	eeb0 7a67 	vmov.f32	s14, s15
 8009c62:	e023      	b.n	8009cac <neai_anomalydetection_detect+0x114>
 8009c64:	237e      	movs	r3, #126	@ 0x7e
 8009c66:	7013      	strb	r3, [r2, #0]
 8009c68:	ecbd 8b06 	vpop	{d8-d10}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	bd10      	pop	{r4, pc}
 8009c70:	eddf 7a81 	vldr	s15, [pc, #516]	@ 8009e78 <neai_anomalydetection_detect+0x2e0>
 8009c74:	4b7a      	ldr	r3, [pc, #488]	@ (8009e60 <neai_anomalydetection_detect+0x2c8>)
 8009c76:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	d928      	bls.n	8009cd2 <neai_anomalydetection_detect+0x13a>
 8009c80:	eddf 9a7e 	vldr	s19, [pc, #504]	@ 8009e7c <neai_anomalydetection_detect+0x2e4>
 8009c84:	edc3 7a00 	vstr	s15, [r3]
 8009c88:	eeb0 8a67 	vmov.f32	s16, s15
 8009c8c:	e7b8      	b.n	8009c00 <neai_anomalydetection_detect+0x68>
 8009c8e:	edd3 5a01 	vldr	s11, [r3, #4]
 8009c92:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9a:	d027      	beq.n	8009cec <neai_anomalydetection_detect+0x154>
 8009c9c:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8009e78 <neai_anomalydetection_detect+0x2e0>
 8009ca0:	ed91 6a01 	vldr	s12, [r1, #4]
 8009ca4:	ed92 5a01 	vldr	s10, [r2, #4]
 8009ca8:	eef0 6a47 	vmov.f32	s13, s14
 8009cac:	ee36 6a45 	vsub.f32	s12, s12, s10
 8009cb0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8009cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb8:	d501      	bpl.n	8009cbe <neai_anomalydetection_detect+0x126>
 8009cba:	eeb1 6a46 	vneg.f32	s12, s12
 8009cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cca:	d515      	bpl.n	8009cf8 <neai_anomalydetection_detect+0x160>
 8009ccc:	eeb0 7a67 	vmov.f32	s14, s15
 8009cd0:	e012      	b.n	8009cf8 <neai_anomalydetection_detect+0x160>
 8009cd2:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 8009cd6:	ee68 9a29 	vmul.f32	s19, s16, s19
 8009cda:	6018      	str	r0, [r3, #0]
 8009cdc:	e790      	b.n	8009c00 <neai_anomalydetection_detect+0x68>
 8009cde:	ed93 8a00 	vldr	s16, [r3]
 8009ce2:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 8009ce6:	ee68 9a29 	vmul.f32	s19, s16, s19
 8009cea:	e789      	b.n	8009c00 <neai_anomalydetection_detect+0x68>
 8009cec:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8009e78 <neai_anomalydetection_detect+0x2e0>
 8009cf0:	eef0 7a66 	vmov.f32	s15, s13
 8009cf4:	eeb0 7a66 	vmov.f32	s14, s13
 8009cf8:	ee77 8ae6 	vsub.f32	s17, s15, s13
 8009cfc:	ed93 6a02 	vldr	s12, [r3, #8]
 8009d00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009d04:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009d08:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d10:	ee78 8aa6 	vadd.f32	s17, s17, s13
 8009d14:	edd1 7a02 	vldr	s15, [r1, #8]
 8009d18:	edd2 6a02 	vldr	s13, [r2, #8]
 8009d1c:	d07a      	beq.n	8009e14 <neai_anomalydetection_detect+0x27c>
 8009d1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d2a:	bf48      	it	mi
 8009d2c:	eef1 7a67 	vnegmi.f32	s15, s15
 8009d30:	ee87 9a86 	vdiv.f32	s18, s15, s12
 8009d34:	4b52      	ldr	r3, [pc, #328]	@ (8009e80 <neai_anomalydetection_detect+0x2e8>)
 8009d36:	eeb4 9a47 	vcmp.f32	s18, s14
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	bfc8      	it	gt
 8009d40:	eeb0 7a49 	vmovgt.f32	s14, s18
 8009d44:	edd3 6a00 	vldr	s13, [r3]
 8009d48:	4b4e      	ldr	r3, [pc, #312]	@ (8009e84 <neai_anomalydetection_detect+0x2ec>)
 8009d4a:	ee27 7a08 	vmul.f32	s14, s14, s16
 8009d4e:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 8009d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d56:	ed93 7a00 	vldr	s14, [r3]
 8009d5a:	ee77 7aca 	vsub.f32	s15, s15, s20
 8009d5e:	ee39 9a68 	vsub.f32	s18, s18, s17
 8009d62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d6a:	ee17 0a90 	vmov	r0, s15
 8009d6e:	f7f6 fbeb 	bl	8000548 <__aeabi_f2d>
 8009d72:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8009e48 <neai_anomalydetection_detect+0x2b0>
 8009d76:	ec41 0b10 	vmov	d0, r0, r1
 8009d7a:	f000 fdaf 	bl	800a8dc <fmax>
 8009d7e:	ec51 0b10 	vmov	r0, r1, d0
 8009d82:	f7f6 fed3 	bl	8000b2c <__aeabi_d2f>
 8009d86:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8009d8a:	ee00 0a10 	vmov	s0, r0
 8009d8e:	f000 fdf3 	bl	800a978 <fminf>
 8009d92:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009d96:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8009d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009e88 <neai_anomalydetection_detect+0x2f0>)
 8009d9c:	ed93 6a00 	vldr	s12, [r3]
 8009da0:	4b3a      	ldr	r3, [pc, #232]	@ (8009e8c <neai_anomalydetection_detect+0x2f4>)
 8009da2:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009da6:	edd3 6a00 	vldr	s13, [r3]
 8009daa:	ee27 7a08 	vmul.f32	s14, s14, s16
 8009dae:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8009db2:	ee77 7aca 	vsub.f32	s15, s15, s20
 8009db6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009dba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009dbe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009dc2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009dc6:	ee17 0a90 	vmov	r0, s15
 8009dca:	f7f6 fbbd 	bl	8000548 <__aeabi_f2d>
 8009dce:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8009e48 <neai_anomalydetection_detect+0x2b0>
 8009dd2:	ec41 0b10 	vmov	d0, r0, r1
 8009dd6:	f000 fd81 	bl	800a8dc <fmax>
 8009dda:	ec51 0b10 	vmov	r0, r1, d0
 8009dde:	f7f6 fea5 	bl	8000b2c <__aeabi_d2f>
 8009de2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009de6:	ee00 0a10 	vmov	s0, r0
 8009dea:	f000 fdc5 	bl	800a978 <fminf>
 8009dee:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8009df2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009df6:	2300      	movs	r3, #0
 8009df8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009e02:	ee17 2a90 	vmov	r2, s15
 8009e06:	7022      	strb	r2, [r4, #0]
 8009e08:	ecbd 8b06 	vpop	{d8-d10}
 8009e0c:	bd10      	pop	{r4, pc}
 8009e0e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009e78 <neai_anomalydetection_detect+0x2e0>
 8009e12:	e75b      	b.n	8009ccc <neai_anomalydetection_detect+0x134>
 8009e14:	ed9f 9a18 	vldr	s18, [pc, #96]	@ 8009e78 <neai_anomalydetection_detect+0x2e0>
 8009e18:	e78c      	b.n	8009d34 <neai_anomalydetection_detect+0x19c>
 8009e1a:	edd3 5a01 	vldr	s11, [r3, #4]
 8009e1e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e26:	ee77 6a27 	vadd.f32	s13, s14, s15
 8009e2a:	d004      	beq.n	8009e36 <neai_anomalydetection_detect+0x29e>
 8009e2c:	ed91 6a01 	vldr	s12, [r1, #4]
 8009e30:	ed92 5a01 	vldr	s10, [r2, #4]
 8009e34:	e73a      	b.n	8009cac <neai_anomalydetection_detect+0x114>
 8009e36:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009e78 <neai_anomalydetection_detect+0x2e0>
 8009e3a:	e742      	b.n	8009cc2 <neai_anomalydetection_detect+0x12a>
 8009e3c:	f3af 8000 	nop.w
 8009e40:	28f5c28f 	.word	0x28f5c28f
 8009e44:	40088f5c 	.word	0x40088f5c
	...
 8009e50:	20000150 	.word	0x20000150
 8009e54:	20000154 	.word	0x20000154
 8009e58:	200000fc 	.word	0x200000fc
 8009e5c:	3c23d70a 	.word	0x3c23d70a
 8009e60:	200022fc 	.word	0x200022fc
 8009e64:	3c75c28f 	.word	0x3c75c28f
 8009e68:	20000188 	.word	0x20000188
 8009e6c:	200022f0 	.word	0x200022f0
 8009e70:	2000017c 	.word	0x2000017c
 8009e74:	00000000 	.word	0x00000000
 8009e78:	42c80000 	.word	0x42c80000
 8009e7c:	43160000 	.word	0x43160000
 8009e80:	20000174 	.word	0x20000174
 8009e84:	20000168 	.word	0x20000168
 8009e88:	20000178 	.word	0x20000178
 8009e8c:	2000016c 	.word	0x2000016c

08009e90 <_fminf>:
 8009e90:	f000 bd72 	b.w	800a978 <fminf>

08009e94 <neai_anomalydetection_init>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4820      	ldr	r0, [pc, #128]	@ (8009f18 <neai_anomalydetection_init+0x84>)
 8009e98:	4920      	ldr	r1, [pc, #128]	@ (8009f1c <neai_anomalydetection_init+0x88>)
 8009e9a:	4a21      	ldr	r2, [pc, #132]	@ (8009f20 <neai_anomalydetection_init+0x8c>)
 8009e9c:	4c21      	ldr	r4, [pc, #132]	@ (8009f24 <neai_anomalydetection_init+0x90>)
 8009e9e:	4d22      	ldr	r5, [pc, #136]	@ (8009f28 <neai_anomalydetection_init+0x94>)
 8009ea0:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8009f2c <neai_anomalydetection_init+0x98>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	ed2d 8b02 	vpush	{d8}
 8009eaa:	6003      	str	r3, [r0, #0]
 8009eac:	4820      	ldr	r0, [pc, #128]	@ (8009f30 <neai_anomalydetection_init+0x9c>)
 8009eae:	600b      	str	r3, [r1, #0]
 8009eb0:	604b      	str	r3, [r1, #4]
 8009eb2:	608b      	str	r3, [r1, #8]
 8009eb4:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8009eb8:	491e      	ldr	r1, [pc, #120]	@ (8009f34 <neai_anomalydetection_init+0xa0>)
 8009eba:	f8c0 c000 	str.w	ip, [r0]
 8009ebe:	481e      	ldr	r0, [pc, #120]	@ (8009f38 <neai_anomalydetection_init+0xa4>)
 8009ec0:	6008      	str	r0, [r1, #0]
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	6053      	str	r3, [r2, #4]
 8009ec6:	6093      	str	r3, [r2, #8]
 8009ec8:	481c      	ldr	r0, [pc, #112]	@ (8009f3c <neai_anomalydetection_init+0xa8>)
 8009eca:	491d      	ldr	r1, [pc, #116]	@ (8009f40 <neai_anomalydetection_init+0xac>)
 8009ecc:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8009f44 <neai_anomalydetection_init+0xb0>
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	4c1c      	ldr	r4, [pc, #112]	@ (8009f48 <neai_anomalydetection_init+0xb4>)
 8009ed8:	6004      	str	r4, [r0, #0]
 8009eda:	481c      	ldr	r0, [pc, #112]	@ (8009f4c <neai_anomalydetection_init+0xb8>)
 8009edc:	4c1c      	ldr	r4, [pc, #112]	@ (8009f50 <neai_anomalydetection_init+0xbc>)
 8009ede:	6008      	str	r0, [r1, #0]
 8009ee0:	491c      	ldr	r1, [pc, #112]	@ (8009f54 <neai_anomalydetection_init+0xc0>)
 8009ee2:	481d      	ldr	r0, [pc, #116]	@ (8009f58 <neai_anomalydetection_init+0xc4>)
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8009f5c <neai_anomalydetection_init+0xc8>)
 8009ee8:	4c1d      	ldr	r4, [pc, #116]	@ (8009f60 <neai_anomalydetection_init+0xcc>)
 8009eea:	6008      	str	r0, [r1, #0]
 8009eec:	eeb0 0a48 	vmov.f32	s0, s16
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	7019      	strb	r1, [r3, #0]
 8009ef4:	7022      	strb	r2, [r4, #0]
 8009ef6:	f7ff ffcb 	bl	8009e90 <_fminf>
 8009efa:	eeb4 0a48 	vcmp.f32	s0, s16
 8009efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f02:	bf1c      	itt	ne
 8009f04:	2081      	movne	r0, #129	@ 0x81
 8009f06:	7020      	strbne	r0, [r4, #0]
 8009f08:	ecbd 8b02 	vpop	{d8}
 8009f0c:	4b15      	ldr	r3, [pc, #84]	@ (8009f64 <neai_anomalydetection_init+0xd0>)
 8009f0e:	bf08      	it	eq
 8009f10:	7820      	ldrbeq	r0, [r4, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20000164 	.word	0x20000164
 8009f1c:	2000017c 	.word	0x2000017c
 8009f20:	20000188 	.word	0x20000188
 8009f24:	2000015c 	.word	0x2000015c
 8009f28:	20000160 	.word	0x20000160
 8009f2c:	40066666 	.word	0x40066666
 8009f30:	20000178 	.word	0x20000178
 8009f34:	20000174 	.word	0x20000174
 8009f38:	40400000 	.word	0x40400000
 8009f3c:	20000170 	.word	0x20000170
 8009f40:	200022fc 	.word	0x200022fc
 8009f44:	3f8ccccd 	.word	0x3f8ccccd
 8009f48:	3f9eb852 	.word	0x3f9eb852
 8009f4c:	40447ae1 	.word	0x40447ae1
 8009f50:	2000016c 	.word	0x2000016c
 8009f54:	20000168 	.word	0x20000168
 8009f58:	3f547ae1 	.word	0x3f547ae1
 8009f5c:	20000158 	.word	0x20000158
 8009f60:	20000150 	.word	0x20000150
 8009f64:	20000154 	.word	0x20000154

08009f68 <_vsniprintf_r>:
 8009f68:	b530      	push	{r4, r5, lr}
 8009f6a:	4614      	mov	r4, r2
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	b09b      	sub	sp, #108	@ 0x6c
 8009f70:	4605      	mov	r5, r0
 8009f72:	461a      	mov	r2, r3
 8009f74:	da05      	bge.n	8009f82 <_vsniprintf_r+0x1a>
 8009f76:	238b      	movs	r3, #139	@ 0x8b
 8009f78:	6003      	str	r3, [r0, #0]
 8009f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7e:	b01b      	add	sp, #108	@ 0x6c
 8009f80:	bd30      	pop	{r4, r5, pc}
 8009f82:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009f86:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009f90:	bf14      	ite	ne
 8009f92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f96:	4623      	moveq	r3, r4
 8009f98:	9302      	str	r3, [sp, #8]
 8009f9a:	9305      	str	r3, [sp, #20]
 8009f9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fa0:	9100      	str	r1, [sp, #0]
 8009fa2:	9104      	str	r1, [sp, #16]
 8009fa4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009fa8:	4669      	mov	r1, sp
 8009faa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009fac:	f000 f9a0 	bl	800a2f0 <_svfiprintf_r>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	bfbc      	itt	lt
 8009fb4:	238b      	movlt	r3, #139	@ 0x8b
 8009fb6:	602b      	strlt	r3, [r5, #0]
 8009fb8:	2c00      	cmp	r4, #0
 8009fba:	d0e0      	beq.n	8009f7e <_vsniprintf_r+0x16>
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	e7dc      	b.n	8009f7e <_vsniprintf_r+0x16>

08009fc4 <vsniprintf>:
 8009fc4:	b507      	push	{r0, r1, r2, lr}
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	460a      	mov	r2, r1
 8009fcc:	4601      	mov	r1, r0
 8009fce:	4803      	ldr	r0, [pc, #12]	@ (8009fdc <vsniprintf+0x18>)
 8009fd0:	6800      	ldr	r0, [r0, #0]
 8009fd2:	f7ff ffc9 	bl	8009f68 <_vsniprintf_r>
 8009fd6:	b003      	add	sp, #12
 8009fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fdc:	20000100 	.word	0x20000100

08009fe0 <memset>:
 8009fe0:	4402      	add	r2, r0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d100      	bne.n	8009fea <memset+0xa>
 8009fe8:	4770      	bx	lr
 8009fea:	f803 1b01 	strb.w	r1, [r3], #1
 8009fee:	e7f9      	b.n	8009fe4 <memset+0x4>

08009ff0 <__errno>:
 8009ff0:	4b01      	ldr	r3, [pc, #4]	@ (8009ff8 <__errno+0x8>)
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000100 	.word	0x20000100

08009ffc <__libc_init_array>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	4d0d      	ldr	r5, [pc, #52]	@ (800a034 <__libc_init_array+0x38>)
 800a000:	4c0d      	ldr	r4, [pc, #52]	@ (800a038 <__libc_init_array+0x3c>)
 800a002:	1b64      	subs	r4, r4, r5
 800a004:	10a4      	asrs	r4, r4, #2
 800a006:	2600      	movs	r6, #0
 800a008:	42a6      	cmp	r6, r4
 800a00a:	d109      	bne.n	800a020 <__libc_init_array+0x24>
 800a00c:	4d0b      	ldr	r5, [pc, #44]	@ (800a03c <__libc_init_array+0x40>)
 800a00e:	4c0c      	ldr	r4, [pc, #48]	@ (800a040 <__libc_init_array+0x44>)
 800a010:	f000 fcec 	bl	800a9ec <_init>
 800a014:	1b64      	subs	r4, r4, r5
 800a016:	10a4      	asrs	r4, r4, #2
 800a018:	2600      	movs	r6, #0
 800a01a:	42a6      	cmp	r6, r4
 800a01c:	d105      	bne.n	800a02a <__libc_init_array+0x2e>
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	f855 3b04 	ldr.w	r3, [r5], #4
 800a024:	4798      	blx	r3
 800a026:	3601      	adds	r6, #1
 800a028:	e7ee      	b.n	800a008 <__libc_init_array+0xc>
 800a02a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02e:	4798      	blx	r3
 800a030:	3601      	adds	r6, #1
 800a032:	e7f2      	b.n	800a01a <__libc_init_array+0x1e>
 800a034:	0800abb8 	.word	0x0800abb8
 800a038:	0800abb8 	.word	0x0800abb8
 800a03c:	0800abb8 	.word	0x0800abb8
 800a040:	0800abbc 	.word	0x0800abbc

0800a044 <__retarget_lock_acquire_recursive>:
 800a044:	4770      	bx	lr

0800a046 <__retarget_lock_release_recursive>:
 800a046:	4770      	bx	lr

0800a048 <_free_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4605      	mov	r5, r0
 800a04c:	2900      	cmp	r1, #0
 800a04e:	d041      	beq.n	800a0d4 <_free_r+0x8c>
 800a050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a054:	1f0c      	subs	r4, r1, #4
 800a056:	2b00      	cmp	r3, #0
 800a058:	bfb8      	it	lt
 800a05a:	18e4      	addlt	r4, r4, r3
 800a05c:	f000 f8e0 	bl	800a220 <__malloc_lock>
 800a060:	4a1d      	ldr	r2, [pc, #116]	@ (800a0d8 <_free_r+0x90>)
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	b933      	cbnz	r3, 800a074 <_free_r+0x2c>
 800a066:	6063      	str	r3, [r4, #4]
 800a068:	6014      	str	r4, [r2, #0]
 800a06a:	4628      	mov	r0, r5
 800a06c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a070:	f000 b8dc 	b.w	800a22c <__malloc_unlock>
 800a074:	42a3      	cmp	r3, r4
 800a076:	d908      	bls.n	800a08a <_free_r+0x42>
 800a078:	6820      	ldr	r0, [r4, #0]
 800a07a:	1821      	adds	r1, r4, r0
 800a07c:	428b      	cmp	r3, r1
 800a07e:	bf01      	itttt	eq
 800a080:	6819      	ldreq	r1, [r3, #0]
 800a082:	685b      	ldreq	r3, [r3, #4]
 800a084:	1809      	addeq	r1, r1, r0
 800a086:	6021      	streq	r1, [r4, #0]
 800a088:	e7ed      	b.n	800a066 <_free_r+0x1e>
 800a08a:	461a      	mov	r2, r3
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	b10b      	cbz	r3, 800a094 <_free_r+0x4c>
 800a090:	42a3      	cmp	r3, r4
 800a092:	d9fa      	bls.n	800a08a <_free_r+0x42>
 800a094:	6811      	ldr	r1, [r2, #0]
 800a096:	1850      	adds	r0, r2, r1
 800a098:	42a0      	cmp	r0, r4
 800a09a:	d10b      	bne.n	800a0b4 <_free_r+0x6c>
 800a09c:	6820      	ldr	r0, [r4, #0]
 800a09e:	4401      	add	r1, r0
 800a0a0:	1850      	adds	r0, r2, r1
 800a0a2:	4283      	cmp	r3, r0
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	d1e0      	bne.n	800a06a <_free_r+0x22>
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	6053      	str	r3, [r2, #4]
 800a0ae:	4408      	add	r0, r1
 800a0b0:	6010      	str	r0, [r2, #0]
 800a0b2:	e7da      	b.n	800a06a <_free_r+0x22>
 800a0b4:	d902      	bls.n	800a0bc <_free_r+0x74>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	e7d6      	b.n	800a06a <_free_r+0x22>
 800a0bc:	6820      	ldr	r0, [r4, #0]
 800a0be:	1821      	adds	r1, r4, r0
 800a0c0:	428b      	cmp	r3, r1
 800a0c2:	bf04      	itt	eq
 800a0c4:	6819      	ldreq	r1, [r3, #0]
 800a0c6:	685b      	ldreq	r3, [r3, #4]
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	bf04      	itt	eq
 800a0cc:	1809      	addeq	r1, r1, r0
 800a0ce:	6021      	streq	r1, [r4, #0]
 800a0d0:	6054      	str	r4, [r2, #4]
 800a0d2:	e7ca      	b.n	800a06a <_free_r+0x22>
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	bf00      	nop
 800a0d8:	20002444 	.word	0x20002444

0800a0dc <sbrk_aligned>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	4e0f      	ldr	r6, [pc, #60]	@ (800a11c <sbrk_aligned+0x40>)
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	6831      	ldr	r1, [r6, #0]
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	b911      	cbnz	r1, 800a0ee <sbrk_aligned+0x12>
 800a0e8:	f000 fba4 	bl	800a834 <_sbrk_r>
 800a0ec:	6030      	str	r0, [r6, #0]
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 fb9f 	bl	800a834 <_sbrk_r>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d103      	bne.n	800a102 <sbrk_aligned+0x26>
 800a0fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a0fe:	4620      	mov	r0, r4
 800a100:	bd70      	pop	{r4, r5, r6, pc}
 800a102:	1cc4      	adds	r4, r0, #3
 800a104:	f024 0403 	bic.w	r4, r4, #3
 800a108:	42a0      	cmp	r0, r4
 800a10a:	d0f8      	beq.n	800a0fe <sbrk_aligned+0x22>
 800a10c:	1a21      	subs	r1, r4, r0
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 fb90 	bl	800a834 <_sbrk_r>
 800a114:	3001      	adds	r0, #1
 800a116:	d1f2      	bne.n	800a0fe <sbrk_aligned+0x22>
 800a118:	e7ef      	b.n	800a0fa <sbrk_aligned+0x1e>
 800a11a:	bf00      	nop
 800a11c:	20002440 	.word	0x20002440

0800a120 <_malloc_r>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	1ccd      	adds	r5, r1, #3
 800a126:	f025 0503 	bic.w	r5, r5, #3
 800a12a:	3508      	adds	r5, #8
 800a12c:	2d0c      	cmp	r5, #12
 800a12e:	bf38      	it	cc
 800a130:	250c      	movcc	r5, #12
 800a132:	2d00      	cmp	r5, #0
 800a134:	4606      	mov	r6, r0
 800a136:	db01      	blt.n	800a13c <_malloc_r+0x1c>
 800a138:	42a9      	cmp	r1, r5
 800a13a:	d904      	bls.n	800a146 <_malloc_r+0x26>
 800a13c:	230c      	movs	r3, #12
 800a13e:	6033      	str	r3, [r6, #0]
 800a140:	2000      	movs	r0, #0
 800a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a21c <_malloc_r+0xfc>
 800a14a:	f000 f869 	bl	800a220 <__malloc_lock>
 800a14e:	f8d8 3000 	ldr.w	r3, [r8]
 800a152:	461c      	mov	r4, r3
 800a154:	bb44      	cbnz	r4, 800a1a8 <_malloc_r+0x88>
 800a156:	4629      	mov	r1, r5
 800a158:	4630      	mov	r0, r6
 800a15a:	f7ff ffbf 	bl	800a0dc <sbrk_aligned>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	4604      	mov	r4, r0
 800a162:	d158      	bne.n	800a216 <_malloc_r+0xf6>
 800a164:	f8d8 4000 	ldr.w	r4, [r8]
 800a168:	4627      	mov	r7, r4
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	d143      	bne.n	800a1f6 <_malloc_r+0xd6>
 800a16e:	2c00      	cmp	r4, #0
 800a170:	d04b      	beq.n	800a20a <_malloc_r+0xea>
 800a172:	6823      	ldr	r3, [r4, #0]
 800a174:	4639      	mov	r1, r7
 800a176:	4630      	mov	r0, r6
 800a178:	eb04 0903 	add.w	r9, r4, r3
 800a17c:	f000 fb5a 	bl	800a834 <_sbrk_r>
 800a180:	4581      	cmp	r9, r0
 800a182:	d142      	bne.n	800a20a <_malloc_r+0xea>
 800a184:	6821      	ldr	r1, [r4, #0]
 800a186:	1a6d      	subs	r5, r5, r1
 800a188:	4629      	mov	r1, r5
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff ffa6 	bl	800a0dc <sbrk_aligned>
 800a190:	3001      	adds	r0, #1
 800a192:	d03a      	beq.n	800a20a <_malloc_r+0xea>
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	442b      	add	r3, r5
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	f8d8 3000 	ldr.w	r3, [r8]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	bb62      	cbnz	r2, 800a1fc <_malloc_r+0xdc>
 800a1a2:	f8c8 7000 	str.w	r7, [r8]
 800a1a6:	e00f      	b.n	800a1c8 <_malloc_r+0xa8>
 800a1a8:	6822      	ldr	r2, [r4, #0]
 800a1aa:	1b52      	subs	r2, r2, r5
 800a1ac:	d420      	bmi.n	800a1f0 <_malloc_r+0xd0>
 800a1ae:	2a0b      	cmp	r2, #11
 800a1b0:	d917      	bls.n	800a1e2 <_malloc_r+0xc2>
 800a1b2:	1961      	adds	r1, r4, r5
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	6025      	str	r5, [r4, #0]
 800a1b8:	bf18      	it	ne
 800a1ba:	6059      	strne	r1, [r3, #4]
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	bf08      	it	eq
 800a1c0:	f8c8 1000 	streq.w	r1, [r8]
 800a1c4:	5162      	str	r2, [r4, r5]
 800a1c6:	604b      	str	r3, [r1, #4]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 f82f 	bl	800a22c <__malloc_unlock>
 800a1ce:	f104 000b 	add.w	r0, r4, #11
 800a1d2:	1d23      	adds	r3, r4, #4
 800a1d4:	f020 0007 	bic.w	r0, r0, #7
 800a1d8:	1ac2      	subs	r2, r0, r3
 800a1da:	bf1c      	itt	ne
 800a1dc:	1a1b      	subne	r3, r3, r0
 800a1de:	50a3      	strne	r3, [r4, r2]
 800a1e0:	e7af      	b.n	800a142 <_malloc_r+0x22>
 800a1e2:	6862      	ldr	r2, [r4, #4]
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	bf0c      	ite	eq
 800a1e8:	f8c8 2000 	streq.w	r2, [r8]
 800a1ec:	605a      	strne	r2, [r3, #4]
 800a1ee:	e7eb      	b.n	800a1c8 <_malloc_r+0xa8>
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	6864      	ldr	r4, [r4, #4]
 800a1f4:	e7ae      	b.n	800a154 <_malloc_r+0x34>
 800a1f6:	463c      	mov	r4, r7
 800a1f8:	687f      	ldr	r7, [r7, #4]
 800a1fa:	e7b6      	b.n	800a16a <_malloc_r+0x4a>
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	42a3      	cmp	r3, r4
 800a202:	d1fb      	bne.n	800a1fc <_malloc_r+0xdc>
 800a204:	2300      	movs	r3, #0
 800a206:	6053      	str	r3, [r2, #4]
 800a208:	e7de      	b.n	800a1c8 <_malloc_r+0xa8>
 800a20a:	230c      	movs	r3, #12
 800a20c:	6033      	str	r3, [r6, #0]
 800a20e:	4630      	mov	r0, r6
 800a210:	f000 f80c 	bl	800a22c <__malloc_unlock>
 800a214:	e794      	b.n	800a140 <_malloc_r+0x20>
 800a216:	6005      	str	r5, [r0, #0]
 800a218:	e7d6      	b.n	800a1c8 <_malloc_r+0xa8>
 800a21a:	bf00      	nop
 800a21c:	20002444 	.word	0x20002444

0800a220 <__malloc_lock>:
 800a220:	4801      	ldr	r0, [pc, #4]	@ (800a228 <__malloc_lock+0x8>)
 800a222:	f7ff bf0f 	b.w	800a044 <__retarget_lock_acquire_recursive>
 800a226:	bf00      	nop
 800a228:	2000243c 	.word	0x2000243c

0800a22c <__malloc_unlock>:
 800a22c:	4801      	ldr	r0, [pc, #4]	@ (800a234 <__malloc_unlock+0x8>)
 800a22e:	f7ff bf0a 	b.w	800a046 <__retarget_lock_release_recursive>
 800a232:	bf00      	nop
 800a234:	2000243c 	.word	0x2000243c

0800a238 <__ssputs_r>:
 800a238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	688e      	ldr	r6, [r1, #8]
 800a23e:	461f      	mov	r7, r3
 800a240:	42be      	cmp	r6, r7
 800a242:	680b      	ldr	r3, [r1, #0]
 800a244:	4682      	mov	sl, r0
 800a246:	460c      	mov	r4, r1
 800a248:	4690      	mov	r8, r2
 800a24a:	d82d      	bhi.n	800a2a8 <__ssputs_r+0x70>
 800a24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a254:	d026      	beq.n	800a2a4 <__ssputs_r+0x6c>
 800a256:	6965      	ldr	r5, [r4, #20]
 800a258:	6909      	ldr	r1, [r1, #16]
 800a25a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a25e:	eba3 0901 	sub.w	r9, r3, r1
 800a262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a266:	1c7b      	adds	r3, r7, #1
 800a268:	444b      	add	r3, r9
 800a26a:	106d      	asrs	r5, r5, #1
 800a26c:	429d      	cmp	r5, r3
 800a26e:	bf38      	it	cc
 800a270:	461d      	movcc	r5, r3
 800a272:	0553      	lsls	r3, r2, #21
 800a274:	d527      	bpl.n	800a2c6 <__ssputs_r+0x8e>
 800a276:	4629      	mov	r1, r5
 800a278:	f7ff ff52 	bl	800a120 <_malloc_r>
 800a27c:	4606      	mov	r6, r0
 800a27e:	b360      	cbz	r0, 800a2da <__ssputs_r+0xa2>
 800a280:	6921      	ldr	r1, [r4, #16]
 800a282:	464a      	mov	r2, r9
 800a284:	f000 fae6 	bl	800a854 <memcpy>
 800a288:	89a3      	ldrh	r3, [r4, #12]
 800a28a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	6126      	str	r6, [r4, #16]
 800a296:	6165      	str	r5, [r4, #20]
 800a298:	444e      	add	r6, r9
 800a29a:	eba5 0509 	sub.w	r5, r5, r9
 800a29e:	6026      	str	r6, [r4, #0]
 800a2a0:	60a5      	str	r5, [r4, #8]
 800a2a2:	463e      	mov	r6, r7
 800a2a4:	42be      	cmp	r6, r7
 800a2a6:	d900      	bls.n	800a2aa <__ssputs_r+0x72>
 800a2a8:	463e      	mov	r6, r7
 800a2aa:	6820      	ldr	r0, [r4, #0]
 800a2ac:	4632      	mov	r2, r6
 800a2ae:	4641      	mov	r1, r8
 800a2b0:	f000 faa6 	bl	800a800 <memmove>
 800a2b4:	68a3      	ldr	r3, [r4, #8]
 800a2b6:	1b9b      	subs	r3, r3, r6
 800a2b8:	60a3      	str	r3, [r4, #8]
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	4433      	add	r3, r6
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	f000 fad2 	bl	800a870 <_realloc_r>
 800a2cc:	4606      	mov	r6, r0
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d1e0      	bne.n	800a294 <__ssputs_r+0x5c>
 800a2d2:	6921      	ldr	r1, [r4, #16]
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	f7ff feb7 	bl	800a048 <_free_r>
 800a2da:	230c      	movs	r3, #12
 800a2dc:	f8ca 3000 	str.w	r3, [sl]
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2e6:	81a3      	strh	r3, [r4, #12]
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	e7e9      	b.n	800a2c2 <__ssputs_r+0x8a>
	...

0800a2f0 <_svfiprintf_r>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	4698      	mov	r8, r3
 800a2f6:	898b      	ldrh	r3, [r1, #12]
 800a2f8:	061b      	lsls	r3, r3, #24
 800a2fa:	b09d      	sub	sp, #116	@ 0x74
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	4614      	mov	r4, r2
 800a302:	d510      	bpl.n	800a326 <_svfiprintf_r+0x36>
 800a304:	690b      	ldr	r3, [r1, #16]
 800a306:	b973      	cbnz	r3, 800a326 <_svfiprintf_r+0x36>
 800a308:	2140      	movs	r1, #64	@ 0x40
 800a30a:	f7ff ff09 	bl	800a120 <_malloc_r>
 800a30e:	6028      	str	r0, [r5, #0]
 800a310:	6128      	str	r0, [r5, #16]
 800a312:	b930      	cbnz	r0, 800a322 <_svfiprintf_r+0x32>
 800a314:	230c      	movs	r3, #12
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	b01d      	add	sp, #116	@ 0x74
 800a31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a322:	2340      	movs	r3, #64	@ 0x40
 800a324:	616b      	str	r3, [r5, #20]
 800a326:	2300      	movs	r3, #0
 800a328:	9309      	str	r3, [sp, #36]	@ 0x24
 800a32a:	2320      	movs	r3, #32
 800a32c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a330:	f8cd 800c 	str.w	r8, [sp, #12]
 800a334:	2330      	movs	r3, #48	@ 0x30
 800a336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4d4 <_svfiprintf_r+0x1e4>
 800a33a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a33e:	f04f 0901 	mov.w	r9, #1
 800a342:	4623      	mov	r3, r4
 800a344:	469a      	mov	sl, r3
 800a346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a34a:	b10a      	cbz	r2, 800a350 <_svfiprintf_r+0x60>
 800a34c:	2a25      	cmp	r2, #37	@ 0x25
 800a34e:	d1f9      	bne.n	800a344 <_svfiprintf_r+0x54>
 800a350:	ebba 0b04 	subs.w	fp, sl, r4
 800a354:	d00b      	beq.n	800a36e <_svfiprintf_r+0x7e>
 800a356:	465b      	mov	r3, fp
 800a358:	4622      	mov	r2, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	4638      	mov	r0, r7
 800a35e:	f7ff ff6b 	bl	800a238 <__ssputs_r>
 800a362:	3001      	adds	r0, #1
 800a364:	f000 80a7 	beq.w	800a4b6 <_svfiprintf_r+0x1c6>
 800a368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a36a:	445a      	add	r2, fp
 800a36c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a36e:	f89a 3000 	ldrb.w	r3, [sl]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 809f 	beq.w	800a4b6 <_svfiprintf_r+0x1c6>
 800a378:	2300      	movs	r3, #0
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a382:	f10a 0a01 	add.w	sl, sl, #1
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	9307      	str	r3, [sp, #28]
 800a38a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a38e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a390:	4654      	mov	r4, sl
 800a392:	2205      	movs	r2, #5
 800a394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a398:	484e      	ldr	r0, [pc, #312]	@ (800a4d4 <_svfiprintf_r+0x1e4>)
 800a39a:	f7f5 ff21 	bl	80001e0 <memchr>
 800a39e:	9a04      	ldr	r2, [sp, #16]
 800a3a0:	b9d8      	cbnz	r0, 800a3da <_svfiprintf_r+0xea>
 800a3a2:	06d0      	lsls	r0, r2, #27
 800a3a4:	bf44      	itt	mi
 800a3a6:	2320      	movmi	r3, #32
 800a3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3ac:	0711      	lsls	r1, r2, #28
 800a3ae:	bf44      	itt	mi
 800a3b0:	232b      	movmi	r3, #43	@ 0x2b
 800a3b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3bc:	d015      	beq.n	800a3ea <_svfiprintf_r+0xfa>
 800a3be:	9a07      	ldr	r2, [sp, #28]
 800a3c0:	4654      	mov	r4, sl
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	f04f 0c0a 	mov.w	ip, #10
 800a3c8:	4621      	mov	r1, r4
 800a3ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ce:	3b30      	subs	r3, #48	@ 0x30
 800a3d0:	2b09      	cmp	r3, #9
 800a3d2:	d94b      	bls.n	800a46c <_svfiprintf_r+0x17c>
 800a3d4:	b1b0      	cbz	r0, 800a404 <_svfiprintf_r+0x114>
 800a3d6:	9207      	str	r2, [sp, #28]
 800a3d8:	e014      	b.n	800a404 <_svfiprintf_r+0x114>
 800a3da:	eba0 0308 	sub.w	r3, r0, r8
 800a3de:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	46a2      	mov	sl, r4
 800a3e8:	e7d2      	b.n	800a390 <_svfiprintf_r+0xa0>
 800a3ea:	9b03      	ldr	r3, [sp, #12]
 800a3ec:	1d19      	adds	r1, r3, #4
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9103      	str	r1, [sp, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	bfbb      	ittet	lt
 800a3f6:	425b      	neglt	r3, r3
 800a3f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fc:	9307      	strge	r3, [sp, #28]
 800a3fe:	9307      	strlt	r3, [sp, #28]
 800a400:	bfb8      	it	lt
 800a402:	9204      	strlt	r2, [sp, #16]
 800a404:	7823      	ldrb	r3, [r4, #0]
 800a406:	2b2e      	cmp	r3, #46	@ 0x2e
 800a408:	d10a      	bne.n	800a420 <_svfiprintf_r+0x130>
 800a40a:	7863      	ldrb	r3, [r4, #1]
 800a40c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a40e:	d132      	bne.n	800a476 <_svfiprintf_r+0x186>
 800a410:	9b03      	ldr	r3, [sp, #12]
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	9203      	str	r2, [sp, #12]
 800a418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a41c:	3402      	adds	r4, #2
 800a41e:	9305      	str	r3, [sp, #20]
 800a420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4e4 <_svfiprintf_r+0x1f4>
 800a424:	7821      	ldrb	r1, [r4, #0]
 800a426:	2203      	movs	r2, #3
 800a428:	4650      	mov	r0, sl
 800a42a:	f7f5 fed9 	bl	80001e0 <memchr>
 800a42e:	b138      	cbz	r0, 800a440 <_svfiprintf_r+0x150>
 800a430:	9b04      	ldr	r3, [sp, #16]
 800a432:	eba0 000a 	sub.w	r0, r0, sl
 800a436:	2240      	movs	r2, #64	@ 0x40
 800a438:	4082      	lsls	r2, r0
 800a43a:	4313      	orrs	r3, r2
 800a43c:	3401      	adds	r4, #1
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a444:	4824      	ldr	r0, [pc, #144]	@ (800a4d8 <_svfiprintf_r+0x1e8>)
 800a446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a44a:	2206      	movs	r2, #6
 800a44c:	f7f5 fec8 	bl	80001e0 <memchr>
 800a450:	2800      	cmp	r0, #0
 800a452:	d036      	beq.n	800a4c2 <_svfiprintf_r+0x1d2>
 800a454:	4b21      	ldr	r3, [pc, #132]	@ (800a4dc <_svfiprintf_r+0x1ec>)
 800a456:	bb1b      	cbnz	r3, 800a4a0 <_svfiprintf_r+0x1b0>
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	3307      	adds	r3, #7
 800a45c:	f023 0307 	bic.w	r3, r3, #7
 800a460:	3308      	adds	r3, #8
 800a462:	9303      	str	r3, [sp, #12]
 800a464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a466:	4433      	add	r3, r6
 800a468:	9309      	str	r3, [sp, #36]	@ 0x24
 800a46a:	e76a      	b.n	800a342 <_svfiprintf_r+0x52>
 800a46c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a470:	460c      	mov	r4, r1
 800a472:	2001      	movs	r0, #1
 800a474:	e7a8      	b.n	800a3c8 <_svfiprintf_r+0xd8>
 800a476:	2300      	movs	r3, #0
 800a478:	3401      	adds	r4, #1
 800a47a:	9305      	str	r3, [sp, #20]
 800a47c:	4619      	mov	r1, r3
 800a47e:	f04f 0c0a 	mov.w	ip, #10
 800a482:	4620      	mov	r0, r4
 800a484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a488:	3a30      	subs	r2, #48	@ 0x30
 800a48a:	2a09      	cmp	r2, #9
 800a48c:	d903      	bls.n	800a496 <_svfiprintf_r+0x1a6>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0c6      	beq.n	800a420 <_svfiprintf_r+0x130>
 800a492:	9105      	str	r1, [sp, #20]
 800a494:	e7c4      	b.n	800a420 <_svfiprintf_r+0x130>
 800a496:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49a:	4604      	mov	r4, r0
 800a49c:	2301      	movs	r3, #1
 800a49e:	e7f0      	b.n	800a482 <_svfiprintf_r+0x192>
 800a4a0:	ab03      	add	r3, sp, #12
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e0 <_svfiprintf_r+0x1f0>)
 800a4a8:	a904      	add	r1, sp, #16
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	f3af 8000 	nop.w
 800a4b0:	1c42      	adds	r2, r0, #1
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	d1d6      	bne.n	800a464 <_svfiprintf_r+0x174>
 800a4b6:	89ab      	ldrh	r3, [r5, #12]
 800a4b8:	065b      	lsls	r3, r3, #25
 800a4ba:	f53f af2d 	bmi.w	800a318 <_svfiprintf_r+0x28>
 800a4be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4c0:	e72c      	b.n	800a31c <_svfiprintf_r+0x2c>
 800a4c2:	ab03      	add	r3, sp, #12
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4b05      	ldr	r3, [pc, #20]	@ (800a4e0 <_svfiprintf_r+0x1f0>)
 800a4ca:	a904      	add	r1, sp, #16
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	f000 f879 	bl	800a5c4 <_printf_i>
 800a4d2:	e7ed      	b.n	800a4b0 <_svfiprintf_r+0x1c0>
 800a4d4:	0800ab7c 	.word	0x0800ab7c
 800a4d8:	0800ab86 	.word	0x0800ab86
 800a4dc:	00000000 	.word	0x00000000
 800a4e0:	0800a239 	.word	0x0800a239
 800a4e4:	0800ab82 	.word	0x0800ab82

0800a4e8 <_printf_common>:
 800a4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ec:	4616      	mov	r6, r2
 800a4ee:	4698      	mov	r8, r3
 800a4f0:	688a      	ldr	r2, [r1, #8]
 800a4f2:	690b      	ldr	r3, [r1, #16]
 800a4f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	bfb8      	it	lt
 800a4fc:	4613      	movlt	r3, r2
 800a4fe:	6033      	str	r3, [r6, #0]
 800a500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a504:	4607      	mov	r7, r0
 800a506:	460c      	mov	r4, r1
 800a508:	b10a      	cbz	r2, 800a50e <_printf_common+0x26>
 800a50a:	3301      	adds	r3, #1
 800a50c:	6033      	str	r3, [r6, #0]
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	0699      	lsls	r1, r3, #26
 800a512:	bf42      	ittt	mi
 800a514:	6833      	ldrmi	r3, [r6, #0]
 800a516:	3302      	addmi	r3, #2
 800a518:	6033      	strmi	r3, [r6, #0]
 800a51a:	6825      	ldr	r5, [r4, #0]
 800a51c:	f015 0506 	ands.w	r5, r5, #6
 800a520:	d106      	bne.n	800a530 <_printf_common+0x48>
 800a522:	f104 0a19 	add.w	sl, r4, #25
 800a526:	68e3      	ldr	r3, [r4, #12]
 800a528:	6832      	ldr	r2, [r6, #0]
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	42ab      	cmp	r3, r5
 800a52e:	dc26      	bgt.n	800a57e <_printf_common+0x96>
 800a530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a534:	6822      	ldr	r2, [r4, #0]
 800a536:	3b00      	subs	r3, #0
 800a538:	bf18      	it	ne
 800a53a:	2301      	movne	r3, #1
 800a53c:	0692      	lsls	r2, r2, #26
 800a53e:	d42b      	bmi.n	800a598 <_printf_common+0xb0>
 800a540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a544:	4641      	mov	r1, r8
 800a546:	4638      	mov	r0, r7
 800a548:	47c8      	blx	r9
 800a54a:	3001      	adds	r0, #1
 800a54c:	d01e      	beq.n	800a58c <_printf_common+0xa4>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	6922      	ldr	r2, [r4, #16]
 800a552:	f003 0306 	and.w	r3, r3, #6
 800a556:	2b04      	cmp	r3, #4
 800a558:	bf02      	ittt	eq
 800a55a:	68e5      	ldreq	r5, [r4, #12]
 800a55c:	6833      	ldreq	r3, [r6, #0]
 800a55e:	1aed      	subeq	r5, r5, r3
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	bf0c      	ite	eq
 800a564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a568:	2500      	movne	r5, #0
 800a56a:	4293      	cmp	r3, r2
 800a56c:	bfc4      	itt	gt
 800a56e:	1a9b      	subgt	r3, r3, r2
 800a570:	18ed      	addgt	r5, r5, r3
 800a572:	2600      	movs	r6, #0
 800a574:	341a      	adds	r4, #26
 800a576:	42b5      	cmp	r5, r6
 800a578:	d11a      	bne.n	800a5b0 <_printf_common+0xc8>
 800a57a:	2000      	movs	r0, #0
 800a57c:	e008      	b.n	800a590 <_printf_common+0xa8>
 800a57e:	2301      	movs	r3, #1
 800a580:	4652      	mov	r2, sl
 800a582:	4641      	mov	r1, r8
 800a584:	4638      	mov	r0, r7
 800a586:	47c8      	blx	r9
 800a588:	3001      	adds	r0, #1
 800a58a:	d103      	bne.n	800a594 <_printf_common+0xac>
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295
 800a590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a594:	3501      	adds	r5, #1
 800a596:	e7c6      	b.n	800a526 <_printf_common+0x3e>
 800a598:	18e1      	adds	r1, r4, r3
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	2030      	movs	r0, #48	@ 0x30
 800a59e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5a2:	4422      	add	r2, r4
 800a5a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5ac:	3302      	adds	r3, #2
 800a5ae:	e7c7      	b.n	800a540 <_printf_common+0x58>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	4641      	mov	r1, r8
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	47c8      	blx	r9
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	d0e6      	beq.n	800a58c <_printf_common+0xa4>
 800a5be:	3601      	adds	r6, #1
 800a5c0:	e7d9      	b.n	800a576 <_printf_common+0x8e>
	...

0800a5c4 <_printf_i>:
 800a5c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	7e0f      	ldrb	r7, [r1, #24]
 800a5ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5cc:	2f78      	cmp	r7, #120	@ 0x78
 800a5ce:	4691      	mov	r9, r2
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	469a      	mov	sl, r3
 800a5d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5da:	d807      	bhi.n	800a5ec <_printf_i+0x28>
 800a5dc:	2f62      	cmp	r7, #98	@ 0x62
 800a5de:	d80a      	bhi.n	800a5f6 <_printf_i+0x32>
 800a5e0:	2f00      	cmp	r7, #0
 800a5e2:	f000 80d1 	beq.w	800a788 <_printf_i+0x1c4>
 800a5e6:	2f58      	cmp	r7, #88	@ 0x58
 800a5e8:	f000 80b8 	beq.w	800a75c <_printf_i+0x198>
 800a5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5f4:	e03a      	b.n	800a66c <_printf_i+0xa8>
 800a5f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5fa:	2b15      	cmp	r3, #21
 800a5fc:	d8f6      	bhi.n	800a5ec <_printf_i+0x28>
 800a5fe:	a101      	add	r1, pc, #4	@ (adr r1, 800a604 <_printf_i+0x40>)
 800a600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a604:	0800a65d 	.word	0x0800a65d
 800a608:	0800a671 	.word	0x0800a671
 800a60c:	0800a5ed 	.word	0x0800a5ed
 800a610:	0800a5ed 	.word	0x0800a5ed
 800a614:	0800a5ed 	.word	0x0800a5ed
 800a618:	0800a5ed 	.word	0x0800a5ed
 800a61c:	0800a671 	.word	0x0800a671
 800a620:	0800a5ed 	.word	0x0800a5ed
 800a624:	0800a5ed 	.word	0x0800a5ed
 800a628:	0800a5ed 	.word	0x0800a5ed
 800a62c:	0800a5ed 	.word	0x0800a5ed
 800a630:	0800a76f 	.word	0x0800a76f
 800a634:	0800a69b 	.word	0x0800a69b
 800a638:	0800a729 	.word	0x0800a729
 800a63c:	0800a5ed 	.word	0x0800a5ed
 800a640:	0800a5ed 	.word	0x0800a5ed
 800a644:	0800a791 	.word	0x0800a791
 800a648:	0800a5ed 	.word	0x0800a5ed
 800a64c:	0800a69b 	.word	0x0800a69b
 800a650:	0800a5ed 	.word	0x0800a5ed
 800a654:	0800a5ed 	.word	0x0800a5ed
 800a658:	0800a731 	.word	0x0800a731
 800a65c:	6833      	ldr	r3, [r6, #0]
 800a65e:	1d1a      	adds	r2, r3, #4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6032      	str	r2, [r6, #0]
 800a664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a66c:	2301      	movs	r3, #1
 800a66e:	e09c      	b.n	800a7aa <_printf_i+0x1e6>
 800a670:	6833      	ldr	r3, [r6, #0]
 800a672:	6820      	ldr	r0, [r4, #0]
 800a674:	1d19      	adds	r1, r3, #4
 800a676:	6031      	str	r1, [r6, #0]
 800a678:	0606      	lsls	r6, r0, #24
 800a67a:	d501      	bpl.n	800a680 <_printf_i+0xbc>
 800a67c:	681d      	ldr	r5, [r3, #0]
 800a67e:	e003      	b.n	800a688 <_printf_i+0xc4>
 800a680:	0645      	lsls	r5, r0, #25
 800a682:	d5fb      	bpl.n	800a67c <_printf_i+0xb8>
 800a684:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a688:	2d00      	cmp	r5, #0
 800a68a:	da03      	bge.n	800a694 <_printf_i+0xd0>
 800a68c:	232d      	movs	r3, #45	@ 0x2d
 800a68e:	426d      	negs	r5, r5
 800a690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a694:	4858      	ldr	r0, [pc, #352]	@ (800a7f8 <_printf_i+0x234>)
 800a696:	230a      	movs	r3, #10
 800a698:	e011      	b.n	800a6be <_printf_i+0xfa>
 800a69a:	6821      	ldr	r1, [r4, #0]
 800a69c:	6833      	ldr	r3, [r6, #0]
 800a69e:	0608      	lsls	r0, r1, #24
 800a6a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6a4:	d402      	bmi.n	800a6ac <_printf_i+0xe8>
 800a6a6:	0649      	lsls	r1, r1, #25
 800a6a8:	bf48      	it	mi
 800a6aa:	b2ad      	uxthmi	r5, r5
 800a6ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ae:	4852      	ldr	r0, [pc, #328]	@ (800a7f8 <_printf_i+0x234>)
 800a6b0:	6033      	str	r3, [r6, #0]
 800a6b2:	bf14      	ite	ne
 800a6b4:	230a      	movne	r3, #10
 800a6b6:	2308      	moveq	r3, #8
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6be:	6866      	ldr	r6, [r4, #4]
 800a6c0:	60a6      	str	r6, [r4, #8]
 800a6c2:	2e00      	cmp	r6, #0
 800a6c4:	db05      	blt.n	800a6d2 <_printf_i+0x10e>
 800a6c6:	6821      	ldr	r1, [r4, #0]
 800a6c8:	432e      	orrs	r6, r5
 800a6ca:	f021 0104 	bic.w	r1, r1, #4
 800a6ce:	6021      	str	r1, [r4, #0]
 800a6d0:	d04b      	beq.n	800a76a <_printf_i+0x1a6>
 800a6d2:	4616      	mov	r6, r2
 800a6d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6d8:	fb03 5711 	mls	r7, r3, r1, r5
 800a6dc:	5dc7      	ldrb	r7, [r0, r7]
 800a6de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6e2:	462f      	mov	r7, r5
 800a6e4:	42bb      	cmp	r3, r7
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	d9f4      	bls.n	800a6d4 <_printf_i+0x110>
 800a6ea:	2b08      	cmp	r3, #8
 800a6ec:	d10b      	bne.n	800a706 <_printf_i+0x142>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	07df      	lsls	r7, r3, #31
 800a6f2:	d508      	bpl.n	800a706 <_printf_i+0x142>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	6861      	ldr	r1, [r4, #4]
 800a6f8:	4299      	cmp	r1, r3
 800a6fa:	bfde      	ittt	le
 800a6fc:	2330      	movle	r3, #48	@ 0x30
 800a6fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a702:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a706:	1b92      	subs	r2, r2, r6
 800a708:	6122      	str	r2, [r4, #16]
 800a70a:	f8cd a000 	str.w	sl, [sp]
 800a70e:	464b      	mov	r3, r9
 800a710:	aa03      	add	r2, sp, #12
 800a712:	4621      	mov	r1, r4
 800a714:	4640      	mov	r0, r8
 800a716:	f7ff fee7 	bl	800a4e8 <_printf_common>
 800a71a:	3001      	adds	r0, #1
 800a71c:	d14a      	bne.n	800a7b4 <_printf_i+0x1f0>
 800a71e:	f04f 30ff 	mov.w	r0, #4294967295
 800a722:	b004      	add	sp, #16
 800a724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	f043 0320 	orr.w	r3, r3, #32
 800a72e:	6023      	str	r3, [r4, #0]
 800a730:	4832      	ldr	r0, [pc, #200]	@ (800a7fc <_printf_i+0x238>)
 800a732:	2778      	movs	r7, #120	@ 0x78
 800a734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	6831      	ldr	r1, [r6, #0]
 800a73c:	061f      	lsls	r7, r3, #24
 800a73e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a742:	d402      	bmi.n	800a74a <_printf_i+0x186>
 800a744:	065f      	lsls	r7, r3, #25
 800a746:	bf48      	it	mi
 800a748:	b2ad      	uxthmi	r5, r5
 800a74a:	6031      	str	r1, [r6, #0]
 800a74c:	07d9      	lsls	r1, r3, #31
 800a74e:	bf44      	itt	mi
 800a750:	f043 0320 	orrmi.w	r3, r3, #32
 800a754:	6023      	strmi	r3, [r4, #0]
 800a756:	b11d      	cbz	r5, 800a760 <_printf_i+0x19c>
 800a758:	2310      	movs	r3, #16
 800a75a:	e7ad      	b.n	800a6b8 <_printf_i+0xf4>
 800a75c:	4826      	ldr	r0, [pc, #152]	@ (800a7f8 <_printf_i+0x234>)
 800a75e:	e7e9      	b.n	800a734 <_printf_i+0x170>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	f023 0320 	bic.w	r3, r3, #32
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	e7f6      	b.n	800a758 <_printf_i+0x194>
 800a76a:	4616      	mov	r6, r2
 800a76c:	e7bd      	b.n	800a6ea <_printf_i+0x126>
 800a76e:	6833      	ldr	r3, [r6, #0]
 800a770:	6825      	ldr	r5, [r4, #0]
 800a772:	6961      	ldr	r1, [r4, #20]
 800a774:	1d18      	adds	r0, r3, #4
 800a776:	6030      	str	r0, [r6, #0]
 800a778:	062e      	lsls	r6, r5, #24
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	d501      	bpl.n	800a782 <_printf_i+0x1be>
 800a77e:	6019      	str	r1, [r3, #0]
 800a780:	e002      	b.n	800a788 <_printf_i+0x1c4>
 800a782:	0668      	lsls	r0, r5, #25
 800a784:	d5fb      	bpl.n	800a77e <_printf_i+0x1ba>
 800a786:	8019      	strh	r1, [r3, #0]
 800a788:	2300      	movs	r3, #0
 800a78a:	6123      	str	r3, [r4, #16]
 800a78c:	4616      	mov	r6, r2
 800a78e:	e7bc      	b.n	800a70a <_printf_i+0x146>
 800a790:	6833      	ldr	r3, [r6, #0]
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	6032      	str	r2, [r6, #0]
 800a796:	681e      	ldr	r6, [r3, #0]
 800a798:	6862      	ldr	r2, [r4, #4]
 800a79a:	2100      	movs	r1, #0
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7f5 fd1f 	bl	80001e0 <memchr>
 800a7a2:	b108      	cbz	r0, 800a7a8 <_printf_i+0x1e4>
 800a7a4:	1b80      	subs	r0, r0, r6
 800a7a6:	6060      	str	r0, [r4, #4]
 800a7a8:	6863      	ldr	r3, [r4, #4]
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7b2:	e7aa      	b.n	800a70a <_printf_i+0x146>
 800a7b4:	6923      	ldr	r3, [r4, #16]
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	47d0      	blx	sl
 800a7be:	3001      	adds	r0, #1
 800a7c0:	d0ad      	beq.n	800a71e <_printf_i+0x15a>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	079b      	lsls	r3, r3, #30
 800a7c6:	d413      	bmi.n	800a7f0 <_printf_i+0x22c>
 800a7c8:	68e0      	ldr	r0, [r4, #12]
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	4298      	cmp	r0, r3
 800a7ce:	bfb8      	it	lt
 800a7d0:	4618      	movlt	r0, r3
 800a7d2:	e7a6      	b.n	800a722 <_printf_i+0x15e>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4640      	mov	r0, r8
 800a7dc:	47d0      	blx	sl
 800a7de:	3001      	adds	r0, #1
 800a7e0:	d09d      	beq.n	800a71e <_printf_i+0x15a>
 800a7e2:	3501      	adds	r5, #1
 800a7e4:	68e3      	ldr	r3, [r4, #12]
 800a7e6:	9903      	ldr	r1, [sp, #12]
 800a7e8:	1a5b      	subs	r3, r3, r1
 800a7ea:	42ab      	cmp	r3, r5
 800a7ec:	dcf2      	bgt.n	800a7d4 <_printf_i+0x210>
 800a7ee:	e7eb      	b.n	800a7c8 <_printf_i+0x204>
 800a7f0:	2500      	movs	r5, #0
 800a7f2:	f104 0619 	add.w	r6, r4, #25
 800a7f6:	e7f5      	b.n	800a7e4 <_printf_i+0x220>
 800a7f8:	0800ab8d 	.word	0x0800ab8d
 800a7fc:	0800ab9e 	.word	0x0800ab9e

0800a800 <memmove>:
 800a800:	4288      	cmp	r0, r1
 800a802:	b510      	push	{r4, lr}
 800a804:	eb01 0402 	add.w	r4, r1, r2
 800a808:	d902      	bls.n	800a810 <memmove+0x10>
 800a80a:	4284      	cmp	r4, r0
 800a80c:	4623      	mov	r3, r4
 800a80e:	d807      	bhi.n	800a820 <memmove+0x20>
 800a810:	1e43      	subs	r3, r0, #1
 800a812:	42a1      	cmp	r1, r4
 800a814:	d008      	beq.n	800a828 <memmove+0x28>
 800a816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a81e:	e7f8      	b.n	800a812 <memmove+0x12>
 800a820:	4402      	add	r2, r0
 800a822:	4601      	mov	r1, r0
 800a824:	428a      	cmp	r2, r1
 800a826:	d100      	bne.n	800a82a <memmove+0x2a>
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a832:	e7f7      	b.n	800a824 <memmove+0x24>

0800a834 <_sbrk_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d06      	ldr	r5, [pc, #24]	@ (800a850 <_sbrk_r+0x1c>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	f7f7 f876 	bl	8001930 <_sbrk>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_sbrk_r+0x1a>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_sbrk_r+0x1a>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20002438 	.word	0x20002438

0800a854 <memcpy>:
 800a854:	440a      	add	r2, r1
 800a856:	4291      	cmp	r1, r2
 800a858:	f100 33ff 	add.w	r3, r0, #4294967295
 800a85c:	d100      	bne.n	800a860 <memcpy+0xc>
 800a85e:	4770      	bx	lr
 800a860:	b510      	push	{r4, lr}
 800a862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a86a:	4291      	cmp	r1, r2
 800a86c:	d1f9      	bne.n	800a862 <memcpy+0xe>
 800a86e:	bd10      	pop	{r4, pc}

0800a870 <_realloc_r>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	4607      	mov	r7, r0
 800a876:	4614      	mov	r4, r2
 800a878:	460d      	mov	r5, r1
 800a87a:	b921      	cbnz	r1, 800a886 <_realloc_r+0x16>
 800a87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a880:	4611      	mov	r1, r2
 800a882:	f7ff bc4d 	b.w	800a120 <_malloc_r>
 800a886:	b92a      	cbnz	r2, 800a894 <_realloc_r+0x24>
 800a888:	f7ff fbde 	bl	800a048 <_free_r>
 800a88c:	4625      	mov	r5, r4
 800a88e:	4628      	mov	r0, r5
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a894:	f000 f81a 	bl	800a8cc <_malloc_usable_size_r>
 800a898:	4284      	cmp	r4, r0
 800a89a:	4606      	mov	r6, r0
 800a89c:	d802      	bhi.n	800a8a4 <_realloc_r+0x34>
 800a89e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8a2:	d8f4      	bhi.n	800a88e <_realloc_r+0x1e>
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f7ff fc3a 	bl	800a120 <_malloc_r>
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	b908      	cbnz	r0, 800a8b4 <_realloc_r+0x44>
 800a8b0:	4645      	mov	r5, r8
 800a8b2:	e7ec      	b.n	800a88e <_realloc_r+0x1e>
 800a8b4:	42b4      	cmp	r4, r6
 800a8b6:	4622      	mov	r2, r4
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	bf28      	it	cs
 800a8bc:	4632      	movcs	r2, r6
 800a8be:	f7ff ffc9 	bl	800a854 <memcpy>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	f7ff fbbf 	bl	800a048 <_free_r>
 800a8ca:	e7f1      	b.n	800a8b0 <_realloc_r+0x40>

0800a8cc <_malloc_usable_size_r>:
 800a8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d0:	1f18      	subs	r0, r3, #4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bfbc      	itt	lt
 800a8d6:	580b      	ldrlt	r3, [r1, r0]
 800a8d8:	18c0      	addlt	r0, r0, r3
 800a8da:	4770      	bx	lr

0800a8dc <fmax>:
 800a8dc:	b508      	push	{r3, lr}
 800a8de:	ed2d 8b04 	vpush	{d8-d9}
 800a8e2:	eeb0 8a40 	vmov.f32	s16, s0
 800a8e6:	eef0 8a60 	vmov.f32	s17, s1
 800a8ea:	eeb0 9a41 	vmov.f32	s18, s2
 800a8ee:	eef0 9a61 	vmov.f32	s19, s3
 800a8f2:	f000 f81d 	bl	800a930 <__fpclassifyd>
 800a8f6:	b950      	cbnz	r0, 800a90e <fmax+0x32>
 800a8f8:	eeb0 8a49 	vmov.f32	s16, s18
 800a8fc:	eef0 8a69 	vmov.f32	s17, s19
 800a900:	eeb0 0a48 	vmov.f32	s0, s16
 800a904:	eef0 0a68 	vmov.f32	s1, s17
 800a908:	ecbd 8b04 	vpop	{d8-d9}
 800a90c:	bd08      	pop	{r3, pc}
 800a90e:	eeb0 0a49 	vmov.f32	s0, s18
 800a912:	eef0 0a69 	vmov.f32	s1, s19
 800a916:	f000 f80b 	bl	800a930 <__fpclassifyd>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0f0      	beq.n	800a900 <fmax+0x24>
 800a91e:	ec53 2b19 	vmov	r2, r3, d9
 800a922:	ec51 0b18 	vmov	r0, r1, d8
 800a926:	f7f6 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d0e4      	beq.n	800a8f8 <fmax+0x1c>
 800a92e:	e7e7      	b.n	800a900 <fmax+0x24>

0800a930 <__fpclassifyd>:
 800a930:	ec51 0b10 	vmov	r0, r1, d0
 800a934:	460b      	mov	r3, r1
 800a936:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 800a93a:	b510      	push	{r4, lr}
 800a93c:	d104      	bne.n	800a948 <__fpclassifyd+0x18>
 800a93e:	2800      	cmp	r0, #0
 800a940:	bf0c      	ite	eq
 800a942:	2002      	moveq	r0, #2
 800a944:	2003      	movne	r0, #3
 800a946:	bd10      	pop	{r4, pc}
 800a948:	4a09      	ldr	r2, [pc, #36]	@ (800a970 <__fpclassifyd+0x40>)
 800a94a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 800a94e:	4294      	cmp	r4, r2
 800a950:	d908      	bls.n	800a964 <__fpclassifyd+0x34>
 800a952:	4a08      	ldr	r2, [pc, #32]	@ (800a974 <__fpclassifyd+0x44>)
 800a954:	4213      	tst	r3, r2
 800a956:	d007      	beq.n	800a968 <__fpclassifyd+0x38>
 800a958:	4291      	cmp	r1, r2
 800a95a:	d107      	bne.n	800a96c <__fpclassifyd+0x3c>
 800a95c:	fab0 f080 	clz	r0, r0
 800a960:	0940      	lsrs	r0, r0, #5
 800a962:	e7f0      	b.n	800a946 <__fpclassifyd+0x16>
 800a964:	2004      	movs	r0, #4
 800a966:	e7ee      	b.n	800a946 <__fpclassifyd+0x16>
 800a968:	2003      	movs	r0, #3
 800a96a:	e7ec      	b.n	800a946 <__fpclassifyd+0x16>
 800a96c:	2000      	movs	r0, #0
 800a96e:	e7ea      	b.n	800a946 <__fpclassifyd+0x16>
 800a970:	7fdfffff 	.word	0x7fdfffff
 800a974:	7ff00000 	.word	0x7ff00000

0800a978 <fminf>:
 800a978:	b508      	push	{r3, lr}
 800a97a:	ed2d 8b02 	vpush	{d8}
 800a97e:	eeb0 8a40 	vmov.f32	s16, s0
 800a982:	eef0 8a60 	vmov.f32	s17, s1
 800a986:	f000 f815 	bl	800a9b4 <__fpclassifyf>
 800a98a:	b930      	cbnz	r0, 800a99a <fminf+0x22>
 800a98c:	eeb0 8a68 	vmov.f32	s16, s17
 800a990:	eeb0 0a48 	vmov.f32	s0, s16
 800a994:	ecbd 8b02 	vpop	{d8}
 800a998:	bd08      	pop	{r3, pc}
 800a99a:	eeb0 0a68 	vmov.f32	s0, s17
 800a99e:	f000 f809 	bl	800a9b4 <__fpclassifyf>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d0f4      	beq.n	800a990 <fminf+0x18>
 800a9a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ae:	d5ed      	bpl.n	800a98c <fminf+0x14>
 800a9b0:	e7ee      	b.n	800a990 <fminf+0x18>
	...

0800a9b4 <__fpclassifyf>:
 800a9b4:	ee10 3a10 	vmov	r3, s0
 800a9b8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a9bc:	d00d      	beq.n	800a9da <__fpclassifyf+0x26>
 800a9be:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a9c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a9c6:	d30a      	bcc.n	800a9de <__fpclassifyf+0x2a>
 800a9c8:	4b07      	ldr	r3, [pc, #28]	@ (800a9e8 <__fpclassifyf+0x34>)
 800a9ca:	1e42      	subs	r2, r0, #1
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d908      	bls.n	800a9e2 <__fpclassifyf+0x2e>
 800a9d0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a9d4:	4258      	negs	r0, r3
 800a9d6:	4158      	adcs	r0, r3
 800a9d8:	4770      	bx	lr
 800a9da:	2002      	movs	r0, #2
 800a9dc:	4770      	bx	lr
 800a9de:	2004      	movs	r0, #4
 800a9e0:	4770      	bx	lr
 800a9e2:	2003      	movs	r0, #3
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	007ffffe 	.word	0x007ffffe

0800a9ec <_init>:
 800a9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ee:	bf00      	nop
 800a9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f2:	bc08      	pop	{r3}
 800a9f4:	469e      	mov	lr, r3
 800a9f6:	4770      	bx	lr

0800a9f8 <_fini>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	bf00      	nop
 800a9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fe:	bc08      	pop	{r3}
 800aa00:	469e      	mov	lr, r3
 800aa02:	4770      	bx	lr


srm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800a934  0800a934  0000b934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab18  0800ab18  0000c198  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab20  0800ab20  0000c198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab24  0800ab24  0000bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  0800ab28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000044  20000154  0800ac7c  0000c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0000c198  2**0
                  CONTENTS
 11 .bss          000022b4  20000198  20000198  0000c198  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000244c  2000244c  0000c198  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000c198  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012bf9  00000000  00000000  0000c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035f6  00000000  00000000  0001edc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  000223b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c09  00000000  00000000  000233b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f57  00000000  00000000  00023fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016cf7  00000000  00000000  00048f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3d2f  00000000  00000000  0005fc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000087  00000000  00000000  00133936  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004868  00000000  00000000  001339c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  00138228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000198 	.word	0x20000198
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a91c 	.word	0x0800a91c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	0800a91c 	.word	0x0800a91c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b988 	b.w	8000d24 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9d08      	ldr	r5, [sp, #32]
 8000a32:	468e      	mov	lr, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	4688      	mov	r8, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14a      	bne.n	8000ad2 <__udivmoddi4+0xa6>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4617      	mov	r7, r2
 8000a40:	d962      	bls.n	8000b08 <__udivmoddi4+0xdc>
 8000a42:	fab2 f682 	clz	r6, r2
 8000a46:	b14e      	cbz	r6, 8000a5c <__udivmoddi4+0x30>
 8000a48:	f1c6 0320 	rsb	r3, r6, #32
 8000a4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000a50:	fa20 f303 	lsr.w	r3, r0, r3
 8000a54:	40b7      	lsls	r7, r6
 8000a56:	ea43 0808 	orr.w	r8, r3, r8
 8000a5a:	40b4      	lsls	r4, r6
 8000a5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a60:	fa1f fc87 	uxth.w	ip, r7
 8000a64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a68:	0c23      	lsrs	r3, r4, #16
 8000a6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a72:	fb01 f20c 	mul.w	r2, r1, ip
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d909      	bls.n	8000a8e <__udivmoddi4+0x62>
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a80:	f080 80ea 	bcs.w	8000c58 <__udivmoddi4+0x22c>
 8000a84:	429a      	cmp	r2, r3
 8000a86:	f240 80e7 	bls.w	8000c58 <__udivmoddi4+0x22c>
 8000a8a:	3902      	subs	r1, #2
 8000a8c:	443b      	add	r3, r7
 8000a8e:	1a9a      	subs	r2, r3, r2
 8000a90:	b2a3      	uxth	r3, r4
 8000a92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aa2:	459c      	cmp	ip, r3
 8000aa4:	d909      	bls.n	8000aba <__udivmoddi4+0x8e>
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aac:	f080 80d6 	bcs.w	8000c5c <__udivmoddi4+0x230>
 8000ab0:	459c      	cmp	ip, r3
 8000ab2:	f240 80d3 	bls.w	8000c5c <__udivmoddi4+0x230>
 8000ab6:	443b      	add	r3, r7
 8000ab8:	3802      	subs	r0, #2
 8000aba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000abe:	eba3 030c 	sub.w	r3, r3, ip
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	b11d      	cbz	r5, 8000ace <__udivmoddi4+0xa2>
 8000ac6:	40f3      	lsrs	r3, r6
 8000ac8:	2200      	movs	r2, #0
 8000aca:	e9c5 3200 	strd	r3, r2, [r5]
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d905      	bls.n	8000ae2 <__udivmoddi4+0xb6>
 8000ad6:	b10d      	cbz	r5, 8000adc <__udivmoddi4+0xb0>
 8000ad8:	e9c5 0100 	strd	r0, r1, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e7f5      	b.n	8000ace <__udivmoddi4+0xa2>
 8000ae2:	fab3 f183 	clz	r1, r3
 8000ae6:	2900      	cmp	r1, #0
 8000ae8:	d146      	bne.n	8000b78 <__udivmoddi4+0x14c>
 8000aea:	4573      	cmp	r3, lr
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xc8>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 8105 	bhi.w	8000cfe <__udivmoddi4+0x2d2>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	4690      	mov	r8, r2
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d0e5      	beq.n	8000ace <__udivmoddi4+0xa2>
 8000b02:	e9c5 4800 	strd	r4, r8, [r5]
 8000b06:	e7e2      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	f000 8090 	beq.w	8000c2e <__udivmoddi4+0x202>
 8000b0e:	fab2 f682 	clz	r6, r2
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	f040 80a4 	bne.w	8000c60 <__udivmoddi4+0x234>
 8000b18:	1a8a      	subs	r2, r1, r2
 8000b1a:	0c03      	lsrs	r3, r0, #16
 8000b1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b20:	b280      	uxth	r0, r0
 8000b22:	b2bc      	uxth	r4, r7
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b32:	fb04 f20c 	mul.w	r2, r4, ip
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d907      	bls.n	8000b4a <__udivmoddi4+0x11e>
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x11c>
 8000b42:	429a      	cmp	r2, r3
 8000b44:	f200 80e0 	bhi.w	8000d08 <__udivmoddi4+0x2dc>
 8000b48:	46c4      	mov	ip, r8
 8000b4a:	1a9b      	subs	r3, r3, r2
 8000b4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b58:	fb02 f404 	mul.w	r4, r2, r4
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x144>
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x142>
 8000b68:	429c      	cmp	r4, r3
 8000b6a:	f200 80ca 	bhi.w	8000d02 <__udivmoddi4+0x2d6>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	1b1b      	subs	r3, r3, r4
 8000b72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000b78:	f1c1 0620 	rsb	r6, r1, #32
 8000b7c:	408b      	lsls	r3, r1
 8000b7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000b82:	431f      	orrs	r7, r3
 8000b84:	fa0e f401 	lsl.w	r4, lr, r1
 8000b88:	fa20 f306 	lsr.w	r3, r0, r6
 8000b8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b94:	4323      	orrs	r3, r4
 8000b96:	fa00 f801 	lsl.w	r8, r0, r1
 8000b9a:	fa1f fc87 	uxth.w	ip, r7
 8000b9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000ba2:	0c1c      	lsrs	r4, r3, #16
 8000ba4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ba8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x1a0>
 8000bb8:	193c      	adds	r4, r7, r4
 8000bba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bbe:	f080 809c 	bcs.w	8000cfa <__udivmoddi4+0x2ce>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f240 8099 	bls.w	8000cfa <__udivmoddi4+0x2ce>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	443c      	add	r4, r7
 8000bcc:	eba4 040e 	sub.w	r4, r4, lr
 8000bd0:	fa1f fe83 	uxth.w	lr, r3
 8000bd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000bdc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x1ce>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bee:	f080 8082 	bcs.w	8000cf6 <__udivmoddi4+0x2ca>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d97f      	bls.n	8000cf6 <__udivmoddi4+0x2ca>
 8000bf6:	3b02      	subs	r3, #2
 8000bf8:	443c      	add	r4, r7
 8000bfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bfe:	eba4 040c 	sub.w	r4, r4, ip
 8000c02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c06:	4564      	cmp	r4, ip
 8000c08:	4673      	mov	r3, lr
 8000c0a:	46e1      	mov	r9, ip
 8000c0c:	d362      	bcc.n	8000cd4 <__udivmoddi4+0x2a8>
 8000c0e:	d05f      	beq.n	8000cd0 <__udivmoddi4+0x2a4>
 8000c10:	b15d      	cbz	r5, 8000c2a <__udivmoddi4+0x1fe>
 8000c12:	ebb8 0203 	subs.w	r2, r8, r3
 8000c16:	eb64 0409 	sbc.w	r4, r4, r9
 8000c1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c22:	431e      	orrs	r6, r3
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	e9c5 6400 	strd	r6, r4, [r5]
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	e74f      	b.n	8000ace <__udivmoddi4+0xa2>
 8000c2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c32:	0c01      	lsrs	r1, r0, #16
 8000c34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c38:	b280      	uxth	r0, r0
 8000c3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4638      	mov	r0, r7
 8000c42:	463c      	mov	r4, r7
 8000c44:	46b8      	mov	r8, r7
 8000c46:	46be      	mov	lr, r7
 8000c48:	2620      	movs	r6, #32
 8000c4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c4e:	eba2 0208 	sub.w	r2, r2, r8
 8000c52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c56:	e766      	b.n	8000b26 <__udivmoddi4+0xfa>
 8000c58:	4601      	mov	r1, r0
 8000c5a:	e718      	b.n	8000a8e <__udivmoddi4+0x62>
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	e72c      	b.n	8000aba <__udivmoddi4+0x8e>
 8000c60:	f1c6 0220 	rsb	r2, r6, #32
 8000c64:	fa2e f302 	lsr.w	r3, lr, r2
 8000c68:	40b7      	lsls	r7, r6
 8000c6a:	40b1      	lsls	r1, r6
 8000c6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	430a      	orrs	r2, r1
 8000c76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c7a:	b2bc      	uxth	r4, r7
 8000c7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c80:	0c11      	lsrs	r1, r2, #16
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb08 f904 	mul.w	r9, r8, r4
 8000c8a:	40b0      	lsls	r0, r6
 8000c8c:	4589      	cmp	r9, r1
 8000c8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c92:	b280      	uxth	r0, r0
 8000c94:	d93e      	bls.n	8000d14 <__udivmoddi4+0x2e8>
 8000c96:	1879      	adds	r1, r7, r1
 8000c98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c9c:	d201      	bcs.n	8000ca2 <__udivmoddi4+0x276>
 8000c9e:	4589      	cmp	r9, r1
 8000ca0:	d81f      	bhi.n	8000ce2 <__udivmoddi4+0x2b6>
 8000ca2:	eba1 0109 	sub.w	r1, r1, r9
 8000ca6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000caa:	fb09 f804 	mul.w	r8, r9, r4
 8000cae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cb2:	b292      	uxth	r2, r2
 8000cb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cb8:	4542      	cmp	r2, r8
 8000cba:	d229      	bcs.n	8000d10 <__udivmoddi4+0x2e4>
 8000cbc:	18ba      	adds	r2, r7, r2
 8000cbe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cc2:	d2c4      	bcs.n	8000c4e <__udivmoddi4+0x222>
 8000cc4:	4542      	cmp	r2, r8
 8000cc6:	d2c2      	bcs.n	8000c4e <__udivmoddi4+0x222>
 8000cc8:	f1a9 0102 	sub.w	r1, r9, #2
 8000ccc:	443a      	add	r2, r7
 8000cce:	e7be      	b.n	8000c4e <__udivmoddi4+0x222>
 8000cd0:	45f0      	cmp	r8, lr
 8000cd2:	d29d      	bcs.n	8000c10 <__udivmoddi4+0x1e4>
 8000cd4:	ebbe 0302 	subs.w	r3, lr, r2
 8000cd8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cdc:	3801      	subs	r0, #1
 8000cde:	46e1      	mov	r9, ip
 8000ce0:	e796      	b.n	8000c10 <__udivmoddi4+0x1e4>
 8000ce2:	eba7 0909 	sub.w	r9, r7, r9
 8000ce6:	4449      	add	r1, r9
 8000ce8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf0:	fb09 f804 	mul.w	r8, r9, r4
 8000cf4:	e7db      	b.n	8000cae <__udivmoddi4+0x282>
 8000cf6:	4673      	mov	r3, lr
 8000cf8:	e77f      	b.n	8000bfa <__udivmoddi4+0x1ce>
 8000cfa:	4650      	mov	r0, sl
 8000cfc:	e766      	b.n	8000bcc <__udivmoddi4+0x1a0>
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e6fd      	b.n	8000afe <__udivmoddi4+0xd2>
 8000d02:	443b      	add	r3, r7
 8000d04:	3a02      	subs	r2, #2
 8000d06:	e733      	b.n	8000b70 <__udivmoddi4+0x144>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	443b      	add	r3, r7
 8000d0e:	e71c      	b.n	8000b4a <__udivmoddi4+0x11e>
 8000d10:	4649      	mov	r1, r9
 8000d12:	e79c      	b.n	8000c4e <__udivmoddi4+0x222>
 8000d14:	eba1 0109 	sub.w	r1, r1, r9
 8000d18:	46c4      	mov	ip, r8
 8000d1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1e:	fb09 f804 	mul.w	r8, r9, r4
 8000d22:	e7c4      	b.n	8000cae <__udivmoddi4+0x282>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d3c:	4a21      	ldr	r2, [pc, #132]	@ (8000dc4 <MX_ADC1_Init+0x9c>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d6a:	4a17      	ldr	r2, [pc, #92]	@ (8000dc8 <MX_ADC1_Init+0xa0>)
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000d8a:	f000 fe73 	bl	8001a74 <HAL_ADC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d94:	f000 fcfe 	bl	8001794 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_ADC1_Init+0x98>)
 8000daa:	f001 f845 	bl	8001e38 <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000db4:	f000 fcee 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200001b4 	.word	0x200001b4
 8000dc4:	40012000 	.word	0x40012000
 8000dc8:	0f000001 	.word	0x0f000001

08000dcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_ADC_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d127      	bne.n	8000e3e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Water_Pin;
 8000e26:	2340      	movs	r3, #64	@ 0x40
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Water_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_ADC_MspInit+0x84>)
 8000e3a:	f001 fb2d 	bl	8002498 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a1e      	ldr	r2, [pc, #120]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a10      	ldr	r2, [pc, #64]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_GPIO_Init+0x98>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DS18B20_Pin|Pump_Relay_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2130      	movs	r1, #48	@ 0x30
 8000ec2:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <MX_GPIO_Init+0x9c>)
 8000ec4:	f001 fc9c 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DS18B20_Pin Pump_Relay_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin|Pump_Relay_Pin;
 8000ec8:	2330      	movs	r3, #48	@ 0x30
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <MX_GPIO_Init+0x9c>)
 8000ee0:	f001 fada 	bl	8002498 <HAL_GPIO_Init>

}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <MX_I2C1_Init+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f00:	4a12      	ldr	r2, [pc, #72]	@ (8000f4c <MX_I2C1_Init+0x58>)
 8000f02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_I2C1_Init+0x50>)
 8000f32:	f001 fc7f 	bl	8002834 <HAL_I2C_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f3c:	f000 fc2a 	bl	8001794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001fc 	.word	0x200001fc
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	000186a0 	.word	0x000186a0

08000f50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <HAL_I2C_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12b      	bne.n	8000fca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f8e:	23c0      	movs	r3, #192	@ 0xc0
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f92:	2312      	movs	r3, #18
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000faa:	f001 fa75 	bl	8002498 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <usb_printf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* ---------- USB print helper (CDC) ---------- */
static void usb_printf(const char *fmt, ...)
{
 8000fe0:	b40f      	push	{r0, r1, r2, r3}
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b0aa      	sub	sp, #168	@ 0xa8
 8000fe6:	af00      	add	r7, sp, #0
  char buf[160];
  va_list ap;
  va_start(ap, fmt);
 8000fe8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fec:	607b      	str	r3, [r7, #4]
  vsnprintf(buf, sizeof(buf), fmt, ap);
 8000fee:	f107 0008 	add.w	r0, r7, #8
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000ff8:	21a0      	movs	r1, #160	@ 0xa0
 8000ffa:	f008 ff7b 	bl	8009ef4 <vsniprintf>
  va_end(ap);

  /* wait if busy */
  while (CDC_Transmit_FS((uint8_t *)buf, (uint16_t)strlen(buf)) == USBD_BUSY)
 8000ffe:	e002      	b.n	8001006 <usb_printf+0x26>
  {
    HAL_Delay(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f000 fd13 	bl	8001a2c <HAL_Delay>
  while (CDC_Transmit_FS((uint8_t *)buf, (uint16_t)strlen(buf)) == USBD_BUSY)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff f8e0 	bl	80001d0 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	b29a      	uxth	r2, r3
 8001014:	f107 0308 	add.w	r3, r7, #8
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f007 ff00 	bl	8008e20 <CDC_Transmit_FS>
 8001020:	4603      	mov	r3, r0
 8001022:	2b01      	cmp	r3, #1
 8001024:	d0ec      	beq.n	8001000 <usb_printf+0x20>
  }
  HAL_Delay(2); /* small pause to allow host to receive (safe) */
 8001026:	2002      	movs	r0, #2
 8001028:	f000 fd00 	bl	8001a2c <HAL_Delay>
}
 800102c:	bf00      	nop
 800102e:	37a8      	adds	r7, #168	@ 0xa8
 8001030:	46bd      	mov	sp, r7
 8001032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001036:	b004      	add	sp, #16
 8001038:	4770      	bx	lr

0800103a <short_delay_cycles>:
/* ---------- simple short delay function (rough micro delays without timers) ----------
   This uses a small empty loop tuned to be small. It's not cycle-accurate across
   all optimization levels and compilers, but avoids hardware timers as requested.
   If you need accurate timing, request a DWT/us-timer version. */
static void short_delay_cycles(volatile uint32_t cycles)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  while (cycles--) { __NOP(); }
 8001042:	e000      	b.n	8001046 <short_delay_cycles+0xc>
 8001044:	bf00      	nop
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f9      	bne.n	8001044 <short_delay_cycles+0xa>
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <ds18b20_pin_output>:
/* ---------- DS18B20 1-Wire (bit-banged) on PA4 ----------
   Note: uses open-drain like behavior by switching pin mode between output (drive low)
   and input (release line so pull-up can pull high). You MUST have a 4.7k pull-up on DQ.
*/
static void ds18b20_pin_output(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  gpio.Pin = DS18B20_PIN;
 8001074:	2310      	movs	r3, #16
 8001076:	607b      	str	r3, [r7, #4]
  gpio.Mode = GPIO_MODE_OUTPUT_PP; /* we'll drive low when needed, set high by releasing */
 8001078:	2301      	movs	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_PORT, &gpio);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <ds18b20_pin_output+0x38>)
 800108a:	f001 fa05 	bl	8002498 <HAL_GPIO_Init>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020000 	.word	0x40020000

0800109c <ds18b20_pin_input>:

static void ds18b20_pin_input(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  gpio.Pin = DS18B20_PIN;
 80010b0:	2310      	movs	r3, #16
 80010b2:	607b      	str	r3, [r7, #4]
  gpio.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  gpio.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DS18B20_PORT, &gpio);
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4803      	ldr	r0, [pc, #12]	@ (80010d0 <ds18b20_pin_input+0x34>)
 80010c2:	f001 f9e9 	bl	8002498 <HAL_GPIO_Init>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020000 	.word	0x40020000

080010d4 <ds18b20_reset>:

/* Reset pulse: master pulls low for ~480us, then releases and reads presence */
static uint8_t ds18b20_reset(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  uint8_t presence = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]

  ds18b20_pin_output();
 80010de:	f7ff ffbf 	bl	8001060 <ds18b20_pin_output>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	480f      	ldr	r0, [pc, #60]	@ (8001124 <ds18b20_reset+0x50>)
 80010e8:	f001 fb8a 	bl	8002800 <HAL_GPIO_WritePin>
  /* ~480us low: approximate with HAL_Delay(1) = 1 ms is longer but safe; use short loops for ~600 cycles */
  /* We use 8000 cycles of NOP which is a rough ~?us depending on clock - not exact.
     To be safe and portable, use HAL_Delay(1) here (1 ms) which is longer than spec but safe. */
  HAL_Delay(1);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fc9d 	bl	8001a2c <HAL_Delay>

  ds18b20_pin_input(); /* release the bus */
 80010f2:	f7ff ffd3 	bl	800109c <ds18b20_pin_input>
  /* Wait 60-70us for presence window; approximate with small cycles */
  short_delay_cycles(4000); /* small busy loop */
 80010f6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80010fa:	f7ff ff9e 	bl	800103a <short_delay_cycles>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN) == GPIO_PIN_RESET) presence = 1;
 80010fe:	2110      	movs	r1, #16
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <ds18b20_reset+0x50>)
 8001102:	f001 fb65 	bl	80027d0 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <ds18b20_reset+0x3c>
 800110c:	2301      	movs	r3, #1
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Wait for end of presence (recovery) */
  short_delay_cycles(4000);
 8001110:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001114:	f7ff ff91 	bl	800103a <short_delay_cycles>
  return presence;
 8001118:	79fb      	ldrb	r3, [r7, #7]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020000 	.word	0x40020000

08001128 <ds18b20_write_bit>:

/* Write single bit */
static void ds18b20_write_bit(uint8_t bit)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  ds18b20_pin_output();
 8001132:	f7ff ff95 	bl	8001060 <ds18b20_pin_output>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2110      	movs	r1, #16
 800113a:	480f      	ldr	r0, [pc, #60]	@ (8001178 <ds18b20_write_bit+0x50>)
 800113c:	f001 fb60 	bl	8002800 <HAL_GPIO_WritePin>

  if (bit) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <ds18b20_write_bit+0x34>
    /* write 1: release quickly (<15us) */
    short_delay_cycles(1500);
 8001146:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800114a:	f7ff ff76 	bl	800103a <short_delay_cycles>
    ds18b20_pin_input(); /* release bus to let pull-up raise line */
 800114e:	f7ff ffa5 	bl	800109c <ds18b20_pin_input>
    /* slot rest */
    short_delay_cycles(7000);
 8001152:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001156:	f7ff ff70 	bl	800103a <short_delay_cycles>
    /* write 0: hold low for ~60us */
    short_delay_cycles(10000);
    ds18b20_pin_input();
    short_delay_cycles(2000);
  }
}
 800115a:	e009      	b.n	8001170 <ds18b20_write_bit+0x48>
    short_delay_cycles(10000);
 800115c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001160:	f7ff ff6b 	bl	800103a <short_delay_cycles>
    ds18b20_pin_input();
 8001164:	f7ff ff9a 	bl	800109c <ds18b20_pin_input>
    short_delay_cycles(2000);
 8001168:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800116c:	f7ff ff65 	bl	800103a <short_delay_cycles>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020000 	.word	0x40020000

0800117c <ds18b20_read_bit>:

/* Read single bit */
static uint8_t ds18b20_read_bit(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  uint8_t bit = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
  ds18b20_pin_output();
 8001186:	f7ff ff6b 	bl	8001060 <ds18b20_pin_output>
  HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2110      	movs	r1, #16
 800118e:	480f      	ldr	r0, [pc, #60]	@ (80011cc <ds18b20_read_bit+0x50>)
 8001190:	f001 fb36 	bl	8002800 <HAL_GPIO_WritePin>
  /* short low */
  short_delay_cycles(1200);
 8001194:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8001198:	f7ff ff4f 	bl	800103a <short_delay_cycles>
  ds18b20_pin_input(); /* master releases and reads */
 800119c:	f7ff ff7e 	bl	800109c <ds18b20_pin_input>
  short_delay_cycles(2500);
 80011a0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80011a4:	f7ff ff49 	bl	800103a <short_delay_cycles>
  if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN) == GPIO_PIN_SET) bit = 1;
 80011a8:	2110      	movs	r1, #16
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <ds18b20_read_bit+0x50>)
 80011ac:	f001 fb10 	bl	80027d0 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <ds18b20_read_bit+0x3e>
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
  /* finish slot */
  short_delay_cycles(7000);
 80011ba:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80011be:	f7ff ff3c 	bl	800103a <short_delay_cycles>
  return bit;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020000 	.word	0x40020000

080011d0 <ds18b20_write_byte>:

/* Write byte (LSB first) */
static void ds18b20_write_byte(uint8_t val)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; ++i) {
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e00c      	b.n	80011fa <ds18b20_write_byte+0x2a>
    ds18b20_write_bit(val & 0x01);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff9d 	bl	8001128 <ds18b20_write_bit>
    val >>= 1;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	085b      	lsrs	r3, r3, #1
 80011f2:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; ++i) {
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	3301      	adds	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d9ef      	bls.n	80011e0 <ds18b20_write_byte+0x10>
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <ds18b20_read_byte>:

/* Read byte (LSB first) */
static uint8_t ds18b20_read_byte(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
  uint8_t val = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; ++i) {
 8001214:	2300      	movs	r3, #0
 8001216:	71bb      	strb	r3, [r7, #6]
 8001218:	e00f      	b.n	800123a <ds18b20_read_byte+0x30>
    val |= (ds18b20_read_bit() << i);
 800121a:	f7ff ffaf 	bl	800117c <ds18b20_read_bit>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	b25a      	sxtb	r2, r3
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	4313      	orrs	r3, r2
 8001230:	b25b      	sxtb	r3, r3
 8001232:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; ++i) {
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	3301      	adds	r3, #1
 8001238:	71bb      	strb	r3, [r7, #6]
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	2b07      	cmp	r3, #7
 800123e:	d9ec      	bls.n	800121a <ds18b20_read_byte+0x10>
  }
  return val;
 8001240:	79fb      	ldrb	r3, [r7, #7]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <ds18b20_get_temperature>:

/* Get temperature from DS18B20: returns Celsius (float) or very negative on error */
static float ds18b20_get_temperature(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  uint8_t lsb, msb;
  int16_t raw;

  if (!ds18b20_reset()) {
 8001252:	f7ff ff3f 	bl	80010d4 <ds18b20_reset>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <ds18b20_get_temperature+0x16>
    /* no presence — return clearly invalid temperature */
    return -1000.0f;
 800125c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80012d0 <ds18b20_get_temperature+0x84>
 8001260:	e031      	b.n	80012c6 <ds18b20_get_temperature+0x7a>
  }

  ds18b20_write_byte(0xCC); /* SKIP ROM (only one device) */
 8001262:	20cc      	movs	r0, #204	@ 0xcc
 8001264:	f7ff ffb4 	bl	80011d0 <ds18b20_write_byte>
  ds18b20_write_byte(0x44); /* CONVERT T */
 8001268:	2044      	movs	r0, #68	@ 0x44
 800126a:	f7ff ffb1 	bl	80011d0 <ds18b20_write_byte>

  /* Conversion time: up to 750 ms for 12-bit. We'll wait 750ms (safe) */
  HAL_Delay(750);
 800126e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001272:	f000 fbdb 	bl	8001a2c <HAL_Delay>

  if (!ds18b20_reset()) return -1000.0f;
 8001276:	f7ff ff2d 	bl	80010d4 <ds18b20_reset>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <ds18b20_get_temperature+0x3a>
 8001280:	eddf 7a13 	vldr	s15, [pc, #76]	@ 80012d0 <ds18b20_get_temperature+0x84>
 8001284:	e01f      	b.n	80012c6 <ds18b20_get_temperature+0x7a>
  ds18b20_write_byte(0xCC); /* SKIP ROM */
 8001286:	20cc      	movs	r0, #204	@ 0xcc
 8001288:	f7ff ffa2 	bl	80011d0 <ds18b20_write_byte>
  ds18b20_write_byte(0xBE); /* READ SCRATCHPAD */
 800128c:	20be      	movs	r0, #190	@ 0xbe
 800128e:	f7ff ff9f 	bl	80011d0 <ds18b20_write_byte>

  lsb = ds18b20_read_byte();
 8001292:	f7ff ffba 	bl	800120a <ds18b20_read_byte>
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  msb = ds18b20_read_byte();
 800129a:	f7ff ffb6 	bl	800120a <ds18b20_read_byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	71bb      	strb	r3, [r7, #6]

  raw = (int16_t)((msb << 8) | lsb);
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	4313      	orrs	r3, r2
 80012b0:	80bb      	strh	r3, [r7, #4]

  /* Temperature resolution is 1/16 C (12-bit default) */
  return ((float)raw) / 16.0f;
 80012b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012be:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80012c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
}
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	c47a0000 	.word	0xc47a0000

080012d4 <read_adxl345>:

/* ---------- ADXL345 functions (I2C1) ---------- */
static HAL_StatusTypeDef read_adxl345(vector3_t *acc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af04      	add	r7, sp, #16
 80012da:	6078      	str	r0, [r7, #4]
  uint8_t buf[6];
  if (HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, ADXL345_REG_DATAX0, 1, buf, 6, 100) != HAL_OK)
 80012dc:	2364      	movs	r3, #100	@ 0x64
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2306      	movs	r3, #6
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	2232      	movs	r2, #50	@ 0x32
 80012ee:	21a6      	movs	r1, #166	@ 0xa6
 80012f0:	4815      	ldr	r0, [pc, #84]	@ (8001348 <read_adxl345+0x74>)
 80012f2:	f001 fcdd 	bl	8002cb0 <HAL_I2C_Mem_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <read_adxl345+0x2c>
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e01e      	b.n	800133e <read_adxl345+0x6a>

  acc->x = (int16_t)((buf[1] << 8) | buf[0]);
 8001300:	7a7b      	ldrb	r3, [r7, #9]
 8001302:	b21b      	sxth	r3, r3
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21a      	sxth	r2, r3
 8001308:	7a3b      	ldrb	r3, [r7, #8]
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	801a      	strh	r2, [r3, #0]
  acc->y = (int16_t)((buf[3] << 8) | buf[2]);
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	b21b      	sxth	r3, r3
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	7abb      	ldrb	r3, [r7, #10]
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	805a      	strh	r2, [r3, #2]
  acc->z = (int16_t)((buf[5] << 8) | buf[4]);
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	b21b      	sxth	r3, r3
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	809a      	strh	r2, [r3, #4]
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001fc 	.word	0x200001fc

0800134c <fill_acc_buffer>:

static void fill_acc_buffer(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
  vector3_t acc;
  for (int i = 0; i < (ACC_BUFFER_SIZE / 3); ++i) {
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	e04a      	b.n	80013ee <fill_acc_buffer+0xa2>
    while (read_adxl345(&acc) != HAL_OK) { HAL_Delay(1); }
 8001358:	2001      	movs	r0, #1
 800135a:	f000 fb67 	bl	8001a2c <HAL_Delay>
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ffb7 	bl	80012d4 <read_adxl345>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f5      	bne.n	8001358 <fill_acc_buffer+0xc>
    acc_buffer[i*3 + 0] = acc.x * 0.0039f; /* assuming +/-2g -> 3.9mg/LSB */
 800136c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001400 <fill_acc_buffer+0xb4>
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <fill_acc_buffer+0xb8>)
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[i*3 + 1] = acc.y * 0.0039f;
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	3301      	adds	r3, #1
 80013a8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001400 <fill_acc_buffer+0xb4>
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b0:	4a14      	ldr	r2, [pc, #80]	@ (8001404 <fill_acc_buffer+0xb8>)
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	edc3 7a00 	vstr	s15, [r3]
    acc_buffer[i*3 + 2] = acc.z * 0.0039f;
 80013ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013be:	ee07 3a90 	vmov	s15, r3
 80013c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	3302      	adds	r3, #2
 80013d0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001400 <fill_acc_buffer+0xb4>
 80013d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <fill_acc_buffer+0xb8>)
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 fb22 	bl	8001a2c <HAL_Delay>
  for (int i = 0; i < (ACC_BUFFER_SIZE / 3); ++i) {
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3301      	adds	r3, #1
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b63      	cmp	r3, #99	@ 0x63
 80013f2:	ddb4      	ble.n	800135e <fill_acc_buffer+0x12>
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	3b7f9724 	.word	0x3b7f9724
 8001404:	20000250 	.word	0x20000250

08001408 <read_water_level_adc>:

/* ---------- ADC water level ---------- */
static uint16_t read_water_level_adc(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
  sConfig.Channel = WATER_SENSOR_CHANNEL;
 800141a:	2306      	movs	r3, #6
 800141c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	@ (800145c <read_water_level_adc+0x54>)
 800142c:	f000 fd04 	bl	8001e38 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8001430:	480a      	ldr	r0, [pc, #40]	@ (800145c <read_water_level_adc+0x54>)
 8001432:	f000 fb63 	bl	8001afc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001436:	f04f 31ff 	mov.w	r1, #4294967295
 800143a:	4808      	ldr	r0, [pc, #32]	@ (800145c <read_water_level_adc+0x54>)
 800143c:	f000 fc63 	bl	8001d06 <HAL_ADC_PollForConversion>
  uint16_t val = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <read_water_level_adc+0x54>)
 8001442:	f000 fceb 	bl	8001e1c <HAL_ADC_GetValue>
 8001446:	4603      	mov	r3, r0
 8001448:	82fb      	strh	r3, [r7, #22]
  HAL_ADC_Stop(&hadc1);
 800144a:	4804      	ldr	r0, [pc, #16]	@ (800145c <read_water_level_adc+0x54>)
 800144c:	f000 fc28 	bl	8001ca0 <HAL_ADC_Stop>
  return val;
 8001450:	8afb      	ldrh	r3, [r7, #22]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200001b4 	.word	0x200001b4

08001460 <calibrate_full_water_level>:

static void calibrate_full_water_level(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  usb_printf("Calibrating full water level (stand level) in 2s...\r\n");
 8001464:	480d      	ldr	r0, [pc, #52]	@ (800149c <calibrate_full_water_level+0x3c>)
 8001466:	f7ff fdbb 	bl	8000fe0 <usb_printf>
  HAL_Delay(2000);
 800146a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800146e:	f000 fadd 	bl	8001a2c <HAL_Delay>
  water_level_full = read_water_level_adc();
 8001472:	f7ff ffc9 	bl	8001408 <read_water_level_adc>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <calibrate_full_water_level+0x40>)
 800147c:	801a      	strh	r2, [r3, #0]
  if (water_level_full == 0) water_level_full = 1; /* safety */
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <calibrate_full_water_level+0x40>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <calibrate_full_water_level+0x2c>
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <calibrate_full_water_level+0x40>)
 8001488:	2201      	movs	r2, #1
 800148a:	801a      	strh	r2, [r3, #0]
  usb_printf("Calibrated full level ADC = %u\r\n", water_level_full);
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <calibrate_full_water_level+0x40>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <calibrate_full_water_level+0x44>)
 8001494:	f7ff fda4 	bl	8000fe0 <usb_printf>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800a934 	.word	0x0800a934
 80014a0:	20000000 	.word	0x20000000
 80014a4:	0800a96c 	.word	0x0800a96c

080014a8 <pump_on>:

static void pump_on(void)  { HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_PIN, GPIO_PIN_SET); }
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	2201      	movs	r2, #1
 80014ae:	2120      	movs	r1, #32
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <pump_on+0x14>)
 80014b2:	f001 f9a5 	bl	8002800 <HAL_GPIO_WritePin>
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020000 	.word	0x40020000

080014c0 <pump_off>:
static void pump_off(void) { HAL_GPIO_WritePin(PUMP_GPIO_PORT, PUMP_PIN, GPIO_PIN_RESET); }
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	2120      	movs	r1, #32
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <pump_off+0x14>)
 80014ca:	f001 f999 	bl	8002800 <HAL_GPIO_WritePin>
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020000 	.word	0x40020000

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08b      	sub	sp, #44	@ 0x2c
 80014dc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80014de:	f000 fa33 	bl	8001948 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  SystemClock_Config();
 80014e2:	f000 f8ed 	bl	80016c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f7ff fcb5 	bl	8000e54 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014ea:	f7ff fc1d 	bl	8000d28 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014ee:	f7ff fd01 	bl	8000ef4 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80014f2:	f007 fbd7 	bl	8008ca4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /* Basic USB ready message */
  HAL_Delay(200);
 80014f6:	20c8      	movs	r0, #200	@ 0xc8
 80014f8:	f000 fa98 	bl	8001a2c <HAL_Delay>
  usb_printf("STM32F407VG USB CDC Ready\r\n");
 80014fc:	485d      	ldr	r0, [pc, #372]	@ (8001674 <main+0x19c>)
 80014fe:	f7ff fd6f 	bl	8000fe0 <usb_printf>

  /* Power ADXL345: set measure bit in POWER_CTL (0x2D = 0x08) */
  {
    uint8_t cmd = 0x08;
 8001502:	2308      	movs	r3, #8
 8001504:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, ADXL345_REG_POWER_CTL, 1, &cmd, 1, 100);
 8001506:	2364      	movs	r3, #100	@ 0x64
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2301      	movs	r3, #1
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	222d      	movs	r2, #45	@ 0x2d
 8001516:	21a6      	movs	r1, #166	@ 0xa6
 8001518:	4857      	ldr	r0, [pc, #348]	@ (8001678 <main+0x1a0>)
 800151a:	f001 facf 	bl	8002abc <HAL_I2C_Mem_Write>
    HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	@ 0x64
 8001520:	f000 fa84 	bl	8001a2c <HAL_Delay>
  }

  /* Initialize NanoEdge AI anomaly detection */
  if (neai_anomalydetection_init() == NEAI_OK) {
 8001524:	f008 fc4e 	bl	8009dc4 <neai_anomalydetection_init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <main+0x5e>
    usb_printf("NanoEdgeAI initialized\r\n");
 800152e:	4853      	ldr	r0, [pc, #332]	@ (800167c <main+0x1a4>)
 8001530:	f7ff fd56 	bl	8000fe0 <usb_printf>
 8001534:	e002      	b.n	800153c <main+0x64>
  } else {
    usb_printf("NanoEdgeAI init ERROR\r\n");
 8001536:	4852      	ldr	r0, [pc, #328]	@ (8001680 <main+0x1a8>)
 8001538:	f7ff fd52 	bl	8000fe0 <usb_printf>
  }

  /* Learning phase */
  for (uint16_t i = 0; i < 20; ++i) {
 800153c:	2300      	movs	r3, #0
 800153e:	82fb      	strh	r3, [r7, #22]
 8001540:	e010      	b.n	8001564 <main+0x8c>
    usb_printf("Learning iteration %u/20\r\n", (unsigned)i+1);
 8001542:	8afb      	ldrh	r3, [r7, #22]
 8001544:	3301      	adds	r3, #1
 8001546:	4619      	mov	r1, r3
 8001548:	484e      	ldr	r0, [pc, #312]	@ (8001684 <main+0x1ac>)
 800154a:	f7ff fd49 	bl	8000fe0 <usb_printf>
    fill_acc_buffer();
 800154e:	f7ff fefd 	bl	800134c <fill_acc_buffer>
    neai_anomalydetection_learn(acc_buffer);
 8001552:	484d      	ldr	r0, [pc, #308]	@ (8001688 <main+0x1b0>)
 8001554:	f008 f8d4 	bl	8009700 <neai_anomalydetection_learn>
    HAL_Delay(50);
 8001558:	2032      	movs	r0, #50	@ 0x32
 800155a:	f000 fa67 	bl	8001a2c <HAL_Delay>
  for (uint16_t i = 0; i < 20; ++i) {
 800155e:	8afb      	ldrh	r3, [r7, #22]
 8001560:	3301      	adds	r3, #1
 8001562:	82fb      	strh	r3, [r7, #22]
 8001564:	8afb      	ldrh	r3, [r7, #22]
 8001566:	2b13      	cmp	r3, #19
 8001568:	d9eb      	bls.n	8001542 <main+0x6a>
  }
  usb_printf("Learning finished\r\n");
 800156a:	4848      	ldr	r0, [pc, #288]	@ (800168c <main+0x1b4>)
 800156c:	f7ff fd38 	bl	8000fe0 <usb_printf>

  /* Calibrate water full level */
  calibrate_full_water_level();
 8001570:	f7ff ff76 	bl	8001460 <calibrate_full_water_level>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* 1) Anomaly detection */
    fill_acc_buffer();
 8001574:	f7ff feea 	bl	800134c <fill_acc_buffer>
    neai_anomalydetection_detect(acc_buffer, &neai_similarity);
 8001578:	4945      	ldr	r1, [pc, #276]	@ (8001690 <main+0x1b8>)
 800157a:	4843      	ldr	r0, [pc, #268]	@ (8001688 <main+0x1b0>)
 800157c:	f008 faa4 	bl	8009ac8 <neai_anomalydetection_detect>
    if (neai_similarity >= 90) {
 8001580:	4b43      	ldr	r3, [pc, #268]	@ (8001690 <main+0x1b8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b59      	cmp	r3, #89	@ 0x59
 8001586:	d906      	bls.n	8001596 <main+0xbe>
      usb_printf("NOMINAL,%u\r\n", (unsigned)neai_similarity);
 8001588:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <main+0x1b8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	4841      	ldr	r0, [pc, #260]	@ (8001694 <main+0x1bc>)
 8001590:	f7ff fd26 	bl	8000fe0 <usb_printf>
 8001594:	e005      	b.n	80015a2 <main+0xca>
    } else {
      usb_printf("ANOMALY,%u\r\n", (unsigned)neai_similarity);
 8001596:	4b3e      	ldr	r3, [pc, #248]	@ (8001690 <main+0x1b8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	483e      	ldr	r0, [pc, #248]	@ (8001698 <main+0x1c0>)
 800159e:	f7ff fd1f 	bl	8000fe0 <usb_printf>
    }

    /* 2) Water level read and pump control */
    {
      uint16_t wl = read_water_level_adc();
 80015a2:	f7ff ff31 	bl	8001408 <read_water_level_adc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	81fb      	strh	r3, [r7, #14]
      float percent = (100.0f * (float)wl) / (float)water_level_full;
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800169c <main+0x1c4>
 80015b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <main+0x1c8>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	edc7 7a04 	vstr	s15, [r7, #16]
      if (percent < 0.0f) percent = 0.0f;
 80015d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015dc:	d502      	bpl.n	80015e4 <main+0x10c>
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
      if (percent > 100.0f) percent = 100.0f;
 80015e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800169c <main+0x1c4>
 80015ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	dd01      	ble.n	80015fa <main+0x122>
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <main+0x1cc>)
 80015f8:	613b      	str	r3, [r7, #16]
      usb_printf("WaterLevel,%u,%.2f%%\r\n", wl, percent);
 80015fa:	89fc      	ldrh	r4, [r7, #14]
 80015fc:	6938      	ldr	r0, [r7, #16]
 80015fe:	f7ff f8cd 	bl	800079c <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4621      	mov	r1, r4
 8001608:	4827      	ldr	r0, [pc, #156]	@ (80016a8 <main+0x1d0>)
 800160a:	f7ff fce9 	bl	8000fe0 <usb_printf>

      if (percent < (float)WATER_LOW_THRESHOLD_PERCENT) {
 800160e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001612:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d505      	bpl.n	800162c <main+0x154>
        pump_on();
 8001620:	f7ff ff42 	bl	80014a8 <pump_on>
        usb_printf("Pump ON\r\n");
 8001624:	4821      	ldr	r0, [pc, #132]	@ (80016ac <main+0x1d4>)
 8001626:	f7ff fcdb 	bl	8000fe0 <usb_printf>
 800162a:	e004      	b.n	8001636 <main+0x15e>
      } else {
        pump_off();
 800162c:	f7ff ff48 	bl	80014c0 <pump_off>
        usb_printf("Pump OFF\r\n");
 8001630:	481f      	ldr	r0, [pc, #124]	@ (80016b0 <main+0x1d8>)
 8001632:	f7ff fcd5 	bl	8000fe0 <usb_printf>
      }
    }

    /* 3) DS18B20 temperature */
    {
      float t = ds18b20_get_temperature();
 8001636:	f7ff fe09 	bl	800124c <ds18b20_get_temperature>
 800163a:	ed87 0a02 	vstr	s0, [r7, #8]
      if (t < -500.0f) {
 800163e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001642:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80016b4 <main+0x1dc>
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	d503      	bpl.n	8001658 <main+0x180>
        usb_printf("WaterTemp,ERR\r\n");
 8001650:	4819      	ldr	r0, [pc, #100]	@ (80016b8 <main+0x1e0>)
 8001652:	f7ff fcc5 	bl	8000fe0 <usb_printf>
 8001656:	e007      	b.n	8001668 <main+0x190>
      } else {
        usb_printf("WaterTemp,%.2fC\r\n", t);
 8001658:	68b8      	ldr	r0, [r7, #8]
 800165a:	f7ff f89f 	bl	800079c <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4816      	ldr	r0, [pc, #88]	@ (80016bc <main+0x1e4>)
 8001664:	f7ff fcbc 	bl	8000fe0 <usb_printf>
      }
    }

    HAL_Delay(1000); /* main loop delay */
 8001668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800166c:	f000 f9de 	bl	8001a2c <HAL_Delay>
    fill_acc_buffer();
 8001670:	e780      	b.n	8001574 <main+0x9c>
 8001672:	bf00      	nop
 8001674:	0800a990 	.word	0x0800a990
 8001678:	200001fc 	.word	0x200001fc
 800167c:	0800a9ac 	.word	0x0800a9ac
 8001680:	0800a9c8 	.word	0x0800a9c8
 8001684:	0800a9e0 	.word	0x0800a9e0
 8001688:	20000250 	.word	0x20000250
 800168c:	0800a9fc 	.word	0x0800a9fc
 8001690:	20000700 	.word	0x20000700
 8001694:	0800aa10 	.word	0x0800aa10
 8001698:	0800aa20 	.word	0x0800aa20
 800169c:	42c80000 	.word	0x42c80000
 80016a0:	20000000 	.word	0x20000000
 80016a4:	42c80000 	.word	0x42c80000
 80016a8:	0800aa30 	.word	0x0800aa30
 80016ac:	0800aa48 	.word	0x0800aa48
 80016b0:	0800aa54 	.word	0x0800aa54
 80016b4:	c3fa0000 	.word	0xc3fa0000
 80016b8:	0800aa60 	.word	0x0800aa60
 80016bc:	0800aa70 	.word	0x0800aa70

080016c0 <SystemClock_Config>:

/* SystemClock_Config kept as generated by CubeMX; if your project uses a different
   PLL values you previously set, keep those. This file uses the standard CubeMX
   SystemClock_Config (user-provided in your template). */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b094      	sub	sp, #80	@ 0x50
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0320 	add.w	r3, r7, #32
 80016ca:	2230      	movs	r2, #48	@ 0x30
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f008 fc1e 	bl	8009f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b28      	ldr	r3, [pc, #160]	@ (800178c <SystemClock_Config+0xcc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	4a27      	ldr	r2, [pc, #156]	@ (800178c <SystemClock_Config+0xcc>)
 80016ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f4:	4b25      	ldr	r3, [pc, #148]	@ (800178c <SystemClock_Config+0xcc>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a21      	ldr	r2, [pc, #132]	@ (8001790 <SystemClock_Config+0xd0>)
 800170a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <SystemClock_Config+0xd0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800171c:	2301      	movs	r3, #1
 800171e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001720:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800172e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* Keep CubeMX defaults you had — update these if your clock config differs */
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001730:	2308      	movs	r3, #8
 8001732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001734:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800173a:	2302      	movs	r3, #2
 800173c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800173e:	2307      	movs	r3, #7
 8001740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	4618      	mov	r0, r3
 8001748:	f003 faea 	bl	8004d20 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001752:	f000 f81f 	bl	8001794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
  /* Keep CubeMX APB prescalers you used (this template uses typical F407 values) */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001762:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	2105      	movs	r1, #5
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fd4b 	bl	8005210 <HAL_RCC_ClockConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001780:	f000 f808 	bl	8001794 <Error_Handler>
  }
}
 8001784:	bf00      	nop
 8001786:	3750      	adds	r7, #80	@ 0x50
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	40007000 	.word	0x40007000

08001794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
  __disable_irq();
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <Error_Handler+0x8>

080017a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a0f      	ldr	r2, [pc, #60]	@ (80017ec <HAL_MspInit+0x4c>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a08      	ldr	r2, [pc, #32]	@ (80017ec <HAL_MspInit+0x4c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017de:	2007      	movs	r0, #7
 80017e0:	f000 fe18 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001846:	f000 f8d1 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <OTG_FS_IRQHandler+0x10>)
 8001856:	f002 f955 	bl	8003b04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20001bec 	.word	0x20001bec

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f008 fb44 	bl	8009f20 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20020000 	.word	0x20020000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	20000704 	.word	0x20000704
 80018cc:	20002450 	.word	0x20002450

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800192c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018f8:	f7ff ffea 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fe:	490d      	ldr	r1, [pc, #52]	@ (8001934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001914:	4c0a      	ldr	r4, [pc, #40]	@ (8001940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001922:	f008 fb03 	bl	8009f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7ff fdd7 	bl	80014d8 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800192c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001938:	0800ab28 	.word	0x0800ab28
  ldr r2, =_sbss
 800193c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8001940:	2000244c 	.word	0x2000244c

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_Init+0x40>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_Init+0x40>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_Init+0x40>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 fd4f 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff ff10 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fd67 	bl	800247e <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 fd2f 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	@ (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000004 	.word	0x20000004
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	20000008 	.word	0x20000008

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	20000708 	.word	0x20000708

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000708 	.word	0x20000708

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff ffee 	bl	8001a14 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d005      	beq.n	8001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_Delay+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a52:	bf00      	nop
 8001a54:	f7ff ffde 	bl	8001a14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f7      	bhi.n	8001a54 <HAL_Delay+0x28>
  {
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000000c 	.word	0x2000000c

08001a74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e033      	b.n	8001af2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff f99a 	bl	8000dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001aba:	f023 0302 	bic.w	r3, r3, #2
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fad8 	bl	800207c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ae2:	e001      	b.n	8001ae8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start+0x1a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0b2      	b.n	8001c7c <HAL_ADC_Start+0x180>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d018      	beq.n	8001b5e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3c:	4b52      	ldr	r3, [pc, #328]	@ (8001c88 <HAL_ADC_Start+0x18c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <HAL_ADC_Start+0x190>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0c9a      	lsrs	r2, r3, #18
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b50:	e002      	b.n	8001b58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d17a      	bne.n	8001c62 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001baa:	d106      	bne.n	8001bba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	f023 0206 	bic.w	r2, r3, #6
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc8:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_ADC_Start+0x194>)
 8001bca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d12a      	bne.n	8001c38 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c94 <HAL_ADC_Start+0x198>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d015      	beq.n	8001c18 <HAL_ADC_Start+0x11c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a29      	ldr	r2, [pc, #164]	@ (8001c98 <HAL_ADC_Start+0x19c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d105      	bne.n	8001c02 <HAL_ADC_Start+0x106>
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <HAL_ADC_Start+0x194>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a25      	ldr	r2, [pc, #148]	@ (8001c9c <HAL_ADC_Start+0x1a0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d136      	bne.n	8001c7a <HAL_ADC_Start+0x17e>
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_ADC_Start+0x194>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d130      	bne.n	8001c7a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d129      	bne.n	8001c7a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	e020      	b.n	8001c7a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a15      	ldr	r2, [pc, #84]	@ (8001c94 <HAL_ADC_Start+0x198>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d11b      	bne.n	8001c7a <HAL_ADC_Start+0x17e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d114      	bne.n	8001c7a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	e00b      	b.n	8001c7a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	431bde83 	.word	0x431bde83
 8001c90:	40012300 	.word	0x40012300
 8001c94:	40012000 	.word	0x40012000
 8001c98:	40012100 	.word	0x40012100
 8001c9c:	40012200 	.word	0x40012200

08001ca0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_Stop+0x16>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e021      	b.n	8001cfa <HAL_ADC_Stop+0x5a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d22:	d113      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d32:	d10b      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e063      	b.n	8001e14 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff fe62 	bl	8001a14 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d52:	e021      	b.n	8001d98 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5a:	d01d      	beq.n	8001d98 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_ADC_PollForConversion+0x6c>
 8001d62:	f7ff fe57 	bl	8001a14 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d212      	bcs.n	8001d98 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d00b      	beq.n	8001d98 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f043 0204 	orr.w	r2, r3, #4
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e03d      	b.n	8001e14 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d1d6      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0212 	mvn.w	r2, #18
 8001dae:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d123      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d11f      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d111      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1c>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e105      	b.n	8002060 <HAL_ADC_ConfigChannel+0x228>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d925      	bls.n	8001eb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	461a      	mov	r2, r3
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	3b1e      	subs	r3, #30
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43da      	mvns	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	400a      	ands	r2, r1
 8001e88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4403      	add	r3, r0
 8001ea2:	3b1e      	subs	r3, #30
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	e022      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6919      	ldr	r1, [r3, #16]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4403      	add	r3, r0
 8001eec:	409a      	lsls	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d824      	bhi.n	8001f48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b05      	subs	r3, #5
 8001f10:	221f      	movs	r2, #31
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b05      	subs	r3, #5
 8001f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f46:	e04c      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d824      	bhi.n	8001f9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b23      	subs	r3, #35	@ 0x23
 8001f62:	221f      	movs	r2, #31
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	400a      	ands	r2, r1
 8001f70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b23      	subs	r3, #35	@ 0x23
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f98:	e023      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b41      	subs	r3, #65	@ 0x41
 8001fac:	221f      	movs	r2, #31
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	400a      	ands	r2, r1
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4618      	mov	r0, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3b41      	subs	r3, #65	@ 0x41
 8001fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe2:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_ADC_ConfigChannel+0x234>)
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	@ (8002070 <HAL_ADC_ConfigChannel+0x238>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d109      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1cc>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b12      	cmp	r3, #18
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_ADC_ConfigChannel+0x238>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d123      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x21e>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d003      	beq.n	800201e <HAL_ADC_ConfigChannel+0x1e6>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b11      	cmp	r3, #17
 800201c:	d11b      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b10      	cmp	r3, #16
 8002030:	d111      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_ADC_ConfigChannel+0x23c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a10      	ldr	r2, [pc, #64]	@ (8002078 <HAL_ADC_ConfigChannel+0x240>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	0c9a      	lsrs	r2, r3, #18
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002048:	e002      	b.n	8002050 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	40012300 	.word	0x40012300
 8002070:	40012000 	.word	0x40012000
 8002074:	20000004 	.word	0x20000004
 8002078:	431bde83 	.word	0x431bde83

0800207c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002084:	4b79      	ldr	r3, [pc, #484]	@ (800226c <ADC_Init+0x1f0>)
 8002086:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	021a      	lsls	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	4a58      	ldr	r2, [pc, #352]	@ (8002270 <ADC_Init+0x1f4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d022      	beq.n	800215a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6899      	ldr	r1, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	e00f      	b.n	800217a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002178:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0202 	bic.w	r2, r2, #2
 8002188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6899      	ldr	r1, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7e1b      	ldrb	r3, [r3, #24]
 8002194:	005a      	lsls	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	035a      	lsls	r2, r3, #13
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e007      	b.n	80021f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	3b01      	subs	r3, #1
 800220c:	051a      	lsls	r2, r3, #20
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002232:	025a      	lsls	r2, r3, #9
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6899      	ldr	r1, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	029a      	lsls	r2, r3, #10
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40012300 	.word	0x40012300
 8002270:	0f000001 	.word	0x0f000001

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	@ (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	@ (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	@ 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e16b      	b.n	800278c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 815a 	bne.w	8002786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d005      	beq.n	80024ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d130      	bne.n	800254c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d017      	beq.n	8002588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d123      	bne.n	80025dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80b4 	beq.w	8002786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b60      	ldr	r3, [pc, #384]	@ (80027a4 <HAL_GPIO_Init+0x30c>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a5f      	ldr	r2, [pc, #380]	@ (80027a4 <HAL_GPIO_Init+0x30c>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b5d      	ldr	r3, [pc, #372]	@ (80027a4 <HAL_GPIO_Init+0x30c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263a:	4a5b      	ldr	r2, [pc, #364]	@ (80027a8 <HAL_GPIO_Init+0x310>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_GPIO_Init+0x314>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d02b      	beq.n	80026be <HAL_GPIO_Init+0x226>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a51      	ldr	r2, [pc, #324]	@ (80027b0 <HAL_GPIO_Init+0x318>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x222>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_GPIO_Init+0x31c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x21e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <HAL_GPIO_Init+0x320>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x21a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4e      	ldr	r2, [pc, #312]	@ (80027bc <HAL_GPIO_Init+0x324>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x216>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4d      	ldr	r2, [pc, #308]	@ (80027c0 <HAL_GPIO_Init+0x328>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x212>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4c      	ldr	r2, [pc, #304]	@ (80027c4 <HAL_GPIO_Init+0x32c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4b      	ldr	r2, [pc, #300]	@ (80027c8 <HAL_GPIO_Init+0x330>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x20a>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00e      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026a2:	2308      	movs	r3, #8
 80026a4:	e00c      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026a6:	2306      	movs	r3, #6
 80026a8:	e00a      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026aa:	2305      	movs	r3, #5
 80026ac:	e008      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026b2:	2303      	movs	r3, #3
 80026b4:	e004      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e002      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x228>
 80026be:	2300      	movs	r3, #0
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f002 0203 	and.w	r2, r2, #3
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4093      	lsls	r3, r2
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d0:	4935      	ldr	r1, [pc, #212]	@ (80027a8 <HAL_GPIO_Init+0x310>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026de:	4b3b      	ldr	r3, [pc, #236]	@ (80027cc <HAL_GPIO_Init+0x334>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002702:	4a32      	ldr	r2, [pc, #200]	@ (80027cc <HAL_GPIO_Init+0x334>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002708:	4b30      	ldr	r3, [pc, #192]	@ (80027cc <HAL_GPIO_Init+0x334>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800272c:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <HAL_GPIO_Init+0x334>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002732:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <HAL_GPIO_Init+0x334>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002756:	4a1d      	ldr	r2, [pc, #116]	@ (80027cc <HAL_GPIO_Init+0x334>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_GPIO_Init+0x334>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002780:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <HAL_GPIO_Init+0x334>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	f67f ae90 	bls.w	80024b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3724      	adds	r7, #36	@ 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40013800 	.word	0x40013800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020400 	.word	0x40020400
 80027b4:	40020800 	.word	0x40020800
 80027b8:	40020c00 	.word	0x40020c00
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40021400 	.word	0x40021400
 80027c4:	40021800 	.word	0x40021800
 80027c8:	40021c00 	.word	0x40021c00
 80027cc:	40013c00 	.word	0x40013c00

080027d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e001      	b.n	80027f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e12b      	b.n	8002a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fb78 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2224      	movs	r2, #36	@ 0x24
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002898:	f002 feb2 	bl	8005600 <HAL_RCC_GetPCLK1Freq>
 800289c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4a81      	ldr	r2, [pc, #516]	@ (8002aa8 <HAL_I2C_Init+0x274>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d807      	bhi.n	80028b8 <HAL_I2C_Init+0x84>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a80      	ldr	r2, [pc, #512]	@ (8002aac <HAL_I2C_Init+0x278>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e006      	b.n	80028c6 <HAL_I2C_Init+0x92>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a7d      	ldr	r2, [pc, #500]	@ (8002ab0 <HAL_I2C_Init+0x27c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0e7      	b.n	8002a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4a78      	ldr	r2, [pc, #480]	@ (8002ab4 <HAL_I2C_Init+0x280>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0c9b      	lsrs	r3, r3, #18
 80028d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa8 <HAL_I2C_Init+0x274>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d802      	bhi.n	8002908 <HAL_I2C_Init+0xd4>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3301      	adds	r3, #1
 8002906:	e009      	b.n	800291c <HAL_I2C_Init+0xe8>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	4a69      	ldr	r2, [pc, #420]	@ (8002ab8 <HAL_I2C_Init+0x284>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	3301      	adds	r3, #1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800292e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	495c      	ldr	r1, [pc, #368]	@ (8002aa8 <HAL_I2C_Init+0x274>)
 8002938:	428b      	cmp	r3, r1
 800293a:	d819      	bhi.n	8002970 <HAL_I2C_Init+0x13c>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1e59      	subs	r1, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fbb1 f3f3 	udiv	r3, r1, r3
 800294a:	1c59      	adds	r1, r3, #1
 800294c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002950:	400b      	ands	r3, r1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_I2C_Init+0x138>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e59      	subs	r1, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fbb1 f3f3 	udiv	r3, r1, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	e051      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 800296c:	2304      	movs	r3, #4
 800296e:	e04f      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <HAL_I2C_Init+0x168>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e012      	b.n	80029c2 <HAL_I2C_Init+0x18e>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x196>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e022      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <HAL_I2C_Init+0x1bc>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1e58      	subs	r0, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	440b      	add	r3, r1
 80029e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e4:	3301      	adds	r3, #1
 80029e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ee:	e00f      	b.n	8002a10 <HAL_I2C_Init+0x1dc>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	0099      	lsls	r1, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	6809      	ldr	r1, [r1, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69da      	ldr	r2, [r3, #28]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6911      	ldr	r1, [r2, #16]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	4311      	orrs	r1, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	000186a0 	.word	0x000186a0
 8002aac:	001e847f 	.word	0x001e847f
 8002ab0:	003d08ff 	.word	0x003d08ff
 8002ab4:	431bde83 	.word	0x431bde83
 8002ab8:	10624dd3 	.word	0x10624dd3

08002abc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad6:	f7fe ff9d 	bl	8001a14 <HAL_GetTick>
 8002ada:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	f040 80d9 	bne.w	8002c9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2319      	movs	r3, #25
 8002af0:	2201      	movs	r2, #1
 8002af2:	496d      	ldr	r1, [pc, #436]	@ (8002ca8 <HAL_I2C_Mem_Write+0x1ec>)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 fc8b 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0cc      	b.n	8002c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2C_Mem_Write+0x56>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e0c5      	b.n	8002c9e <HAL_I2C_Mem_Write+0x1e2>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d007      	beq.n	8002b38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2221      	movs	r2, #33	@ 0x21
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2240      	movs	r2, #64	@ 0x40
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a4d      	ldr	r2, [pc, #308]	@ (8002cac <HAL_I2C_Mem_Write+0x1f0>)
 8002b78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b7a:	88f8      	ldrh	r0, [r7, #6]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	4603      	mov	r3, r0
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fac2 	bl	8003114 <I2C_RequestMemoryWrite>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d052      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e081      	b.n	8002c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fd50 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d107      	bne.n	8002bc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06b      	b.n	8002c9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	781a      	ldrb	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d11b      	bne.n	8002c3c <HAL_I2C_Mem_Write+0x180>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1aa      	bne.n	8002b9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fd43 	bl	80036d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d107      	bne.n	8002c6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e016      	b.n	8002c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c9c:	2302      	movs	r3, #2
  }
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	00100002 	.word	0x00100002
 8002cac:	ffff0000 	.word	0xffff0000

08002cb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	@ 0x30
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	817b      	strh	r3, [r7, #10]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	813b      	strh	r3, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cca:	f7fe fea3 	bl	8001a14 <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	f040 8214 	bne.w	8003106 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2319      	movs	r3, #25
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	497b      	ldr	r1, [pc, #492]	@ (8002ed4 <HAL_I2C_Mem_Read+0x224>)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fb91 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e207      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_I2C_Mem_Read+0x56>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e200      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d007      	beq.n	8002d2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2222      	movs	r2, #34	@ 0x22
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2240      	movs	r2, #64	@ 0x40
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed8 <HAL_I2C_Mem_Read+0x228>)
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d6e:	88f8      	ldrh	r0, [r7, #6]
 8002d70:	893a      	ldrh	r2, [r7, #8]
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fa5e 	bl	8003240 <I2C_RequestMemoryRead>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1bc      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e190      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d11b      	bne.n	8002dfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e170      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d11b      	bne.n	8002e3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	e150      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e54:	e144      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	f200 80f1 	bhi.w	8003042 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d123      	bne.n	8002eb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fc79 	bl	8003764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e145      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002eae:	e117      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d14e      	bne.n	8002f56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4906      	ldr	r1, [pc, #24]	@ (8002edc <HAL_I2C_Mem_Read+0x22c>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 faa4 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e11a      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
 8002ed2:	bf00      	nop
 8002ed4:	00100002 	.word	0x00100002
 8002ed8:	ffff0000 	.word	0xffff0000
 8002edc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f54:	e0c4      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	496c      	ldr	r1, [pc, #432]	@ (8003110 <HAL_I2C_Mem_Read+0x460>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa55 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0cb      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4955      	ldr	r1, [pc, #340]	@ (8003110 <HAL_I2C_Mem_Read+0x460>)
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fa27 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e09d      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003040:	e04e      	b.n	80030e0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003044:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb8c 	bl	8003764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e058      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b04      	cmp	r3, #4
 8003094:	d124      	bne.n	80030e0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b03      	cmp	r3, #3
 800309c:	d107      	bne.n	80030ae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f47f aeb6 	bne.w	8002e56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3728      	adds	r7, #40	@ 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	00010004 	.word	0x00010004

08003114 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	460b      	mov	r3, r1
 8003128:	813b      	strh	r3, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800313c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	2200      	movs	r2, #0
 8003146:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f960 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003164:	d103      	bne.n	800316e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e05f      	b.n	8003232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003172:	897b      	ldrh	r3, [r7, #10]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	492d      	ldr	r1, [pc, #180]	@ (800323c <I2C_RequestMemoryWrite+0x128>)
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f9bb 	bl	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04c      	b.n	8003232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	6a39      	ldr	r1, [r7, #32]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fa46 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d107      	bne.n	80031d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e02b      	b.n	8003232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e0:	893b      	ldrh	r3, [r7, #8]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	e021      	b.n	8003230 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031ec:	893b      	ldrh	r3, [r7, #8]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fc:	6a39      	ldr	r1, [r7, #32]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fa20 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00d      	beq.n	8003226 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	2b04      	cmp	r3, #4
 8003210:	d107      	bne.n	8003222 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e005      	b.n	8003232 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003226:	893b      	ldrh	r3, [r7, #8]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	00010002 	.word	0x00010002

08003240 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003268:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	2200      	movs	r2, #0
 8003282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f8c2 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a0:	d103      	bne.n	80032aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0aa      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	4952      	ldr	r1, [pc, #328]	@ (800340c <I2C_RequestMemoryRead+0x1cc>)
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f91d 	bl	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e097      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f9a8 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e076      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	e021      	b.n	800336c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b29b      	uxth	r3, r3
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	6a39      	ldr	r1, [r7, #32]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f982 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	2b04      	cmp	r3, #4
 800334c:	d107      	bne.n	800335e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e050      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336e:	6a39      	ldr	r1, [r7, #32]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f967 	bl	8003644 <I2C_WaitOnTXEFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00d      	beq.n	8003398 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	2b04      	cmp	r3, #4
 8003382:	d107      	bne.n	8003394 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003392:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e035      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f82b 	bl	8003410 <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ce:	d103      	bne.n	80033d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e013      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033dc:	897b      	ldrh	r3, [r7, #10]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	6a3a      	ldr	r2, [r7, #32]
 80033f0:	4906      	ldr	r1, [pc, #24]	@ (800340c <I2C_RequestMemoryRead+0x1cc>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f886 	bl	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	00010002 	.word	0x00010002

08003410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003420:	e048      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d044      	beq.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fe faf3 	bl	8001a14 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d139      	bne.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	0c1b      	lsrs	r3, r3, #16
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d10d      	bne.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x56>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	43da      	mvns	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4013      	ands	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	e00c      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	43da      	mvns	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4013      	ands	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	429a      	cmp	r2, r3
 8003484:	d116      	bne.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e023      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10d      	bne.n	80034da <I2C_WaitOnFlagUntilTimeout+0xca>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	e00c      	b.n	80034f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d093      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003512:	e071      	b.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003522:	d123      	bne.n	800356c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800353c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e067      	b.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d041      	beq.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003574:	f7fe fa4e 	bl	8001a14 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d302      	bcc.n	800358a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d136      	bne.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10c      	bne.n	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	e00b      	b.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	43da      	mvns	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4013      	ands	r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e021      	b.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10c      	bne.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e00b      	b.n	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4013      	ands	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	bf14      	ite	ne
 800362e:	2301      	movne	r3, #1
 8003630:	2300      	moveq	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	f47f af6d 	bne.w	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003650:	e034      	b.n	80036bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8e3 	bl	800381e <I2C_IsAcknowledgeFailed>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e034      	b.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d028      	beq.n	80036bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fe f9d3 	bl	8001a14 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11d      	bne.n	80036bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368a:	2b80      	cmp	r3, #128	@ 0x80
 800368c:	d016      	beq.n	80036bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e007      	b.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b80      	cmp	r3, #128	@ 0x80
 80036c8:	d1c3      	bne.n	8003652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e0:	e034      	b.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f89b 	bl	800381e <I2C_IsAcknowledgeFailed>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e034      	b.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d028      	beq.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fe f98b 	bl	8001a14 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11d      	bne.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d016      	beq.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e007      	b.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d1c3      	bne.n	80036e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003770:	e049      	b.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b10      	cmp	r3, #16
 800377e:	d119      	bne.n	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0210 	mvn.w	r2, #16
 8003788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e030      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe f92e 	bl	8001a14 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11d      	bne.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d016      	beq.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e007      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003810:	2b40      	cmp	r3, #64	@ 0x40
 8003812:	d1ae      	bne.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003834:	d11b      	bne.n	800386e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800383e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e101      	b.n	8003a92 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 fc01 	bl	80090b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038bc:	d102      	bne.n	80038c4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 ffc4 	bl	8005856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7c1a      	ldrb	r2, [r3, #16]
 80038d6:	f88d 2000 	strb.w	r2, [sp]
 80038da:	3304      	adds	r3, #4
 80038dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038de:	f001 fea3 	bl	8005628 <USB_CoreInit>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0ce      	b.n	8003a92 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 ffbc 	bl	8005878 <USB_SetCurrentMode>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0bf      	b.n	8003a92 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e04a      	b.n	80039ae <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003918:	7bfa      	ldrb	r2, [r7, #15]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3315      	adds	r3, #21
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3314      	adds	r3, #20
 800393c:	7bfa      	ldrb	r2, [r7, #15]
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	b298      	uxth	r0, r3
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	332e      	adds	r3, #46	@ 0x2e
 8003954:	4602      	mov	r2, r0
 8003956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3318      	adds	r3, #24
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	331c      	adds	r3, #28
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003980:	7bfa      	ldrb	r2, [r7, #15]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3320      	adds	r3, #32
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3324      	adds	r3, #36	@ 0x24
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	3301      	adds	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	791b      	ldrb	r3, [r3, #4]
 80039b2:	7bfa      	ldrb	r2, [r7, #15]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d3af      	bcc.n	8003918 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e044      	b.n	8003a48 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a16:	7bfa      	ldrb	r2, [r7, #15]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	3301      	adds	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	791b      	ldrb	r3, [r3, #4]
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d3b5      	bcc.n	80039be <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7c1a      	ldrb	r2, [r3, #16]
 8003a5a:	f88d 2000 	strb.w	r2, [sp]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a62:	f001 ff55 	bl	8005910 <USB_DevInit>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e00c      	b.n	8003a92 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f002 ff9f 	bl	80069ce <USB_DevDisconnect>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_PCD_Start+0x1c>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e022      	b.n	8003afc <HAL_PCD_Start+0x62>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 fea6 	bl	8005834 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f002 ff4d 	bl	800698c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b08d      	sub	sp, #52	@ 0x34
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 f80b 	bl	8006b36 <USB_GetMode>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 848c 	bne.w	8004440 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 ff6f 	bl	8006a10 <USB_ReadInterrupts>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8482 	beq.w	800443e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f002 ff5c 	bl	8006a10 <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d107      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 0202 	and.w	r2, r2, #2
 8003b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f002 ff4a 	bl	8006a10 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d161      	bne.n	8003c4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0210 	bic.w	r2, r2, #16
 8003b94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bc0:	d124      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d035      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	6a38      	ldr	r0, [r7, #32]
 8003be2:	f002 fd81 	bl	80066e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bf2:	441a      	add	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c04:	441a      	add	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	615a      	str	r2, [r3, #20]
 8003c0a:	e016      	b.n	8003c3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c12:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003c16:	d110      	bne.n	8003c3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c1e:	2208      	movs	r2, #8
 8003c20:	4619      	mov	r1, r3
 8003c22:	6a38      	ldr	r0, [r7, #32]
 8003c24:	f002 fd60 	bl	80066e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c34:	441a      	add	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0210 	orr.w	r2, r2, #16
 8003c48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f002 fede 	bl	8006a10 <USB_ReadInterrupts>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003c5e:	f040 80a7 	bne.w	8003db0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f002 fee3 	bl	8006a36 <USB_ReadDevAllOutEpInterrupt>
 8003c70:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003c72:	e099      	b.n	8003da8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808e 	beq.w	8003d9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f002 ff07 	bl	8006a9e <USB_ReadDevOutEPInterrupt>
 8003c90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2301      	movs	r3, #1
 8003cac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003cae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fea3 	bl	80049fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00c      	beq.n	8003cda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2308      	movs	r3, #8
 8003cd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 ff79 	bl	8004bcc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d030      	beq.n	8003d62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d08:	2b80      	cmp	r3, #128	@ 0x80
 8003d0a:	d109      	bne.n	8003d20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	3304      	adds	r3, #4
 8003d34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	78db      	ldrb	r3, [r3, #3]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d108      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2200      	movs	r2, #0
 8003d42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f005 fab6 	bl	80092bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2302      	movs	r3, #2
 8003d60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d94:	461a      	mov	r2, r3
 8003d96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	3301      	adds	r3, #1
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f47f af62 	bne.w	8003c74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 fe2b 	bl	8006a10 <USB_ReadInterrupts>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dc4:	f040 80db 	bne.w	8003f7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 fe4c 	bl	8006a6a <USB_ReadDevAllInEpInterrupt>
 8003dd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003dd8:	e0cd      	b.n	8003f76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80c2 	beq.w	8003f6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f002 fe72 	bl	8006ada <USB_ReadDevInEPInterrupt>
 8003df6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d057      	beq.n	8003eb2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2201      	movs	r2, #1
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69f9      	ldr	r1, [r7, #28]
 8003e1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e22:	4013      	ands	r3, r2
 8003e24:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e32:	461a      	mov	r2, r3
 8003e34:	2301      	movs	r3, #1
 8003e36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	799b      	ldrb	r3, [r3, #6]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d132      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3320      	adds	r3, #32
 8003e50:	6819      	ldr	r1, [r3, #0]
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4403      	add	r3, r0
 8003e60:	331c      	adds	r3, #28
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4419      	add	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4403      	add	r3, r0
 8003e74:	3320      	adds	r3, #32
 8003e76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d113      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x3a2>
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3324      	adds	r3, #36	@ 0x24
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	f002 fe79 	bl	8006b98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f005 f980 	bl	80091b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2308      	movs	r3, #8
 8003ecc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2310      	movs	r3, #16
 8003ee8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f00:	461a      	mov	r2, r3
 8003f02:	2340      	movs	r3, #64	@ 0x40
 8003f04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d023      	beq.n	8003f58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003f10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f12:	6a38      	ldr	r0, [r7, #32]
 8003f14:	f001 fe60 	bl	8005bd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	3310      	adds	r3, #16
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d108      	bne.n	8003f46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f005 f9cd 	bl	80092e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f52:	461a      	mov	r2, r3
 8003f54:	2302      	movs	r3, #2
 8003f56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fcbd 	bl	80048e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	085b      	lsrs	r3, r3, #1
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f47f af2e 	bne.w	8003dda <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 fd44 	bl	8006a10 <USB_ReadInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f92:	d122      	bne.n	8003fda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fa2:	f023 0301 	bic.w	r3, r3, #1
 8003fa6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d108      	bne.n	8003fc4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fba:	2100      	movs	r1, #0
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fea3 	bl	8004d08 <HAL_PCDEx_LPM_Callback>
 8003fc2:	e002      	b.n	8003fca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f005 f96b 	bl	80092a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 fd16 	bl	8006a10 <USB_ReadInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fee:	d112      	bne.n	8004016 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d102      	bne.n	8004006 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f005 f927 	bl	8009254 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004014:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f002 fcf8 	bl	8006a10 <USB_ReadInterrupts>
 8004020:	4603      	mov	r3, r0
 8004022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402a:	f040 80b7 	bne.w	800419c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2110      	movs	r1, #16
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fdc5 	bl	8005bd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004052:	e046      	b.n	80040e2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004060:	461a      	mov	r2, r3
 8004062:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004066:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004082:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004086:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004094:	461a      	mov	r2, r3
 8004096:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800409a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	69fa      	ldr	r2, [r7, #28]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	3301      	adds	r3, #1
 80040e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	791b      	ldrb	r3, [r3, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d3b2      	bcc.n	8004054 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040fc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004100:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	7bdb      	ldrb	r3, [r3, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411a:	f043 030b 	orr.w	r3, r3, #11
 800411e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004130:	f043 030b 	orr.w	r3, r3, #11
 8004134:	6453      	str	r3, [r2, #68]	@ 0x44
 8004136:	e015      	b.n	8004164 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004146:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800414a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800414e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800415e:	f043 030b 	orr.w	r3, r3, #11
 8004162:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004172:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004176:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004186:	461a      	mov	r2, r3
 8004188:	f002 fd06 	bl	8006b98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800419a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f002 fc35 	bl	8006a10 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041b0:	d123      	bne.n	80041fa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f002 fccb 	bl	8006b52 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 fd82 	bl	8005cca <USB_GetDevSpeed>
 80041c6:	4603      	mov	r3, r0
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681c      	ldr	r4, [r3, #0]
 80041d2:	f001 fa09 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 80041d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041dc:	461a      	mov	r2, r3
 80041de:	4620      	mov	r0, r4
 80041e0:	f001 fa86 	bl	80056f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f005 f80c 	bl	8009202 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80041f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 fc06 	bl	8006a10 <USB_ReadInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b08      	cmp	r3, #8
 800420c:	d10a      	bne.n	8004224 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f004 ffe9 	bl	80091e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f002 0208 	and.w	r2, r2, #8
 8004222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f002 fbf1 	bl	8006a10 <USB_ReadInterrupts>
 800422e:	4603      	mov	r3, r0
 8004230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004234:	2b80      	cmp	r3, #128	@ 0x80
 8004236:	d123      	bne.n	8004280 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004244:	2301      	movs	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
 8004248:	e014      	b.n	8004274 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	b2db      	uxtb	r3, r3
 8004266:	4619      	mov	r1, r3
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb0a 	bl	8004882 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	3301      	adds	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	461a      	mov	r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	4293      	cmp	r3, r2
 800427e:	d3e4      	bcc.n	800424a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f002 fbc3 	bl	8006a10 <USB_ReadInterrupts>
 800428a:	4603      	mov	r3, r0
 800428c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004290:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004294:	d13c      	bne.n	8004310 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004296:	2301      	movs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
 800429a:	e02b      	b.n	80042f4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3318      	adds	r3, #24
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d115      	bne.n	80042ee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80042c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da12      	bge.n	80042ee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3317      	adds	r3, #23
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 faca 	bl	8004882 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d3cd      	bcc.n	800429c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800430e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f002 fb7b 	bl	8006a10 <USB_ReadInterrupts>
 800431a:	4603      	mov	r3, r0
 800431c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004320:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004324:	d156      	bne.n	80043d4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004326:	2301      	movs	r3, #1
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
 800432a:	e045      	b.n	80043b8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d12e      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004354:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	da2b      	bge.n	80043b2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	0c1a      	lsrs	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004364:	4053      	eors	r3, r2
 8004366:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800436a:	2b00      	cmp	r3, #0
 800436c:	d121      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ae:	6053      	str	r3, [r2, #4]
            break;
 80043b0:	e008      	b.n	80043c4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	461a      	mov	r2, r3
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d3b3      	bcc.n	800432c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80043d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f002 fb19 	bl	8006a10 <USB_ReadInterrupts>
 80043de:	4603      	mov	r3, r0
 80043e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e8:	d10a      	bne.n	8004400 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f004 ff8a 	bl	8009304 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80043fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f002 fb03 	bl	8006a10 <USB_ReadInterrupts>
 800440a:	4603      	mov	r3, r0
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d115      	bne.n	8004440 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f004 ff7a 	bl	8009320 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e000      	b.n	8004440 <HAL_PCD_IRQHandler+0x93c>
      return;
 800443e:	bf00      	nop
    }
  }
}
 8004440:	3734      	adds	r7, #52	@ 0x34
 8004442:	46bd      	mov	sp, r7
 8004444:	bd90      	pop	{r4, r7, pc}

08004446 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_PCD_SetAddress+0x1a>
 800445c:	2302      	movs	r3, #2
 800445e:	e012      	b.n	8004486 <HAL_PCD_SetAddress+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f002 fa62 	bl	8006940 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	4608      	mov	r0, r1
 8004498:	4611      	mov	r1, r2
 800449a:	461a      	mov	r2, r3
 800449c:	4603      	mov	r3, r0
 800449e:	70fb      	strb	r3, [r7, #3]
 80044a0:	460b      	mov	r3, r1
 80044a2:	803b      	strh	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	da0f      	bge.n	80044d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 020f 	and.w	r2, r3, #15
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	3310      	adds	r3, #16
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	3304      	adds	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	705a      	strb	r2, [r3, #1]
 80044d2:	e00f      	b.n	80044f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 020f 	and.w	r2, r3, #15
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004500:	883b      	ldrh	r3, [r7, #0]
 8004502:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	78ba      	ldrb	r2, [r7, #2]
 800450e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004522:	78bb      	ldrb	r3, [r7, #2]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d102      	bne.n	800452e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_PCD_EP_Open+0xae>
 8004538:	2302      	movs	r3, #2
 800453a:	e00e      	b.n	800455a <HAL_PCD_EP_Open+0xcc>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fbe2 	bl	8005d14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004558:	7afb      	ldrb	r3, [r7, #11]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800456e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004572:	2b00      	cmp	r3, #0
 8004574:	da0f      	bge.n	8004596 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	3310      	adds	r3, #16
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	705a      	strb	r2, [r3, #1]
 8004594:	e00f      	b.n	80045b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	3304      	adds	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_PCD_EP_Close+0x6e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e00e      	b.n	80045ee <HAL_PCD_EP_Close+0x8c>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 fc20 	bl	8005e24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
 8004602:	460b      	mov	r3, r1
 8004604:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004606:	7afb      	ldrb	r3, [r7, #11]
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	4613      	mov	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	3304      	adds	r3, #4
 800461e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	2200      	movs	r2, #0
 8004630:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004638:	7afb      	ldrb	r3, [r7, #11]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	b2da      	uxtb	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	799b      	ldrb	r3, [r3, #6]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	799b      	ldrb	r3, [r3, #6]
 800465a:	461a      	mov	r2, r3
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	f001 fcbd 	bl	8005fdc <USB_EPStartXfer>

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	f003 020f 	and.w	r2, r3, #15
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	460b      	mov	r3, r1
 80046aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ac:	7afb      	ldrb	r3, [r7, #11]
 80046ae:	f003 020f 	and.w	r2, r3, #15
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	3310      	adds	r3, #16
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	3304      	adds	r3, #4
 80046c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2201      	movs	r2, #1
 80046da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046dc:	7afb      	ldrb	r3, [r7, #11]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	799b      	ldrb	r3, [r3, #6]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	799b      	ldrb	r3, [r3, #6]
 80046fe:	461a      	mov	r2, r3
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	f001 fc6b 	bl	8005fdc <USB_EPStartXfer>

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	7912      	ldrb	r2, [r2, #4]
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e04f      	b.n	80047ce <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800472e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da0f      	bge.n	8004756 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 020f 	and.w	r2, r3, #15
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	3310      	adds	r3, #16
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	705a      	strb	r2, [r3, #1]
 8004754:	e00d      	b.n	8004772 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	3304      	adds	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	b2da      	uxtb	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_PCD_EP_SetStall+0x82>
 800478e:	2302      	movs	r3, #2
 8004790:	e01d      	b.n	80047ce <HAL_PCD_EP_SetStall+0xbe>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fff9 	bl	8006798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	7999      	ldrb	r1, [r3, #6]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047be:	461a      	mov	r2, r3
 80047c0:	f002 f9ea 	bl	8006b98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	7912      	ldrb	r2, [r2, #4]
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e042      	b.n	800487a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	da0f      	bge.n	800481c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	3310      	adds	r3, #16
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	705a      	strb	r2, [r3, #1]
 800481a:	e00f      	b.n	800483c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004854:	2b01      	cmp	r3, #1
 8004856:	d101      	bne.n	800485c <HAL_PCD_EP_ClrStall+0x86>
 8004858:	2302      	movs	r3, #2
 800485a:	e00e      	b.n	800487a <HAL_PCD_EP_ClrStall+0xa4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	4618      	mov	r0, r3
 800486c:	f002 f802 	bl	8006874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800488e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004892:	2b00      	cmp	r3, #0
 8004894:	da0c      	bge.n	80048b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	3310      	adds	r3, #16
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	3304      	adds	r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e00c      	b.n	80048ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	3304      	adds	r3, #4
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 fe21 	bl	8006518 <USB_EPStopXfer>
 80048d6:	4603      	mov	r3, r0
 80048d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80048da:	7afb      	ldrb	r3, [r7, #11]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	@ 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	3310      	adds	r3, #16
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	4413      	add	r3, r2
 8004908:	3304      	adds	r3, #4
 800490a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	429a      	cmp	r2, r3
 8004916:	d901      	bls.n	800491c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e06b      	b.n	80049f4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	429a      	cmp	r2, r3
 8004930:	d902      	bls.n	8004938 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3303      	adds	r3, #3
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004940:	e02a      	b.n	8004998 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	429a      	cmp	r2, r3
 8004956:	d902      	bls.n	800495e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3303      	adds	r3, #3
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68d9      	ldr	r1, [r3, #12]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4603      	mov	r3, r0
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f001 fe76 	bl	800666c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	441a      	add	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d809      	bhi.n	80049c2 <PCD_WriteEmptyTxFifo+0xde>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d203      	bcs.n	80049c2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1bf      	bne.n	8004942 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d811      	bhi.n	80049f2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	2201      	movs	r2, #1
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	6939      	ldr	r1, [r7, #16]
 80049ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ee:	4013      	ands	r3, r2
 80049f0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	333c      	adds	r3, #60	@ 0x3c
 8004a14:	3304      	adds	r3, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	799b      	ldrb	r3, [r3, #6]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d17b      	bne.n	8004b2a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d015      	beq.n	8004a68 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	4a61      	ldr	r2, [pc, #388]	@ (8004bc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f240 80b9 	bls.w	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80b3 	beq.w	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	e0a7      	b.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2320      	movs	r3, #32
 8004a82:	6093      	str	r3, [r2, #8]
 8004a84:	e098      	b.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 8093 	bne.w	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d90f      	bls.n	8004aba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab6:	6093      	str	r3, [r2, #8]
 8004ab8:	e07e      	b.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	4413      	add	r3, r2
 8004acc:	3304      	adds	r3, #4
 8004ace:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	0159      	lsls	r1, r3, #5
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae6:	1ad2      	subs	r2, r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d114      	bne.n	8004b1c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b04:	461a      	mov	r2, r3
 8004b06:	2101      	movs	r1, #1
 8004b08:	f002 f846 	bl	8006b98 <USB_EP0_OutStart>
 8004b0c:	e006      	b.n	8004b1c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	441a      	add	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f004 fb2a 	bl	800917c <HAL_PCD_DataOutStageCallback>
 8004b28:	e046      	b.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4a26      	ldr	r2, [pc, #152]	@ (8004bc8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d124      	bne.n	8004b7c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b48:	461a      	mov	r2, r3
 8004b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4e:	6093      	str	r3, [r2, #8]
 8004b50:	e032      	b.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2320      	movs	r3, #32
 8004b6c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f004 fb01 	bl	800917c <HAL_PCD_DataOutStageCallback>
 8004b7a:	e01d      	b.n	8004bb8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d114      	bne.n	8004bac <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d108      	bne.n	8004bac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	f001 fff6 	bl	8006b98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f004 fae2 	bl	800917c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	4f54300a 	.word	0x4f54300a
 8004bc8:	4f54310a 	.word	0x4f54310a

08004bcc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	333c      	adds	r3, #60	@ 0x3c
 8004be4:	3304      	adds	r3, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a15      	ldr	r2, [pc, #84]	@ (8004c54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d90e      	bls.n	8004c20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f004 fa99 	bl	8009158 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <PCD_EP_OutSetupPacket_int+0x88>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d90c      	bls.n	8004c48 <PCD_EP_OutSetupPacket_int+0x7c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	799b      	ldrb	r3, [r3, #6]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d108      	bne.n	8004c48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c40:	461a      	mov	r2, r3
 8004c42:	2101      	movs	r1, #1
 8004c44:	f001 ffa8 	bl	8006b98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	4f54300a 	.word	0x4f54300a

08004c58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
 8004c64:	4613      	mov	r3, r2
 8004c66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c76:	883b      	ldrh	r3, [r7, #0]
 8004c78:	0419      	lsls	r1, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c84:	e028      	b.n	8004cd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4413      	add	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c94:	2300      	movs	r3, #0
 8004c96:	73fb      	strb	r3, [r7, #15]
 8004c98:	e00d      	b.n	8004cb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	3340      	adds	r3, #64	@ 0x40
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4413      	add	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d3ec      	bcc.n	8004c9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004cc0:	883b      	ldrh	r3, [r7, #0]
 8004cc2:	0418      	lsls	r0, r3, #16
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6819      	ldr	r1, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	4302      	orrs	r2, r0
 8004cd0:	3340      	adds	r3, #64	@ 0x40
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	887a      	ldrh	r2, [r7, #2]
 8004cf8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e267      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d075      	beq.n	8004e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d3e:	4b88      	ldr	r3, [pc, #544]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d00c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d4a:	4b85      	ldr	r3, [pc, #532]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d112      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d56:	4b82      	ldr	r3, [pc, #520]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	4b7e      	ldr	r3, [pc, #504]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05b      	beq.n	8004e28 <HAL_RCC_OscConfig+0x108>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d157      	bne.n	8004e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e242      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d84:	d106      	bne.n	8004d94 <HAL_RCC_OscConfig+0x74>
 8004d86:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a75      	ldr	r2, [pc, #468]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	e01d      	b.n	8004dd0 <HAL_RCC_OscConfig+0xb0>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x98>
 8004d9e:	4b70      	ldr	r3, [pc, #448]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6f      	ldr	r2, [pc, #444]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	4b6d      	ldr	r3, [pc, #436]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6c      	ldr	r2, [pc, #432]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCC_OscConfig+0xb0>
 8004db8:	4b69      	ldr	r3, [pc, #420]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a68      	ldr	r2, [pc, #416]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	4b66      	ldr	r3, [pc, #408]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a65      	ldr	r2, [pc, #404]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d013      	beq.n	8004e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fc fe1c 	bl	8001a14 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fc fe18 	bl	8001a14 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	@ 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e207      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0xc0>
 8004dfe:	e014      	b.n	8004e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fc fe08 	bl	8001a14 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fc fe04 	bl	8001a14 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	@ 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1f3      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1a:	4b51      	ldr	r3, [pc, #324]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0xe8>
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d063      	beq.n	8004efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e36:	4b4a      	ldr	r3, [pc, #296]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 030c 	and.w	r3, r3, #12
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d11c      	bne.n	8004e88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e4e:	4b44      	ldr	r3, [pc, #272]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d116      	bne.n	8004e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5a:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCC_OscConfig+0x152>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e1c7      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e72:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4937      	ldr	r1, [pc, #220]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e86:	e03a      	b.n	8004efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e90:	4b34      	ldr	r3, [pc, #208]	@ (8004f64 <HAL_RCC_OscConfig+0x244>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e96:	f7fc fdbd 	bl	8001a14 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9e:	f7fc fdb9 	bl	8001a14 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e1a8      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebc:	4b28      	ldr	r3, [pc, #160]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4925      	ldr	r1, [pc, #148]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCC_OscConfig+0x244>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fd9c 	bl	8001a14 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee0:	f7fc fd98 	bl	8001a14 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e187      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d036      	beq.n	8004f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f12:	4b15      	ldr	r3, [pc, #84]	@ (8004f68 <HAL_RCC_OscConfig+0x248>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fc fd7c 	bl	8001a14 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f20:	f7fc fd78 	bl	8001a14 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e167      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f32:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_OscConfig+0x240>)
 8004f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x200>
 8004f3e:	e01b      	b.n	8004f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f40:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <HAL_RCC_OscConfig+0x248>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f46:	f7fc fd65 	bl	8001a14 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4c:	e00e      	b.n	8004f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fc fd61 	bl	8001a14 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d907      	bls.n	8004f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e150      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	42470000 	.word	0x42470000
 8004f68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f6c:	4b88      	ldr	r3, [pc, #544]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ea      	bne.n	8004f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8097 	beq.w	80050b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f8a:	4b81      	ldr	r3, [pc, #516]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb6:	4b77      	ldr	r3, [pc, #476]	@ (8005194 <HAL_RCC_OscConfig+0x474>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d118      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fc2:	4b74      	ldr	r3, [pc, #464]	@ (8005194 <HAL_RCC_OscConfig+0x474>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a73      	ldr	r2, [pc, #460]	@ (8005194 <HAL_RCC_OscConfig+0x474>)
 8004fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fce:	f7fc fd21 	bl	8001a14 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fd6:	f7fc fd1d 	bl	8001a14 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e10c      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCC_OscConfig+0x474>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <HAL_RCC_OscConfig+0x2ea>
 8004ffc:	4b64      	ldr	r3, [pc, #400]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005000:	4a63      	ldr	r2, [pc, #396]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	6713      	str	r3, [r2, #112]	@ 0x70
 8005008:	e01c      	b.n	8005044 <HAL_RCC_OscConfig+0x324>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b05      	cmp	r3, #5
 8005010:	d10c      	bne.n	800502c <HAL_RCC_OscConfig+0x30c>
 8005012:	4b5f      	ldr	r3, [pc, #380]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005016:	4a5e      	ldr	r2, [pc, #376]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005018:	f043 0304 	orr.w	r3, r3, #4
 800501c:	6713      	str	r3, [r2, #112]	@ 0x70
 800501e:	4b5c      	ldr	r3, [pc, #368]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	4a5b      	ldr	r2, [pc, #364]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6713      	str	r3, [r2, #112]	@ 0x70
 800502a:	e00b      	b.n	8005044 <HAL_RCC_OscConfig+0x324>
 800502c:	4b58      	ldr	r3, [pc, #352]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	4a57      	ldr	r2, [pc, #348]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005032:	f023 0301 	bic.w	r3, r3, #1
 8005036:	6713      	str	r3, [r2, #112]	@ 0x70
 8005038:	4b55      	ldr	r3, [pc, #340]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503c:	4a54      	ldr	r2, [pc, #336]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 800503e:	f023 0304 	bic.w	r3, r3, #4
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d015      	beq.n	8005078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fc fce2 	bl	8001a14 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005052:	e00a      	b.n	800506a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005054:	f7fc fcde 	bl	8001a14 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0cb      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800506a:	4b49      	ldr	r3, [pc, #292]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0ee      	beq.n	8005054 <HAL_RCC_OscConfig+0x334>
 8005076:	e014      	b.n	80050a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005078:	f7fc fccc 	bl	8001a14 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507e:	e00a      	b.n	8005096 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005080:	f7fc fcc8 	bl	8001a14 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800508e:	4293      	cmp	r3, r2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0b5      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005096:	4b3e      	ldr	r3, [pc, #248]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1ee      	bne.n	8005080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a8:	4b39      	ldr	r3, [pc, #228]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	4a38      	ldr	r2, [pc, #224]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80a1 	beq.w	8005200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050be:	4b34      	ldr	r3, [pc, #208]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d05c      	beq.n	8005184 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d141      	bne.n	8005156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	4b31      	ldr	r3, [pc, #196]	@ (8005198 <HAL_RCC_OscConfig+0x478>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f7fc fc9c 	bl	8001a14 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fc fc98 	bl	8001a14 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e087      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f2:	4b27      	ldr	r3, [pc, #156]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	3b01      	subs	r3, #1
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	491b      	ldr	r1, [pc, #108]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005128:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <HAL_RCC_OscConfig+0x478>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fc fc71 	bl	8001a14 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005136:	f7fc fc6d 	bl	8001a14 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e05c      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x416>
 8005154:	e054      	b.n	8005200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005156:	4b10      	ldr	r3, [pc, #64]	@ (8005198 <HAL_RCC_OscConfig+0x478>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fc fc5a 	bl	8001a14 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fc fc56 	bl	8001a14 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e045      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005176:	4b06      	ldr	r3, [pc, #24]	@ (8005190 <HAL_RCC_OscConfig+0x470>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x444>
 8005182:	e03d      	b.n	8005200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e038      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
 8005190:	40023800 	.word	0x40023800
 8005194:	40007000 	.word	0x40007000
 8005198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x4ec>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d028      	beq.n	80051fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d121      	bne.n	80051fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d11a      	bne.n	80051fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d111      	bne.n	80051fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	3b01      	subs	r3, #1
 80051e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40023800 	.word	0x40023800

08005210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0cc      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005224:	4b68      	ldr	r3, [pc, #416]	@ (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d90c      	bls.n	800524c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b65      	ldr	r3, [pc, #404]	@ (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b63      	ldr	r3, [pc, #396]	@ (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d001      	beq.n	800524c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0b8      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d020      	beq.n	800529a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005264:	4b59      	ldr	r3, [pc, #356]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a58      	ldr	r2, [pc, #352]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800526e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800527c:	4b53      	ldr	r3, [pc, #332]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4a52      	ldr	r2, [pc, #328]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005288:	4b50      	ldr	r3, [pc, #320]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	494d      	ldr	r1, [pc, #308]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d044      	beq.n	8005330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d107      	bne.n	80052be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b47      	ldr	r3, [pc, #284]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d119      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e07f      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d003      	beq.n	80052ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ca:	2b03      	cmp	r3, #3
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ce:	4b3f      	ldr	r3, [pc, #252]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e06f      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052de:	4b3b      	ldr	r3, [pc, #236]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e067      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ee:	4b37      	ldr	r3, [pc, #220]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f023 0203 	bic.w	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4934      	ldr	r1, [pc, #208]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005300:	f7fc fb88 	bl	8001a14 <HAL_GetTick>
 8005304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005306:	e00a      	b.n	800531e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005308:	f7fc fb84 	bl	8001a14 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e04f      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	4b2b      	ldr	r3, [pc, #172]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 020c 	and.w	r2, r3, #12
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	429a      	cmp	r2, r3
 800532e:	d1eb      	bne.n	8005308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005330:	4b25      	ldr	r3, [pc, #148]	@ (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d20c      	bcs.n	8005358 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b22      	ldr	r3, [pc, #136]	@ (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b20      	ldr	r3, [pc, #128]	@ (80053c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e032      	b.n	80053be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005364:	4b19      	ldr	r3, [pc, #100]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4916      	ldr	r1, [pc, #88]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005382:	4b12      	ldr	r3, [pc, #72]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	490e      	ldr	r1, [pc, #56]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	4313      	orrs	r3, r2
 8005394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005396:	f000 f821 	bl	80053dc <HAL_RCC_GetSysClockFreq>
 800539a:	4602      	mov	r2, r0
 800539c:	4b0b      	ldr	r3, [pc, #44]	@ (80053cc <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	490a      	ldr	r1, [pc, #40]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 80053a8:	5ccb      	ldrb	r3, [r1, r3]
 80053aa:	fa22 f303 	lsr.w	r3, r2, r3
 80053ae:	4a09      	ldr	r2, [pc, #36]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80053b2:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc fae8 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023c00 	.word	0x40023c00
 80053cc:	40023800 	.word	0x40023800
 80053d0:	0800aacc 	.word	0x0800aacc
 80053d4:	20000004 	.word	0x20000004
 80053d8:	20000008 	.word	0x20000008

080053dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053e0:	b094      	sub	sp, #80	@ 0x50
 80053e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053f4:	4b79      	ldr	r3, [pc, #484]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x200>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d00d      	beq.n	800541c <HAL_RCC_GetSysClockFreq+0x40>
 8005400:	2b08      	cmp	r3, #8
 8005402:	f200 80e1 	bhi.w	80055c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x34>
 800540a:	2b04      	cmp	r3, #4
 800540c:	d003      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x3a>
 800540e:	e0db      	b.n	80055c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005410:	4b73      	ldr	r3, [pc, #460]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005412:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005414:	e0db      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005416:	4b73      	ldr	r3, [pc, #460]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005418:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800541a:	e0d8      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800541c:	4b6f      	ldr	r3, [pc, #444]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x200>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005424:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005426:	4b6d      	ldr	r3, [pc, #436]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d063      	beq.n	80054fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005432:	4b6a      	ldr	r3, [pc, #424]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	2200      	movs	r2, #0
 800543a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800543c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800543e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005444:	633b      	str	r3, [r7, #48]	@ 0x30
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
 800544a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f04f 0100 	mov.w	r1, #0
 800545a:	0159      	lsls	r1, r3, #5
 800545c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005460:	0150      	lsls	r0, r2, #5
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4621      	mov	r1, r4
 8005468:	1a51      	subs	r1, r2, r1
 800546a:	6139      	str	r1, [r7, #16]
 800546c:	4629      	mov	r1, r5
 800546e:	eb63 0301 	sbc.w	r3, r3, r1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005480:	4659      	mov	r1, fp
 8005482:	018b      	lsls	r3, r1, #6
 8005484:	4651      	mov	r1, sl
 8005486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800548a:	4651      	mov	r1, sl
 800548c:	018a      	lsls	r2, r1, #6
 800548e:	4651      	mov	r1, sl
 8005490:	ebb2 0801 	subs.w	r8, r2, r1
 8005494:	4659      	mov	r1, fp
 8005496:	eb63 0901 	sbc.w	r9, r3, r1
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ae:	4690      	mov	r8, r2
 80054b0:	4699      	mov	r9, r3
 80054b2:	4623      	mov	r3, r4
 80054b4:	eb18 0303 	adds.w	r3, r8, r3
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	462b      	mov	r3, r5
 80054bc:	eb49 0303 	adc.w	r3, r9, r3
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054ce:	4629      	mov	r1, r5
 80054d0:	024b      	lsls	r3, r1, #9
 80054d2:	4621      	mov	r1, r4
 80054d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054d8:	4621      	mov	r1, r4
 80054da:	024a      	lsls	r2, r1, #9
 80054dc:	4610      	mov	r0, r2
 80054de:	4619      	mov	r1, r3
 80054e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e2:	2200      	movs	r2, #0
 80054e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054ec:	f7fb fa86 	bl	80009fc <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4613      	mov	r3, r2
 80054f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f8:	e058      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fa:	4b38      	ldr	r3, [pc, #224]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x200>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	099b      	lsrs	r3, r3, #6
 8005500:	2200      	movs	r2, #0
 8005502:	4618      	mov	r0, r3
 8005504:	4611      	mov	r1, r2
 8005506:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	0159      	lsls	r1, r3, #5
 8005522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005526:	0150      	lsls	r0, r2, #5
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4641      	mov	r1, r8
 800552e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005532:	4649      	mov	r1, r9
 8005534:	eb63 0b01 	sbc.w	fp, r3, r1
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800554c:	ebb2 040a 	subs.w	r4, r2, sl
 8005550:	eb63 050b 	sbc.w	r5, r3, fp
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	00eb      	lsls	r3, r5, #3
 800555e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005562:	00e2      	lsls	r2, r4, #3
 8005564:	4614      	mov	r4, r2
 8005566:	461d      	mov	r5, r3
 8005568:	4643      	mov	r3, r8
 800556a:	18e3      	adds	r3, r4, r3
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	464b      	mov	r3, r9
 8005570:	eb45 0303 	adc.w	r3, r5, r3
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005582:	4629      	mov	r1, r5
 8005584:	028b      	lsls	r3, r1, #10
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800558c:	4621      	mov	r1, r4
 800558e:	028a      	lsls	r2, r1, #10
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005596:	2200      	movs	r2, #0
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	61fa      	str	r2, [r7, #28]
 800559c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a0:	f7fb fa2c 	bl	80009fc <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4613      	mov	r3, r2
 80055aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80055ac:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <HAL_RCC_GetSysClockFreq+0x200>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	0c1b      	lsrs	r3, r3, #16
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	3301      	adds	r3, #1
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055c6:	e002      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3750      	adds	r7, #80	@ 0x50
 80055d4:	46bd      	mov	sp, r7
 80055d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800
 80055e0:	00f42400 	.word	0x00f42400
 80055e4:	007a1200 	.word	0x007a1200

080055e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055ec:	4b03      	ldr	r3, [pc, #12]	@ (80055fc <HAL_RCC_GetHCLKFreq+0x14>)
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000004 	.word	0x20000004

08005600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005604:	f7ff fff0 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	0a9b      	lsrs	r3, r3, #10
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	4903      	ldr	r1, [pc, #12]	@ (8005624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005616:	5ccb      	ldrb	r3, [r1, r3]
 8005618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800561c:	4618      	mov	r0, r3
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40023800 	.word	0x40023800
 8005624:	0800aadc 	.word	0x0800aadc

08005628 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005628:	b084      	sub	sp, #16
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	f107 001c 	add.w	r0, r7, #28
 8005636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800563a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800563e:	2b01      	cmp	r3, #1
 8005640:	d123      	bne.n	800568a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005646:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800566a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 fae8 	bl	8006c54 <USB_CoreReset>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	e01b      	b.n	80056c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fadc 	bl	8006c54 <USB_CoreReset>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80056b4:	e005      	b.n	80056c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056c2:	7fbb      	ldrb	r3, [r7, #30]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10b      	bne.n	80056e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f043 0206 	orr.w	r2, r3, #6
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ec:	b004      	add	sp, #16
 80056ee:	4770      	bx	lr

080056f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d165      	bne.n	80057d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4a41      	ldr	r2, [pc, #260]	@ (800580c <USB_SetTurnaroundTime+0x11c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d906      	bls.n	800571a <USB_SetTurnaroundTime+0x2a>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4a40      	ldr	r2, [pc, #256]	@ (8005810 <USB_SetTurnaroundTime+0x120>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d202      	bcs.n	800571a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005714:	230f      	movs	r3, #15
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e062      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4a3c      	ldr	r2, [pc, #240]	@ (8005810 <USB_SetTurnaroundTime+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d306      	bcc.n	8005730 <USB_SetTurnaroundTime+0x40>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4a3b      	ldr	r2, [pc, #236]	@ (8005814 <USB_SetTurnaroundTime+0x124>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d202      	bcs.n	8005730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800572a:	230e      	movs	r3, #14
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e057      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a38      	ldr	r2, [pc, #224]	@ (8005814 <USB_SetTurnaroundTime+0x124>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d306      	bcc.n	8005746 <USB_SetTurnaroundTime+0x56>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4a37      	ldr	r2, [pc, #220]	@ (8005818 <USB_SetTurnaroundTime+0x128>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d202      	bcs.n	8005746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005740:	230d      	movs	r3, #13
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e04c      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a33      	ldr	r2, [pc, #204]	@ (8005818 <USB_SetTurnaroundTime+0x128>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d306      	bcc.n	800575c <USB_SetTurnaroundTime+0x6c>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4a32      	ldr	r2, [pc, #200]	@ (800581c <USB_SetTurnaroundTime+0x12c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d802      	bhi.n	800575c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005756:	230c      	movs	r3, #12
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e041      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a2f      	ldr	r2, [pc, #188]	@ (800581c <USB_SetTurnaroundTime+0x12c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d906      	bls.n	8005772 <USB_SetTurnaroundTime+0x82>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a2e      	ldr	r2, [pc, #184]	@ (8005820 <USB_SetTurnaroundTime+0x130>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d802      	bhi.n	8005772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800576c:	230b      	movs	r3, #11
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e036      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4a2a      	ldr	r2, [pc, #168]	@ (8005820 <USB_SetTurnaroundTime+0x130>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d906      	bls.n	8005788 <USB_SetTurnaroundTime+0x98>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4a29      	ldr	r2, [pc, #164]	@ (8005824 <USB_SetTurnaroundTime+0x134>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d802      	bhi.n	8005788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005782:	230a      	movs	r3, #10
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e02b      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a26      	ldr	r2, [pc, #152]	@ (8005824 <USB_SetTurnaroundTime+0x134>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d906      	bls.n	800579e <USB_SetTurnaroundTime+0xae>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4a25      	ldr	r2, [pc, #148]	@ (8005828 <USB_SetTurnaroundTime+0x138>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d202      	bcs.n	800579e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005798:	2309      	movs	r3, #9
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e020      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4a21      	ldr	r2, [pc, #132]	@ (8005828 <USB_SetTurnaroundTime+0x138>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d306      	bcc.n	80057b4 <USB_SetTurnaroundTime+0xc4>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4a20      	ldr	r2, [pc, #128]	@ (800582c <USB_SetTurnaroundTime+0x13c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d802      	bhi.n	80057b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057ae:	2308      	movs	r3, #8
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e015      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a1d      	ldr	r2, [pc, #116]	@ (800582c <USB_SetTurnaroundTime+0x13c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d906      	bls.n	80057ca <USB_SetTurnaroundTime+0xda>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a1c      	ldr	r2, [pc, #112]	@ (8005830 <USB_SetTurnaroundTime+0x140>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d202      	bcs.n	80057ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057c4:	2307      	movs	r3, #7
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e00a      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057ca:	2306      	movs	r3, #6
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e007      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80057d6:	2309      	movs	r3, #9
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e001      	b.n	80057e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057dc:	2309      	movs	r3, #9
 80057de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	029b      	lsls	r3, r3, #10
 80057f4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	00d8acbf 	.word	0x00d8acbf
 8005810:	00e4e1c0 	.word	0x00e4e1c0
 8005814:	00f42400 	.word	0x00f42400
 8005818:	01067380 	.word	0x01067380
 800581c:	011a499f 	.word	0x011a499f
 8005820:	01312cff 	.word	0x01312cff
 8005824:	014ca43f 	.word	0x014ca43f
 8005828:	016e3600 	.word	0x016e3600
 800582c:	01a6ab1f 	.word	0x01a6ab1f
 8005830:	01e84800 	.word	0x01e84800

08005834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f043 0201 	orr.w	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d115      	bne.n	80058c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058a6:	200a      	movs	r0, #10
 80058a8:	f7fc f8c0 	bl	8001a2c <HAL_Delay>
      ms += 10U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	330a      	adds	r3, #10
 80058b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 f93f 	bl	8006b36 <USB_GetMode>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d01e      	beq.n	80058fc <USB_SetCurrentMode+0x84>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80058c2:	d9f0      	bls.n	80058a6 <USB_SetCurrentMode+0x2e>
 80058c4:	e01a      	b.n	80058fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d115      	bne.n	80058f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058d8:	200a      	movs	r0, #10
 80058da:	f7fc f8a7 	bl	8001a2c <HAL_Delay>
      ms += 10U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	330a      	adds	r3, #10
 80058e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 f926 	bl	8006b36 <USB_GetMode>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <USB_SetCurrentMode+0x84>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80058f4:	d9f0      	bls.n	80058d8 <USB_SetCurrentMode+0x60>
 80058f6:	e001      	b.n	80058fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e005      	b.n	8005908 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2bc8      	cmp	r3, #200	@ 0xc8
 8005900:	d101      	bne.n	8005906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005910:	b084      	sub	sp, #16
 8005912:	b580      	push	{r7, lr}
 8005914:	b086      	sub	sp, #24
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800591e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	e009      	b.n	8005944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3340      	adds	r3, #64	@ 0x40
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	3301      	adds	r3, #1
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b0e      	cmp	r3, #14
 8005948:	d9f2      	bls.n	8005930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800594a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11c      	bne.n	800598c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005960:	f043 0302 	orr.w	r3, r3, #2
 8005964:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
 800598a:	e00b      	b.n	80059a4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005990:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059aa:	461a      	mov	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10d      	bne.n	80059d4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059c0:	2100      	movs	r1, #0
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f968 	bl	8005c98 <USB_SetDevSpeed>
 80059c8:	e008      	b.n	80059dc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059ca:	2101      	movs	r1, #1
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f963 	bl	8005c98 <USB_SetDevSpeed>
 80059d2:	e003      	b.n	80059dc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059d4:	2103      	movs	r1, #3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f95e 	bl	8005c98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059dc:	2110      	movs	r1, #16
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f8fa 	bl	8005bd8 <USB_FlushTxFifo>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f924 	bl	8005c3c <USB_FlushRxFifo>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a10:	461a      	mov	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a22:	2300      	movs	r3, #0
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	e043      	b.n	8005ab0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a3e:	d118      	bne.n	8005a72 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a52:	461a      	mov	r2, r3
 8005a54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	e013      	b.n	8005a84 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e008      	b.n	8005a84 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7e:	461a      	mov	r2, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	2300      	movs	r3, #0
 8005a94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005aa8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3301      	adds	r3, #1
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d3b5      	bcc.n	8005a28 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e043      	b.n	8005b4a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ad8:	d118      	bne.n	8005b0c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aec:	461a      	mov	r2, r3
 8005aee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	e013      	b.n	8005b1e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b02:	461a      	mov	r2, r3
 8005b04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e008      	b.n	8005b1e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b18:	461a      	mov	r2, r3
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3301      	adds	r3, #1
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b4e:	461a      	mov	r2, r3
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d3b5      	bcc.n	8005ac2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f043 0210 	orr.w	r2, r3, #16
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	4b10      	ldr	r3, [pc, #64]	@ (8005bd4 <USB_DevInit+0x2c4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f043 0208 	orr.w	r2, r3, #8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bbc:	f043 0304 	orr.w	r3, r3, #4
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd0:	b004      	add	sp, #16
 8005bd2:	4770      	bx	lr
 8005bd4:	803c3800 	.word	0x803c3800

08005bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bf2:	d901      	bls.n	8005bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e01b      	b.n	8005c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	daf2      	bge.n	8005be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	019b      	lsls	r3, r3, #6
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1c:	d901      	bls.n	8005c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e006      	b.n	8005c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d0f0      	beq.n	8005c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c54:	d901      	bls.n	8005c5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e018      	b.n	8005c8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	daf2      	bge.n	8005c48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c78:	d901      	bls.n	8005c7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e006      	b.n	8005c8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d0f0      	beq.n	8005c6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b087      	sub	sp, #28
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 0306 	and.w	r3, r3, #6
 8005ce2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005cea:	2300      	movs	r3, #0
 8005cec:	75fb      	strb	r3, [r7, #23]
 8005cee:	e00a      	b.n	8005d06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d002      	beq.n	8005cfc <USB_GetDevSpeed+0x32>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b06      	cmp	r3, #6
 8005cfa:	d102      	bne.n	8005d02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	75fb      	strb	r3, [r7, #23]
 8005d00:	e001      	b.n	8005d06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d02:	230f      	movs	r3, #15
 8005d04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d13a      	bne.n	8005da6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	2101      	movs	r1, #1
 8005d42:	fa01 f303 	lsl.w	r3, r1, r3
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d155      	bne.n	8005e14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	791b      	ldrb	r3, [r3, #4]
 8005d82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	059b      	lsls	r3, r3, #22
 8005d8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	e036      	b.n	8005e14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	2101      	movs	r1, #1
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11a      	bne.n	8005e14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	791b      	ldrb	r3, [r3, #4]
 8005df8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
	...

08005e24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d161      	bne.n	8005f04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e56:	d11f      	bne.n	8005e98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eb8:	4013      	ands	r3, r2
 8005eba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	2101      	movs	r1, #1
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005edc:	4013      	ands	r3, r2
 8005ede:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	0159      	lsls	r1, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	440b      	add	r3, r1
 8005ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efa:	4619      	mov	r1, r3
 8005efc:	4b35      	ldr	r3, [pc, #212]	@ (8005fd4 <USB_DeactivateEndpoint+0x1b0>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	600b      	str	r3, [r1, #0]
 8005f02:	e060      	b.n	8005fc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f1a:	d11f      	bne.n	8005f5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	43db      	mvns	r3, r3
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	2101      	movs	r1, #1
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	0159      	lsls	r1, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <USB_DeactivateEndpoint+0x1b4>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	ec337800 	.word	0xec337800
 8005fd8:	eff37800 	.word	0xeff37800

08005fdc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	@ 0x28
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	f040 817f 	bne.w	80062fc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d132      	bne.n	800606c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006020:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006024:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	69fa      	ldr	r2, [r7, #28]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006064:	0cdb      	lsrs	r3, r3, #19
 8006066:	04db      	lsls	r3, r3, #19
 8006068:	6113      	str	r3, [r2, #16]
 800606a:	e097      	b.n	800619c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006086:	0cdb      	lsrs	r3, r3, #19
 8006088:	04db      	lsls	r3, r3, #19
 800608a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060ae:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d11a      	bne.n	80060ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d903      	bls.n	80060ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060e8:	6113      	str	r3, [r2, #16]
 80060ea:	e044      	b.n	8006176 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4413      	add	r3, r2
 80060f6:	1e5a      	subs	r2, r3, #1
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	8afb      	ldrh	r3, [r7, #22]
 8006112:	04d9      	lsls	r1, r3, #19
 8006114:	4ba4      	ldr	r3, [pc, #656]	@ (80063a8 <USB_EPStartXfer+0x3cc>)
 8006116:	400b      	ands	r3, r1
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	0148      	lsls	r0, r1, #5
 800611c:	69f9      	ldr	r1, [r7, #28]
 800611e:	4401      	add	r1, r0
 8006120:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006124:	4313      	orrs	r3, r2
 8006126:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	791b      	ldrb	r3, [r3, #4]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d122      	bne.n	8006176 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800614e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	8afb      	ldrh	r3, [r7, #22]
 8006160:	075b      	lsls	r3, r3, #29
 8006162:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006166:	69b9      	ldr	r1, [r7, #24]
 8006168:	0148      	lsls	r0, r1, #5
 800616a:	69f9      	ldr	r1, [r7, #28]
 800616c:	4401      	add	r1, r0
 800616e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618c:	69b9      	ldr	r1, [r7, #24]
 800618e:	0148      	lsls	r0, r1, #5
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	4401      	add	r1, r0
 8006194:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006198:	4313      	orrs	r3, r2
 800619a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d14b      	bne.n	800623a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	791b      	ldrb	r3, [r3, #4]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d128      	bne.n	8006218 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d110      	bne.n	80061f8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061f4:	6013      	str	r3, [r2, #0]
 80061f6:	e00f      	b.n	8006218 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006216:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006232:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	e166      	b.n	8006508 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006254:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006258:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	791b      	ldrb	r3, [r3, #4]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d015      	beq.n	800628e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 814e 	beq.w	8006508 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f303 	lsl.w	r3, r1, r3
 8006282:	69f9      	ldr	r1, [r7, #28]
 8006284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006288:	4313      	orrs	r3, r2
 800628a:	634b      	str	r3, [r1, #52]	@ 0x34
 800628c:	e13c      	b.n	8006508 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629a:	2b00      	cmp	r3, #0
 800629c:	d110      	bne.n	80062c0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e00f      	b.n	80062e0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68d9      	ldr	r1, [r3, #12]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	b298      	uxth	r0, r3
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	4603      	mov	r3, r0
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f9b9 	bl	800666c <USB_WritePacket>
 80062fa:	e105      	b.n	8006508 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006316:	0cdb      	lsrs	r3, r3, #19
 8006318:	04db      	lsls	r3, r3, #19
 800631a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006336:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800633a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800633e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d132      	bne.n	80063ac <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	015a      	lsls	r2, r3, #5
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4413      	add	r3, r2
 8006366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006374:	69b9      	ldr	r1, [r7, #24]
 8006376:	0148      	lsls	r0, r1, #5
 8006378:	69f9      	ldr	r1, [r7, #28]
 800637a:	4401      	add	r1, r0
 800637c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006380:	4313      	orrs	r3, r2
 8006382:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800639e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063a2:	6113      	str	r3, [r2, #16]
 80063a4:	e062      	b.n	800646c <USB_EPStartXfer+0x490>
 80063a6:	bf00      	nop
 80063a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d123      	bne.n	80063fc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	0148      	lsls	r0, r1, #5
 80063ce:	69f9      	ldr	r1, [r7, #28]
 80063d0:	4401      	add	r1, r0
 80063d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063d6:	4313      	orrs	r3, r2
 80063d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063f8:	6113      	str	r3, [r2, #16]
 80063fa:	e037      	b.n	800646c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4413      	add	r3, r2
 8006406:	1e5a      	subs	r2, r3, #1
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006410:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	8afa      	ldrh	r2, [r7, #22]
 8006418:	fb03 f202 	mul.w	r2, r3, r2
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	8afb      	ldrh	r3, [r7, #22]
 8006430:	04d9      	lsls	r1, r3, #19
 8006432:	4b38      	ldr	r3, [pc, #224]	@ (8006514 <USB_EPStartXfer+0x538>)
 8006434:	400b      	ands	r3, r1
 8006436:	69b9      	ldr	r1, [r7, #24]
 8006438:	0148      	lsls	r0, r1, #5
 800643a:	69f9      	ldr	r1, [r7, #28]
 800643c:	4401      	add	r1, r0
 800643e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006442:	4313      	orrs	r3, r2
 8006444:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	0148      	lsls	r0, r1, #5
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	4401      	add	r1, r0
 8006464:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006468:	4313      	orrs	r3, r2
 800646a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d10d      	bne.n	800648e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	68d9      	ldr	r1, [r3, #12]
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648a:	460a      	mov	r2, r1
 800648c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	791b      	ldrb	r3, [r3, #4]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d128      	bne.n	80064e8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d110      	bne.n	80064c8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e00f      	b.n	80064e8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	69fa      	ldr	r2, [r7, #28]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006502:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	1ff80000 	.word	0x1ff80000

08006518 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d14a      	bne.n	80065cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800654a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800654e:	f040 8086 	bne.w	800665e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006570:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006574:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d902      	bls.n	80065b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
          break;
 80065ae:	e056      	b.n	800665e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065c8:	d0e7      	beq.n	800659a <USB_EPStopXfer+0x82>
 80065ca:	e048      	b.n	800665e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e4:	d13b      	bne.n	800665e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006604:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006608:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006628:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800662c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f242 7210 	movw	r2, #10000	@ 0x2710
 800663a:	4293      	cmp	r3, r2
 800663c:	d902      	bls.n	8006644 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	75fb      	strb	r3, [r7, #23]
          break;
 8006642:	e00c      	b.n	800665e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800665c:	d0e7      	beq.n	800662e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	@ 0x24
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4611      	mov	r1, r2
 8006678:	461a      	mov	r2, r3
 800667a:	460b      	mov	r3, r1
 800667c:	71fb      	strb	r3, [r7, #7]
 800667e:	4613      	mov	r3, r2
 8006680:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800668a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800668e:	2b00      	cmp	r3, #0
 8006690:	d123      	bne.n	80066da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006692:	88bb      	ldrh	r3, [r7, #4]
 8006694:	3303      	adds	r3, #3
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e018      	b.n	80066d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	031a      	lsls	r2, r3, #12
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ac:	461a      	mov	r2, r3
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	3301      	adds	r3, #1
 80066be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3301      	adds	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d3e2      	bcc.n	80066a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3724      	adds	r7, #36	@ 0x24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b08b      	sub	sp, #44	@ 0x2c
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	089b      	lsrs	r3, r3, #2
 8006702:	b29b      	uxth	r3, r3
 8006704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	f003 0303 	and.w	r3, r3, #3
 800670c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800670e:	2300      	movs	r3, #0
 8006710:	623b      	str	r3, [r7, #32]
 8006712:	e014      	b.n	800673e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006722:	3301      	adds	r3, #1
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	3301      	adds	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	3301      	adds	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006738:	6a3b      	ldr	r3, [r7, #32]
 800673a:	3301      	adds	r3, #1
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	429a      	cmp	r2, r3
 8006744:	d3e6      	bcc.n	8006714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006746:	8bfb      	ldrh	r3, [r7, #30]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01e      	beq.n	800678a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006756:	461a      	mov	r2, r3
 8006758:	f107 0310 	add.w	r3, r7, #16
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	fa22 f303 	lsr.w	r3, r2, r3
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	701a      	strb	r2, [r3, #0]
      i++;
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	3301      	adds	r3, #1
 8006776:	623b      	str	r3, [r7, #32]
      pDest++;
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	3301      	adds	r3, #1
 800677c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800677e:	8bfb      	ldrh	r3, [r7, #30]
 8006780:	3b01      	subs	r3, #1
 8006782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006784:	8bfb      	ldrh	r3, [r7, #30]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1ea      	bne.n	8006760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800678c:	4618      	mov	r0, r3
 800678e:	372c      	adds	r7, #44	@ 0x2c
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d12c      	bne.n	800680e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	db12      	blt.n	80067ec <USB_EPSetStall+0x54>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00f      	beq.n	80067ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80067ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006806:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	e02b      	b.n	8006866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db12      	blt.n	8006846 <USB_EPSetStall+0xae>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00f      	beq.n	8006846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006840:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	440a      	add	r2, r1
 800685c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d128      	bne.n	80068e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	791b      	ldrb	r3, [r3, #4]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d003      	beq.n	80068c0 <USB_EPClearStall+0x4c>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	791b      	ldrb	r3, [r3, #4]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d138      	bne.n	8006932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	e027      	b.n	8006932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	791b      	ldrb	r3, [r3, #4]
 8006906:	2b03      	cmp	r3, #3
 8006908:	d003      	beq.n	8006912 <USB_EPClearStall+0x9e>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	791b      	ldrb	r3, [r3, #4]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d10f      	bne.n	8006932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800692c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800695e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006962:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069ba:	f023 0302 	bic.w	r3, r3, #2
 80069be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4013      	ands	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a28:	68fb      	ldr	r3, [r7, #12]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	0c1b      	lsrs	r3, r3, #16
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	b29b      	uxth	r3, r3
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006acc:	68bb      	ldr	r3, [r7, #8]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006afc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0a:	01db      	lsls	r3, r3, #7
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4013      	ands	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b28:	68bb      	ldr	r3, [r7, #8]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f003 0301 	and.w	r3, r3, #1
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b70:	f023 0307 	bic.w	r3, r3, #7
 8006b74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	333c      	adds	r3, #60	@ 0x3c
 8006bae:	3304      	adds	r3, #4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	4a26      	ldr	r2, [pc, #152]	@ (8006c50 <USB_EP0_OutStart+0xb8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d90a      	bls.n	8006bd2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bcc:	d101      	bne.n	8006bd2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e037      	b.n	8006c42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c00:	f043 0318 	orr.w	r3, r3, #24
 8006c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c14:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10f      	bne.n	8006c40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c3a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	4f54300a 	.word	0x4f54300a

08006c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c6c:	d901      	bls.n	8006c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e022      	b.n	8006cb8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	daf2      	bge.n	8006c60 <USB_CoreReset+0xc>

  count = 10U;
 8006c7a:	230a      	movs	r3, #10
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006c7e:	e002      	b.n	8006c86 <USB_CoreReset+0x32>
  {
    count--;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f9      	bne.n	8006c80 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f043 0201 	orr.w	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ca4:	d901      	bls.n	8006caa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e006      	b.n	8006cb8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d0f0      	beq.n	8006c98 <USB_CoreReset+0x44>

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cd0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006cd4:	f002 fcbc 	bl	8009650 <USBD_static_malloc>
 8006cd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d109      	bne.n	8006cf4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32b0      	adds	r2, #176	@ 0xb0
 8006cea:	2100      	movs	r1, #0
 8006cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e0d4      	b.n	8006e9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006cf4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f003 f908 	bl	8009f10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	@ 0xb0
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32b0      	adds	r2, #176	@ 0xb0
 8006d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7c1b      	ldrb	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d138      	bne.n	8006d9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006d2e:	7819      	ldrb	r1, [r3, #0]
 8006d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d34:	2202      	movs	r2, #2
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f002 fb67 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 020f 	and.w	r2, r3, #15
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3323      	adds	r3, #35	@ 0x23
 8006d52:	2201      	movs	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d56:	4b55      	ldr	r3, [pc, #340]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006d58:	7819      	ldrb	r1, [r3, #0]
 8006d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d5e:	2202      	movs	r2, #2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 fb52 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d66:	4b51      	ldr	r3, [pc, #324]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	f003 020f 	and.w	r2, r3, #15
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006d7e:	2201      	movs	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d82:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	331c      	adds	r3, #28
 8006d98:	2210      	movs	r2, #16
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	e035      	b.n	8006e0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d9e:	4b42      	ldr	r3, [pc, #264]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006da0:	7819      	ldrb	r1, [r3, #0]
 8006da2:	2340      	movs	r3, #64	@ 0x40
 8006da4:	2202      	movs	r2, #2
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f002 fb2f 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dac:	4b3e      	ldr	r3, [pc, #248]	@ (8006ea8 <USBD_CDC_Init+0x1e4>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3323      	adds	r3, #35	@ 0x23
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dc6:	4b39      	ldr	r3, [pc, #228]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006dc8:	7819      	ldrb	r1, [r3, #0]
 8006dca:	2340      	movs	r3, #64	@ 0x40
 8006dcc:	2202      	movs	r2, #2
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 fb1b 	bl	800940a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dd4:	4b35      	ldr	r3, [pc, #212]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006df0:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	331c      	adds	r3, #28
 8006e06:	2210      	movs	r2, #16
 8006e08:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e0a:	4b29      	ldr	r3, [pc, #164]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006e0c:	7819      	ldrb	r1, [r3, #0]
 8006e0e:	2308      	movs	r3, #8
 8006e10:	2203      	movs	r2, #3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 faf9 	bl	800940a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e18:	4b25      	ldr	r3, [pc, #148]	@ (8006eb0 <USBD_CDC_Init+0x1ec>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3323      	adds	r3, #35	@ 0x23
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	33b0      	adds	r3, #176	@ 0xb0
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e018      	b.n	8006e9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7c1b      	ldrb	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e74:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006e76:	7819      	ldrb	r1, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f002 fbb0 	bl	80095e8 <USBD_LL_PrepareReceive>
 8006e88:	e008      	b.n	8006e9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e8a:	4b08      	ldr	r3, [pc, #32]	@ (8006eac <USBD_CDC_Init+0x1e8>)
 8006e8c:	7819      	ldrb	r1, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e94:	2340      	movs	r3, #64	@ 0x40
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 fba6 	bl	80095e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000097 	.word	0x20000097
 8006eac:	20000098 	.word	0x20000098
 8006eb0:	20000099 	.word	0x20000099

08006eb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fac <USBD_CDC_DeInit+0xf8>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f002 fac5 	bl	8009456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ecc:	4b37      	ldr	r3, [pc, #220]	@ (8006fac <USBD_CDC_DeInit+0xf8>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	6879      	ldr	r1, [r7, #4]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3323      	adds	r3, #35	@ 0x23
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ee6:	4b32      	ldr	r3, [pc, #200]	@ (8006fb0 <USBD_CDC_DeInit+0xfc>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f002 fab2 	bl	8009456 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb0 <USBD_CDC_DeInit+0xfc>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f0e:	4b29      	ldr	r3, [pc, #164]	@ (8006fb4 <USBD_CDC_DeInit+0x100>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f002 fa9e 	bl	8009456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f1a:	4b26      	ldr	r3, [pc, #152]	@ (8006fb4 <USBD_CDC_DeInit+0x100>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f003 020f 	and.w	r2, r3, #15
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	3323      	adds	r3, #35	@ 0x23
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f34:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb4 <USBD_CDC_DeInit+0x100>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	f003 020f 	and.w	r2, r3, #15
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	331c      	adds	r3, #28
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	32b0      	adds	r2, #176	@ 0xb0
 8006f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01f      	beq.n	8006fa0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	33b0      	adds	r3, #176	@ 0xb0
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	32b0      	adds	r2, #176	@ 0xb0
 8006f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 fb72 	bl	800966c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	32b0      	adds	r2, #176	@ 0xb0
 8006f92:	2100      	movs	r1, #0
 8006f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000097 	.word	0x20000097
 8006fb0:	20000098 	.word	0x20000098
 8006fb4:	20000099 	.word	0x20000099

08006fb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	32b0      	adds	r2, #176	@ 0xb0
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e0bf      	b.n	8007168 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d050      	beq.n	8007096 <USBD_CDC_Setup+0xde>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 80af 	bne.w	8007158 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d03a      	beq.n	8007078 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b25b      	sxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	da1b      	bge.n	8007044 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	33b0      	adds	r3, #176	@ 0xb0
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007022:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	88d2      	ldrh	r2, [r2, #6]
 8007028:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	88db      	ldrh	r3, [r3, #6]
 800702e:	2b07      	cmp	r3, #7
 8007030:	bf28      	it	cs
 8007032:	2307      	movcs	r3, #7
 8007034:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	89fa      	ldrh	r2, [r7, #14]
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fda9 	bl	8008b94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007042:	e090      	b.n	8007166 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	785a      	ldrb	r2, [r3, #1]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	88db      	ldrh	r3, [r3, #6]
 8007052:	2b3f      	cmp	r3, #63	@ 0x3f
 8007054:	d803      	bhi.n	800705e <USBD_CDC_Setup+0xa6>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	e000      	b.n	8007060 <USBD_CDC_Setup+0xa8>
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007066:	6939      	ldr	r1, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800706e:	461a      	mov	r2, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fdbe 	bl	8008bf2 <USBD_CtlPrepareRx>
      break;
 8007076:	e076      	b.n	8007166 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	33b0      	adds	r3, #176	@ 0xb0
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	7850      	ldrb	r0, [r2, #1]
 800708e:	2200      	movs	r2, #0
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	4798      	blx	r3
      break;
 8007094:	e067      	b.n	8007166 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b0b      	cmp	r3, #11
 800709c:	d851      	bhi.n	8007142 <USBD_CDC_Setup+0x18a>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <USBD_CDC_Setup+0xec>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007143 	.word	0x08007143
 80070b0:	08007143 	.word	0x08007143
 80070b4:	08007143 	.word	0x08007143
 80070b8:	08007143 	.word	0x08007143
 80070bc:	08007143 	.word	0x08007143
 80070c0:	08007143 	.word	0x08007143
 80070c4:	08007143 	.word	0x08007143
 80070c8:	08007143 	.word	0x08007143
 80070cc:	080070ff 	.word	0x080070ff
 80070d0:	08007129 	.word	0x08007129
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d107      	bne.n	80070f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070e0:	f107 030a 	add.w	r3, r7, #10
 80070e4:	2202      	movs	r2, #2
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fd53 	bl	8008b94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070ee:	e032      	b.n	8007156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 fcd1 	bl	8008a9a <USBD_CtlError>
            ret = USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	75fb      	strb	r3, [r7, #23]
          break;
 80070fc:	e02b      	b.n	8007156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d107      	bne.n	800711a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800710a:	f107 030d 	add.w	r3, r7, #13
 800710e:	2201      	movs	r2, #1
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fd3e 	bl	8008b94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007118:	e01d      	b.n	8007156 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fcbc 	bl	8008a9a <USBD_CtlError>
            ret = USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	75fb      	strb	r3, [r7, #23]
          break;
 8007126:	e016      	b.n	8007156 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b03      	cmp	r3, #3
 8007132:	d00f      	beq.n	8007154 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fcaf 	bl	8008a9a <USBD_CtlError>
            ret = USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007140:	e008      	b.n	8007154 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fca8 	bl	8008a9a <USBD_CtlError>
          ret = USBD_FAIL;
 800714a:	2303      	movs	r3, #3
 800714c:	75fb      	strb	r3, [r7, #23]
          break;
 800714e:	e002      	b.n	8007156 <USBD_CDC_Setup+0x19e>
          break;
 8007150:	bf00      	nop
 8007152:	e008      	b.n	8007166 <USBD_CDC_Setup+0x1ae>
          break;
 8007154:	bf00      	nop
      }
      break;
 8007156:	e006      	b.n	8007166 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fc9d 	bl	8008a9a <USBD_CtlError>
      ret = USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	75fb      	strb	r3, [r7, #23]
      break;
 8007164:	bf00      	nop
  }

  return (uint8_t)ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007182:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	32b0      	adds	r2, #176	@ 0xb0
 800718e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007196:	2303      	movs	r3, #3
 8007198:	e065      	b.n	8007266 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	32b0      	adds	r2, #176	@ 0xb0
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	3314      	adds	r3, #20
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d02f      	beq.n	8007224 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071c4:	78fb      	ldrb	r3, [r7, #3]
 80071c6:	f003 020f 	and.w	r2, r3, #15
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	3314      	adds	r3, #20
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	f003 010f 	and.w	r1, r3, #15
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	460b      	mov	r3, r1
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	440b      	add	r3, r1
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4403      	add	r3, r0
 80071ec:	331c      	adds	r3, #28
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d112      	bne.n	8007224 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	f003 020f 	and.w	r2, r3, #15
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	3314      	adds	r3, #20
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007216:	78f9      	ldrb	r1, [r7, #3]
 8007218:	2300      	movs	r3, #0
 800721a:	2200      	movs	r2, #0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f002 f9c2 	bl	80095a6 <USBD_LL_Transmit>
 8007222:	e01f      	b.n	8007264 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2200      	movs	r2, #0
 8007228:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	33b0      	adds	r3, #176	@ 0xb0
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d010      	beq.n	8007264 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	33b0      	adds	r3, #176	@ 0xb0
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	32b0      	adds	r2, #176	@ 0xb0
 8007284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007288:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32b0      	adds	r2, #176	@ 0xb0
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e01a      	b.n	80072d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f002 f9c0 	bl	800962a <USBD_LL_GetRxDataSize>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	33b0      	adds	r3, #176	@ 0xb0
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80072d0:	4611      	mov	r1, r2
 80072d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32b0      	adds	r2, #176	@ 0xb0
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e024      	b.n	800734a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	33b0      	adds	r3, #176	@ 0xb0
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d019      	beq.n	8007348 <USBD_CDC_EP0_RxReady+0x6a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800731a:	2bff      	cmp	r3, #255	@ 0xff
 800731c:	d014      	beq.n	8007348 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	33b0      	adds	r3, #176	@ 0xb0
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007336:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800733e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	22ff      	movs	r2, #255	@ 0xff
 8007344:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800735c:	2182      	movs	r1, #130	@ 0x82
 800735e:	4818      	ldr	r0, [pc, #96]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007360:	f000 fd62 	bl	8007e28 <USBD_GetEpDesc>
 8007364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007366:	2101      	movs	r1, #1
 8007368:	4815      	ldr	r0, [pc, #84]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800736a:	f000 fd5d 	bl	8007e28 <USBD_GetEpDesc>
 800736e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007370:	2181      	movs	r1, #129	@ 0x81
 8007372:	4813      	ldr	r0, [pc, #76]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007374:	f000 fd58 	bl	8007e28 <USBD_GetEpDesc>
 8007378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2210      	movs	r2, #16
 8007384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d006      	beq.n	800739a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2200      	movs	r2, #0
 8007390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007394:	711a      	strb	r2, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073a8:	711a      	strb	r2, [r3, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2243      	movs	r2, #67	@ 0x43
 80073b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073b4:	4b02      	ldr	r3, [pc, #8]	@ (80073c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000054 	.word	0x20000054

080073c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073cc:	2182      	movs	r1, #130	@ 0x82
 80073ce:	4818      	ldr	r0, [pc, #96]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073d0:	f000 fd2a 	bl	8007e28 <USBD_GetEpDesc>
 80073d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073d6:	2101      	movs	r1, #1
 80073d8:	4815      	ldr	r0, [pc, #84]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073da:	f000 fd25 	bl	8007e28 <USBD_GetEpDesc>
 80073de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073e0:	2181      	movs	r1, #129	@ 0x81
 80073e2:	4813      	ldr	r0, [pc, #76]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073e4:	f000 fd20 	bl	8007e28 <USBD_GetEpDesc>
 80073e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2210      	movs	r2, #16
 80073f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d006      	beq.n	800740a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2200      	movs	r2, #0
 8007400:	711a      	strb	r2, [r3, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f042 0202 	orr.w	r2, r2, #2
 8007408:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d006      	beq.n	800741e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	711a      	strb	r2, [r3, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f042 0202 	orr.w	r2, r2, #2
 800741c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2243      	movs	r2, #67	@ 0x43
 8007422:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007424:	4b02      	ldr	r3, [pc, #8]	@ (8007430 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000054 	.word	0x20000054

08007434 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800743c:	2182      	movs	r1, #130	@ 0x82
 800743e:	4818      	ldr	r0, [pc, #96]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007440:	f000 fcf2 	bl	8007e28 <USBD_GetEpDesc>
 8007444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007446:	2101      	movs	r1, #1
 8007448:	4815      	ldr	r0, [pc, #84]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800744a:	f000 fced 	bl	8007e28 <USBD_GetEpDesc>
 800744e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007450:	2181      	movs	r1, #129	@ 0x81
 8007452:	4813      	ldr	r0, [pc, #76]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007454:	f000 fce8 	bl	8007e28 <USBD_GetEpDesc>
 8007458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2210      	movs	r2, #16
 8007464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d006      	beq.n	800747a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2200      	movs	r2, #0
 8007470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007474:	711a      	strb	r2, [r3, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007488:	711a      	strb	r2, [r3, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2243      	movs	r2, #67	@ 0x43
 8007492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007494:	4b02      	ldr	r3, [pc, #8]	@ (80074a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	20000054 	.word	0x20000054

080074a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	220a      	movs	r2, #10
 80074b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074b2:	4b03      	ldr	r3, [pc, #12]	@ (80074c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	20000010 	.word	0x20000010

080074c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e009      	b.n	80074ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	33b0      	adds	r3, #176	@ 0xb0
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	32b0      	adds	r2, #176	@ 0xb0
 800750e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007512:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d101      	bne.n	800751e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800751a:	2303      	movs	r3, #3
 800751c:	e008      	b.n	8007530 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	32b0      	adds	r2, #176	@ 0xb0
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e004      	b.n	800756a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
	...

08007578 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	32b0      	adds	r2, #176	@ 0xb0
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	e025      	b.n	80075ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11f      	bne.n	80075e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075b0:	4b10      	ldr	r3, [pc, #64]	@ (80075f4 <USBD_CDC_TransmitPacket+0x7c>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 020f 	and.w	r2, r3, #15
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	4613      	mov	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4403      	add	r3, r0
 80075ca:	3314      	adds	r3, #20
 80075cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075ce:	4b09      	ldr	r3, [pc, #36]	@ (80075f4 <USBD_CDC_TransmitPacket+0x7c>)
 80075d0:	7819      	ldrb	r1, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 ffe1 	bl	80095a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000097 	.word	0x20000097

080075f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32b0      	adds	r2, #176	@ 0xb0
 800760a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32b0      	adds	r2, #176	@ 0xb0
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007622:	2303      	movs	r3, #3
 8007624:	e018      	b.n	8007658 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	7c1b      	ldrb	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800762e:	4b0c      	ldr	r3, [pc, #48]	@ (8007660 <USBD_CDC_ReceivePacket+0x68>)
 8007630:	7819      	ldrb	r1, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 ffd3 	bl	80095e8 <USBD_LL_PrepareReceive>
 8007642:	e008      	b.n	8007656 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <USBD_CDC_ReceivePacket+0x68>)
 8007646:	7819      	ldrb	r1, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800764e:	2340      	movs	r3, #64	@ 0x40
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 ffc9 	bl	80095e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000098 	.word	0x20000098

08007664 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e01f      	b.n	80076bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 fe43 	bl	800933c <USBD_LL_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e025      	b.n	8007728 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32ae      	adds	r2, #174	@ 0xae
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00f      	beq.n	8007718 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	32ae      	adds	r2, #174	@ 0xae
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007708:	f107 020e 	add.w	r2, r7, #14
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	4602      	mov	r2, r0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800771e:	1c5a      	adds	r2, r3, #1
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 fe4b 	bl	80093d4 <USBD_LL_Start>
 800773e:	4603      	mov	r3, r0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d009      	beq.n	800778c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	78fa      	ldrb	r2, [r7, #3]
 8007782:	4611      	mov	r1, r2
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 f922 	bl	8008a26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077fe:	f003 031f 	and.w	r3, r3, #31
 8007802:	2b02      	cmp	r3, #2
 8007804:	d01a      	beq.n	800783c <USBD_LL_SetupStage+0x72>
 8007806:	2b02      	cmp	r3, #2
 8007808:	d822      	bhi.n	8007850 <USBD_LL_SetupStage+0x86>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <USBD_LL_SetupStage+0x4a>
 800780e:	2b01      	cmp	r3, #1
 8007810:	d00a      	beq.n	8007828 <USBD_LL_SetupStage+0x5e>
 8007812:	e01d      	b.n	8007850 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800781a:	4619      	mov	r1, r3
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb77 	bl	8007f10 <USBD_StdDevReq>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
      break;
 8007826:	e020      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbdf 	bl	8007ff4 <USBD_StdItfReq>
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
      break;
 800783a:	e016      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc41 	bl	80080cc <USBD_StdEPReq>
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
      break;
 800784e:	e00c      	b.n	800786a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007856:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800785a:	b2db      	uxtb	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f001 fe18 	bl	8009494 <USBD_LL_StallEP>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	bf00      	nop
  }

  return ret;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	460b      	mov	r3, r1
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d177      	bne.n	800797c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007892:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800789a:	2b03      	cmp	r3, #3
 800789c:	f040 80a1 	bne.w	80079e2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	8992      	ldrh	r2, [r2, #12]
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d91c      	bls.n	80078e6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	8992      	ldrh	r2, [r2, #12]
 80078b4:	1a9a      	subs	r2, r3, r2
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	8992      	ldrh	r2, [r2, #12]
 80078c2:	441a      	add	r2, r3
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6919      	ldr	r1, [r3, #16]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	899b      	ldrh	r3, [r3, #12]
 80078d0:	461a      	mov	r2, r3
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4293      	cmp	r3, r2
 80078d8:	bf38      	it	cc
 80078da:	4613      	movcc	r3, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f001 f9a8 	bl	8008c34 <USBD_CtlContinueRx>
 80078e4:	e07d      	b.n	80079e2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d014      	beq.n	800791e <USBD_LL_DataOutStage+0xaa>
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d81d      	bhi.n	8007934 <USBD_LL_DataOutStage+0xc0>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <USBD_LL_DataOutStage+0x8e>
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d003      	beq.n	8007908 <USBD_LL_DataOutStage+0x94>
 8007900:	e018      	b.n	8007934 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	75bb      	strb	r3, [r7, #22]
            break;
 8007906:	e018      	b.n	800793a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fa6e 	bl	8007df4 <USBD_CoreFindIF>
 8007918:	4603      	mov	r3, r0
 800791a:	75bb      	strb	r3, [r7, #22]
            break;
 800791c:	e00d      	b.n	800793a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007924:	b2db      	uxtb	r3, r3
 8007926:	4619      	mov	r1, r3
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fa70 	bl	8007e0e <USBD_CoreFindEP>
 800792e:	4603      	mov	r3, r0
 8007930:	75bb      	strb	r3, [r7, #22]
            break;
 8007932:	e002      	b.n	800793a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	75bb      	strb	r3, [r7, #22]
            break;
 8007938:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800793a:	7dbb      	ldrb	r3, [r7, #22]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d119      	bne.n	8007974 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b03      	cmp	r3, #3
 800794a:	d113      	bne.n	8007974 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800794c:	7dba      	ldrb	r2, [r7, #22]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	32ae      	adds	r2, #174	@ 0xae
 8007952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00b      	beq.n	8007974 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800795c:	7dba      	ldrb	r2, [r7, #22]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007964:	7dba      	ldrb	r2, [r7, #22]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	32ae      	adds	r2, #174	@ 0xae
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 f96e 	bl	8008c56 <USBD_CtlSendStatus>
 800797a:	e032      	b.n	80079e2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007982:	b2db      	uxtb	r3, r3
 8007984:	4619      	mov	r1, r3
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 fa41 	bl	8007e0e <USBD_CoreFindEP>
 800798c:	4603      	mov	r3, r0
 800798e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007990:	7dbb      	ldrb	r3, [r7, #22]
 8007992:	2bff      	cmp	r3, #255	@ 0xff
 8007994:	d025      	beq.n	80079e2 <USBD_LL_DataOutStage+0x16e>
 8007996:	7dbb      	ldrb	r3, [r7, #22]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d122      	bne.n	80079e2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d117      	bne.n	80079d8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80079a8:	7dba      	ldrb	r2, [r7, #22]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	32ae      	adds	r2, #174	@ 0xae
 80079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00f      	beq.n	80079d8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80079b8:	7dba      	ldrb	r2, [r7, #22]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079c0:	7dba      	ldrb	r2, [r7, #22]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	32ae      	adds	r2, #174	@ 0xae
 80079c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	7afa      	ldrb	r2, [r7, #11]
 80079ce:	4611      	mov	r1, r2
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	4798      	blx	r3
 80079d4:	4603      	mov	r3, r0
 80079d6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	e000      	b.n	80079e4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	460b      	mov	r3, r1
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d178      	bne.n	8007af2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3314      	adds	r3, #20
 8007a04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d163      	bne.n	8007ad8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	8992      	ldrh	r2, [r2, #12]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d91c      	bls.n	8007a56 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	8992      	ldrh	r2, [r2, #12]
 8007a24:	1a9a      	subs	r2, r3, r2
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	8992      	ldrh	r2, [r2, #12]
 8007a32:	441a      	add	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6919      	ldr	r1, [r3, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	461a      	mov	r2, r3
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f001 f8c4 	bl	8008bd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f001 fdca 	bl	80095e8 <USBD_LL_PrepareReceive>
 8007a54:	e040      	b.n	8007ad8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	899b      	ldrh	r3, [r3, #12]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d11c      	bne.n	8007a9e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d316      	bcc.n	8007a9e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d20f      	bcs.n	8007a9e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f001 f8a4 	bl	8008bd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a90:	2300      	movs	r3, #0
 8007a92:	2200      	movs	r2, #0
 8007a94:	2100      	movs	r1, #0
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f001 fda6 	bl	80095e8 <USBD_LL_PrepareReceive>
 8007a9c:	e01c      	b.n	8007ad8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d10f      	bne.n	8007aca <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aca:	2180      	movs	r1, #128	@ 0x80
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f001 fce1 	bl	8009494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f001 f8d2 	bl	8008c7c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d03a      	beq.n	8007b58 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fe30 	bl	8007748 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007af0:	e032      	b.n	8007b58 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	4619      	mov	r1, r3
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f986 	bl	8007e0e <USBD_CoreFindEP>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	2bff      	cmp	r3, #255	@ 0xff
 8007b0a:	d025      	beq.n	8007b58 <USBD_LL_DataInStage+0x16c>
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d122      	bne.n	8007b58 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d11c      	bne.n	8007b58 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b1e:	7dfa      	ldrb	r2, [r7, #23]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	32ae      	adds	r2, #174	@ 0xae
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d014      	beq.n	8007b58 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007b2e:	7dfa      	ldrb	r2, [r7, #23]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b36:	7dfa      	ldrb	r2, [r7, #23]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	32ae      	adds	r2, #174	@ 0xae
 8007b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	7afa      	ldrb	r2, [r7, #11]
 8007b44:	4611      	mov	r1, r2
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	4798      	blx	r3
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b4e:	7dbb      	ldrb	r3, [r7, #22]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007b54:	7dbb      	ldrb	r3, [r7, #22]
 8007b56:	e000      	b.n	8007b5a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d014      	beq.n	8007bc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00e      	beq.n	8007bc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	6852      	ldr	r2, [r2, #4]
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	4611      	mov	r1, r2
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	4798      	blx	r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bc8:	2340      	movs	r3, #64	@ 0x40
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fc1b 	bl	800940a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2240      	movs	r2, #64	@ 0x40
 8007be0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007be4:	2340      	movs	r3, #64	@ 0x40
 8007be6:	2200      	movs	r2, #0
 8007be8:	2180      	movs	r1, #128	@ 0x80
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f001 fc0d 	bl	800940a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2240      	movs	r2, #64	@ 0x40
 8007bfc:	841a      	strh	r2, [r3, #32]

  return ret;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d006      	beq.n	8007c4a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d106      	bne.n	8007c82 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d110      	bne.n	8007cc6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00b      	beq.n	8007cc6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d005      	beq.n	8007cc6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32ae      	adds	r2, #174	@ 0xae
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e01c      	b.n	8007d2c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d115      	bne.n	8007d2a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	32ae      	adds	r2, #174	@ 0xae
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	32ae      	adds	r2, #174	@ 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	4611      	mov	r1, r2
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	32ae      	adds	r2, #174	@ 0xae
 8007d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e01c      	b.n	8007d90 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d115      	bne.n	8007d8e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	32ae      	adds	r2, #174	@ 0xae
 8007d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	32ae      	adds	r2, #174	@ 0xae
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	78fa      	ldrb	r2, [r7, #3]
 8007d88:	4611      	mov	r1, r2
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00e      	beq.n	8007dea <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6852      	ldr	r2, [r2, #4]
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	4611      	mov	r1, r2
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007de6:	2303      	movs	r3, #3
 8007de8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	885b      	ldrh	r3, [r3, #2]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	7812      	ldrb	r2, [r2, #0]
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d91f      	bls.n	8007e8e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e54:	e013      	b.n	8007e7e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e56:	f107 030a 	add.w	r3, r7, #10
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6978      	ldr	r0, [r7, #20]
 8007e5e:	f000 f81b 	bl	8007e98 <USBD_GetNextDesc>
 8007e62:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b05      	cmp	r3, #5
 8007e6a:	d108      	bne.n	8007e7e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	789b      	ldrb	r3, [r3, #2]
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d008      	beq.n	8007e8c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	885b      	ldrh	r3, [r3, #2]
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	897b      	ldrh	r3, [r7, #10]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d8e5      	bhi.n	8007e56 <USBD_GetEpDesc+0x2e>
 8007e8a:	e000      	b.n	8007e8e <USBD_GetEpDesc+0x66>
          break;
 8007e8c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e8e:	693b      	ldr	r3, [r7, #16]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	4413      	add	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007eee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007ef2:	021b      	lsls	r3, r3, #8
 8007ef4:	b21a      	sxth	r2, r3
 8007ef6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	b21b      	sxth	r3, r3
 8007efe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f00:	89fb      	ldrh	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f26:	2b40      	cmp	r3, #64	@ 0x40
 8007f28:	d005      	beq.n	8007f36 <USBD_StdDevReq+0x26>
 8007f2a:	2b40      	cmp	r3, #64	@ 0x40
 8007f2c:	d857      	bhi.n	8007fde <USBD_StdDevReq+0xce>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00f      	beq.n	8007f52 <USBD_StdDevReq+0x42>
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d153      	bne.n	8007fde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	32ae      	adds	r2, #174	@ 0xae
 8007f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f50:	e04a      	b.n	8007fe8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	2b09      	cmp	r3, #9
 8007f58:	d83b      	bhi.n	8007fd2 <USBD_StdDevReq+0xc2>
 8007f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f60 <USBD_StdDevReq+0x50>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007fb5 	.word	0x08007fb5
 8007f64:	08007fc9 	.word	0x08007fc9
 8007f68:	08007fd3 	.word	0x08007fd3
 8007f6c:	08007fbf 	.word	0x08007fbf
 8007f70:	08007fd3 	.word	0x08007fd3
 8007f74:	08007f93 	.word	0x08007f93
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007fd3 	.word	0x08007fd3
 8007f80:	08007fab 	.word	0x08007fab
 8007f84:	08007f9d 	.word	0x08007f9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa3e 	bl	800840c <USBD_GetDescriptor>
          break;
 8007f90:	e024      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fba3 	bl	80086e0 <USBD_SetAddress>
          break;
 8007f9a:	e01f      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fbe2 	bl	8008768 <USBD_SetConfig>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
          break;
 8007fa8:	e018      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fc85 	bl	80088bc <USBD_GetConfig>
          break;
 8007fb2:	e013      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fcb6 	bl	8008928 <USBD_GetStatus>
          break;
 8007fbc:	e00e      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fce5 	bl	8008990 <USBD_SetFeature>
          break;
 8007fc6:	e009      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fd09 	bl	80089e2 <USBD_ClrFeature>
          break;
 8007fd0:	e004      	b.n	8007fdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fd60 	bl	8008a9a <USBD_CtlError>
          break;
 8007fda:	bf00      	nop
      }
      break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fd5a 	bl	8008a9a <USBD_CtlError>
      break;
 8007fe6:	bf00      	nop
  }

  return ret;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800800a:	2b40      	cmp	r3, #64	@ 0x40
 800800c:	d005      	beq.n	800801a <USBD_StdItfReq+0x26>
 800800e:	2b40      	cmp	r3, #64	@ 0x40
 8008010:	d852      	bhi.n	80080b8 <USBD_StdItfReq+0xc4>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <USBD_StdItfReq+0x26>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d14e      	bne.n	80080b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008020:	b2db      	uxtb	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	2b02      	cmp	r3, #2
 8008026:	d840      	bhi.n	80080aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	889b      	ldrh	r3, [r3, #4]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b01      	cmp	r3, #1
 8008030:	d836      	bhi.n	80080a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	889b      	ldrh	r3, [r3, #4]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff feda 	bl	8007df4 <USBD_CoreFindIF>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2bff      	cmp	r3, #255	@ 0xff
 8008048:	d01d      	beq.n	8008086 <USBD_StdItfReq+0x92>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d11a      	bne.n	8008086 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008050:	7bba      	ldrb	r2, [r7, #14]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32ae      	adds	r2, #174	@ 0xae
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00f      	beq.n	8008080 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008060:	7bba      	ldrb	r2, [r7, #14]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008068:	7bba      	ldrb	r2, [r7, #14]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	32ae      	adds	r2, #174	@ 0xae
 800806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	4603      	mov	r3, r0
 800807c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800807e:	e004      	b.n	800808a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008084:	e001      	b.n	800808a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008086:	2303      	movs	r3, #3
 8008088:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	88db      	ldrh	r3, [r3, #6]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d110      	bne.n	80080b4 <USBD_StdItfReq+0xc0>
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10d      	bne.n	80080b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fddc 	bl	8008c56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800809e:	e009      	b.n	80080b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fcf9 	bl	8008a9a <USBD_CtlError>
          break;
 80080a8:	e004      	b.n	80080b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fcf4 	bl	8008a9a <USBD_CtlError>
          break;
 80080b2:	e000      	b.n	80080b6 <USBD_StdItfReq+0xc2>
          break;
 80080b4:	bf00      	nop
      }
      break;
 80080b6:	e004      	b.n	80080c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fced 	bl	8008a9a <USBD_CtlError>
      break;
 80080c0:	bf00      	nop
  }

  return ret;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	889b      	ldrh	r3, [r3, #4]
 80080de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080e8:	2b40      	cmp	r3, #64	@ 0x40
 80080ea:	d007      	beq.n	80080fc <USBD_StdEPReq+0x30>
 80080ec:	2b40      	cmp	r3, #64	@ 0x40
 80080ee:	f200 8181 	bhi.w	80083f4 <USBD_StdEPReq+0x328>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d02a      	beq.n	800814c <USBD_StdEPReq+0x80>
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	f040 817c 	bne.w	80083f4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe84 	bl	8007e0e <USBD_CoreFindEP>
 8008106:	4603      	mov	r3, r0
 8008108:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800810a:	7b7b      	ldrb	r3, [r7, #13]
 800810c:	2bff      	cmp	r3, #255	@ 0xff
 800810e:	f000 8176 	beq.w	80083fe <USBD_StdEPReq+0x332>
 8008112:	7b7b      	ldrb	r3, [r7, #13]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 8172 	bne.w	80083fe <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800811a:	7b7a      	ldrb	r2, [r7, #13]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008122:	7b7a      	ldrb	r2, [r7, #13]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	32ae      	adds	r2, #174	@ 0xae
 8008128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8165 	beq.w	80083fe <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008134:	7b7a      	ldrb	r2, [r7, #13]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	@ 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800814a:	e158      	b.n	80083fe <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d008      	beq.n	8008166 <USBD_StdEPReq+0x9a>
 8008154:	2b03      	cmp	r3, #3
 8008156:	f300 8147 	bgt.w	80083e8 <USBD_StdEPReq+0x31c>
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 809b 	beq.w	8008296 <USBD_StdEPReq+0x1ca>
 8008160:	2b01      	cmp	r3, #1
 8008162:	d03c      	beq.n	80081de <USBD_StdEPReq+0x112>
 8008164:	e140      	b.n	80083e8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d002      	beq.n	8008178 <USBD_StdEPReq+0xac>
 8008172:	2b03      	cmp	r3, #3
 8008174:	d016      	beq.n	80081a4 <USBD_StdEPReq+0xd8>
 8008176:	e02c      	b.n	80081d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <USBD_StdEPReq+0xce>
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b80      	cmp	r3, #128	@ 0x80
 8008182:	d00a      	beq.n	800819a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f983 	bl	8009494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800818e:	2180      	movs	r1, #128	@ 0x80
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f97f 	bl	8009494 <USBD_LL_StallEP>
 8008196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008198:	e020      	b.n	80081dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fc7c 	bl	8008a9a <USBD_CtlError>
              break;
 80081a2:	e01b      	b.n	80081dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	885b      	ldrh	r3, [r3, #2]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10e      	bne.n	80081ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00b      	beq.n	80081ca <USBD_StdEPReq+0xfe>
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	2b80      	cmp	r3, #128	@ 0x80
 80081b6:	d008      	beq.n	80081ca <USBD_StdEPReq+0xfe>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	88db      	ldrh	r3, [r3, #6]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 f965 	bl	8009494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fd43 	bl	8008c56 <USBD_CtlSendStatus>

              break;
 80081d0:	e004      	b.n	80081dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fc60 	bl	8008a9a <USBD_CtlError>
              break;
 80081da:	bf00      	nop
          }
          break;
 80081dc:	e109      	b.n	80083f2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d002      	beq.n	80081f0 <USBD_StdEPReq+0x124>
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d016      	beq.n	800821c <USBD_StdEPReq+0x150>
 80081ee:	e04b      	b.n	8008288 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00d      	beq.n	8008212 <USBD_StdEPReq+0x146>
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b80      	cmp	r3, #128	@ 0x80
 80081fa:	d00a      	beq.n	8008212 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 f947 	bl	8009494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008206:	2180      	movs	r1, #128	@ 0x80
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f943 	bl	8009494 <USBD_LL_StallEP>
 800820e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008210:	e040      	b.n	8008294 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc40 	bl	8008a9a <USBD_CtlError>
              break;
 800821a:	e03b      	b.n	8008294 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	885b      	ldrh	r3, [r3, #2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d136      	bne.n	8008292 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f94d 	bl	80094d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fd0c 	bl	8008c56 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7ff fde3 	bl	8007e0e <USBD_CoreFindEP>
 8008248:	4603      	mov	r3, r0
 800824a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800824c:	7b7b      	ldrb	r3, [r7, #13]
 800824e:	2bff      	cmp	r3, #255	@ 0xff
 8008250:	d01f      	beq.n	8008292 <USBD_StdEPReq+0x1c6>
 8008252:	7b7b      	ldrb	r3, [r7, #13]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d11c      	bne.n	8008292 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008258:	7b7a      	ldrb	r2, [r7, #13]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008260:	7b7a      	ldrb	r2, [r7, #13]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32ae      	adds	r2, #174	@ 0xae
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d010      	beq.n	8008292 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008270:	7b7a      	ldrb	r2, [r7, #13]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	32ae      	adds	r2, #174	@ 0xae
 8008276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
 8008282:	4603      	mov	r3, r0
 8008284:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008286:	e004      	b.n	8008292 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fc05 	bl	8008a9a <USBD_CtlError>
              break;
 8008290:	e000      	b.n	8008294 <USBD_StdEPReq+0x1c8>
              break;
 8008292:	bf00      	nop
          }
          break;
 8008294:	e0ad      	b.n	80083f2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d002      	beq.n	80082a8 <USBD_StdEPReq+0x1dc>
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d033      	beq.n	800830e <USBD_StdEPReq+0x242>
 80082a6:	e099      	b.n	80083dc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <USBD_StdEPReq+0x1f2>
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b80      	cmp	r3, #128	@ 0x80
 80082b2:	d004      	beq.n	80082be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fbef 	bl	8008a9a <USBD_CtlError>
                break;
 80082bc:	e093      	b.n	80083e6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	da0b      	bge.n	80082de <USBD_StdEPReq+0x212>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082cc:	4613      	mov	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	3310      	adds	r3, #16
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	4413      	add	r3, r2
 80082da:	3304      	adds	r3, #4
 80082dc:	e00b      	b.n	80082f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	3304      	adds	r3, #4
 80082f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2200      	movs	r2, #0
 80082fc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	330e      	adds	r3, #14
 8008302:	2202      	movs	r2, #2
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fc44 	bl	8008b94 <USBD_CtlSendData>
              break;
 800830c:	e06b      	b.n	80083e6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800830e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	da11      	bge.n	800833a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	f003 020f 	and.w	r2, r3, #15
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	3323      	adds	r3, #35	@ 0x23
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d117      	bne.n	8008360 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fbb1 	bl	8008a9a <USBD_CtlError>
                  break;
 8008338:	e055      	b.n	80083e6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	f003 020f 	and.w	r2, r3, #15
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fb9e 	bl	8008a9a <USBD_CtlError>
                  break;
 800835e:	e042      	b.n	80083e6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da0b      	bge.n	8008380 <USBD_StdEPReq+0x2b4>
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	3310      	adds	r3, #16
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	4413      	add	r3, r2
 800837c:	3304      	adds	r3, #4
 800837e:	e00b      	b.n	8008398 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4413      	add	r3, r2
 8008396:	3304      	adds	r3, #4
 8008398:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <USBD_StdEPReq+0x2da>
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b80      	cmp	r3, #128	@ 0x80
 80083a4:	d103      	bne.n	80083ae <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2200      	movs	r2, #0
 80083aa:	739a      	strb	r2, [r3, #14]
 80083ac:	e00e      	b.n	80083cc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 f8ac 	bl	8009510 <USBD_LL_IsStallEP>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2201      	movs	r2, #1
 80083c2:	739a      	strb	r2, [r3, #14]
 80083c4:	e002      	b.n	80083cc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2200      	movs	r2, #0
 80083ca:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	330e      	adds	r3, #14
 80083d0:	2202      	movs	r2, #2
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbdd 	bl	8008b94 <USBD_CtlSendData>
              break;
 80083da:	e004      	b.n	80083e6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fb5b 	bl	8008a9a <USBD_CtlError>
              break;
 80083e4:	bf00      	nop
          }
          break;
 80083e6:	e004      	b.n	80083f2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fb55 	bl	8008a9a <USBD_CtlError>
          break;
 80083f0:	bf00      	nop
      }
      break;
 80083f2:	e005      	b.n	8008400 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fb4f 	bl	8008a9a <USBD_CtlError>
      break;
 80083fc:	e000      	b.n	8008400 <USBD_StdEPReq+0x334>
      break;
 80083fe:	bf00      	nop
  }

  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	885b      	ldrh	r3, [r3, #2]
 8008426:	0a1b      	lsrs	r3, r3, #8
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	2b06      	cmp	r3, #6
 800842e:	f200 8128 	bhi.w	8008682 <USBD_GetDescriptor+0x276>
 8008432:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <USBD_GetDescriptor+0x2c>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	08008455 	.word	0x08008455
 800843c:	0800846d 	.word	0x0800846d
 8008440:	080084ad 	.word	0x080084ad
 8008444:	08008683 	.word	0x08008683
 8008448:	08008683 	.word	0x08008683
 800844c:	08008623 	.word	0x08008623
 8008450:	0800864f 	.word	0x0800864f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
      break;
 800846a:	e112      	b.n	8008692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7c1b      	ldrb	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10d      	bne.n	8008490 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847c:	f107 0208 	add.w	r2, r7, #8
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
 8008484:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3301      	adds	r3, #1
 800848a:	2202      	movs	r2, #2
 800848c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800848e:	e100      	b.n	8008692 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	f107 0208 	add.w	r2, r7, #8
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
 80084a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3301      	adds	r3, #1
 80084a6:	2202      	movs	r2, #2
 80084a8:	701a      	strb	r2, [r3, #0]
      break;
 80084aa:	e0f2      	b.n	8008692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	885b      	ldrh	r3, [r3, #2]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	f200 80ac 	bhi.w	8008610 <USBD_GetDescriptor+0x204>
 80084b8:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <USBD_GetDescriptor+0xb4>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	0800850d 	.word	0x0800850d
 80084c8:	08008541 	.word	0x08008541
 80084cc:	08008575 	.word	0x08008575
 80084d0:	080085a9 	.word	0x080085a9
 80084d4:	080085dd 	.word	0x080085dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	7c12      	ldrb	r2, [r2, #16]
 80084f0:	f107 0108 	add.w	r1, r7, #8
 80084f4:	4610      	mov	r0, r2
 80084f6:	4798      	blx	r3
 80084f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084fa:	e091      	b.n	8008620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 facb 	bl	8008a9a <USBD_CtlError>
            err++;
 8008504:	7afb      	ldrb	r3, [r7, #11]
 8008506:	3301      	adds	r3, #1
 8008508:	72fb      	strb	r3, [r7, #11]
          break;
 800850a:	e089      	b.n	8008620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00b      	beq.n	8008530 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	7c12      	ldrb	r2, [r2, #16]
 8008524:	f107 0108 	add.w	r1, r7, #8
 8008528:	4610      	mov	r0, r2
 800852a:	4798      	blx	r3
 800852c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852e:	e077      	b.n	8008620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fab1 	bl	8008a9a <USBD_CtlError>
            err++;
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	3301      	adds	r3, #1
 800853c:	72fb      	strb	r3, [r7, #11]
          break;
 800853e:	e06f      	b.n	8008620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00b      	beq.n	8008564 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	7c12      	ldrb	r2, [r2, #16]
 8008558:	f107 0108 	add.w	r1, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008562:	e05d      	b.n	8008620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa97 	bl	8008a9a <USBD_CtlError>
            err++;
 800856c:	7afb      	ldrb	r3, [r7, #11]
 800856e:	3301      	adds	r3, #1
 8008570:	72fb      	strb	r3, [r7, #11]
          break;
 8008572:	e055      	b.n	8008620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00b      	beq.n	8008598 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	7c12      	ldrb	r2, [r2, #16]
 800858c:	f107 0108 	add.w	r1, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008596:	e043      	b.n	8008620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fa7d 	bl	8008a9a <USBD_CtlError>
            err++;
 80085a0:	7afb      	ldrb	r3, [r7, #11]
 80085a2:	3301      	adds	r3, #1
 80085a4:	72fb      	strb	r3, [r7, #11]
          break;
 80085a6:	e03b      	b.n	8008620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	7c12      	ldrb	r2, [r2, #16]
 80085c0:	f107 0108 	add.w	r1, r7, #8
 80085c4:	4610      	mov	r0, r2
 80085c6:	4798      	blx	r3
 80085c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ca:	e029      	b.n	8008620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa63 	bl	8008a9a <USBD_CtlError>
            err++;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	3301      	adds	r3, #1
 80085d8:	72fb      	strb	r3, [r7, #11]
          break;
 80085da:	e021      	b.n	8008620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00b      	beq.n	8008600 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7c12      	ldrb	r2, [r2, #16]
 80085f4:	f107 0108 	add.w	r1, r7, #8
 80085f8:	4610      	mov	r0, r2
 80085fa:	4798      	blx	r3
 80085fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085fe:	e00f      	b.n	8008620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa49 	bl	8008a9a <USBD_CtlError>
            err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
          break;
 800860e:	e007      	b.n	8008620 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa41 	bl	8008a9a <USBD_CtlError>
          err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800861e:	bf00      	nop
      }
      break;
 8008620:	e037      	b.n	8008692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7c1b      	ldrb	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008632:	f107 0208 	add.w	r2, r7, #8
 8008636:	4610      	mov	r0, r2
 8008638:	4798      	blx	r3
 800863a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800863c:	e029      	b.n	8008692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fa2a 	bl	8008a9a <USBD_CtlError>
        err++;
 8008646:	7afb      	ldrb	r3, [r7, #11]
 8008648:	3301      	adds	r3, #1
 800864a:	72fb      	strb	r3, [r7, #11]
      break;
 800864c:	e021      	b.n	8008692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	7c1b      	ldrb	r3, [r3, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800865c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800865e:	f107 0208 	add.w	r2, r7, #8
 8008662:	4610      	mov	r0, r2
 8008664:	4798      	blx	r3
 8008666:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
 800866c:	2207      	movs	r2, #7
 800866e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008670:	e00f      	b.n	8008692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fa10 	bl	8008a9a <USBD_CtlError>
        err++;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	3301      	adds	r3, #1
 800867e:	72fb      	strb	r3, [r7, #11]
      break;
 8008680:	e007      	b.n	8008692 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fa08 	bl	8008a9a <USBD_CtlError>
      err++;
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	3301      	adds	r3, #1
 800868e:	72fb      	strb	r3, [r7, #11]
      break;
 8008690:	bf00      	nop
  }

  if (err != 0U)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d11e      	bne.n	80086d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	88db      	ldrh	r3, [r3, #6]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d016      	beq.n	80086ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086a0:	893b      	ldrh	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00e      	beq.n	80086c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	88da      	ldrh	r2, [r3, #6]
 80086aa:	893b      	ldrh	r3, [r7, #8]
 80086ac:	4293      	cmp	r3, r2
 80086ae:	bf28      	it	cs
 80086b0:	4613      	movcs	r3, r2
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086b6:	893b      	ldrh	r3, [r7, #8]
 80086b8:	461a      	mov	r2, r3
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fa69 	bl	8008b94 <USBD_CtlSendData>
 80086c2:	e009      	b.n	80086d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f9e7 	bl	8008a9a <USBD_CtlError>
 80086cc:	e004      	b.n	80086d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fac1 	bl	8008c56 <USBD_CtlSendStatus>
 80086d4:	e000      	b.n	80086d8 <USBD_GetDescriptor+0x2cc>
    return;
 80086d6:	bf00      	nop
  }
}
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop

080086e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	889b      	ldrh	r3, [r3, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d131      	bne.n	8008756 <USBD_SetAddress+0x76>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	88db      	ldrh	r3, [r3, #6]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d12d      	bne.n	8008756 <USBD_SetAddress+0x76>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8008700:	d829      	bhi.n	8008756 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800870c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d104      	bne.n	8008724 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800871a:	6839      	ldr	r1, [r7, #0]
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f9bc 	bl	8008a9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008722:	e01d      	b.n	8008760 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	7bfa      	ldrb	r2, [r7, #15]
 8008728:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 ff19 	bl	8009568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa8d 	bl	8008c56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d004      	beq.n	800874c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	e009      	b.n	8008760 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008754:	e004      	b.n	8008760 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f99e 	bl	8008a9a <USBD_CtlError>
  }
}
 800875e:	bf00      	nop
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	885b      	ldrh	r3, [r3, #2]
 800877a:	b2da      	uxtb	r2, r3
 800877c:	4b4e      	ldr	r3, [pc, #312]	@ (80088b8 <USBD_SetConfig+0x150>)
 800877e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008780:	4b4d      	ldr	r3, [pc, #308]	@ (80088b8 <USBD_SetConfig+0x150>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d905      	bls.n	8008794 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008788:	6839      	ldr	r1, [r7, #0]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f985 	bl	8008a9a <USBD_CtlError>
    return USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	e08c      	b.n	80088ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b02      	cmp	r3, #2
 800879e:	d002      	beq.n	80087a6 <USBD_SetConfig+0x3e>
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d029      	beq.n	80087f8 <USBD_SetConfig+0x90>
 80087a4:	e075      	b.n	8008892 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087a6:	4b44      	ldr	r3, [pc, #272]	@ (80088b8 <USBD_SetConfig+0x150>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d020      	beq.n	80087f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087ae:	4b42      	ldr	r3, [pc, #264]	@ (80088b8 <USBD_SetConfig+0x150>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087b8:	4b3f      	ldr	r3, [pc, #252]	@ (80088b8 <USBD_SetConfig+0x150>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7fe ffcd 	bl	800775e <USBD_SetClassConfig>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f962 	bl	8008a9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087de:	e065      	b.n	80088ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa38 	bl	8008c56 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2203      	movs	r2, #3
 80087ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087ee:	e05d      	b.n	80088ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa30 	bl	8008c56 <USBD_CtlSendStatus>
      break;
 80087f6:	e059      	b.n	80088ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087f8:	4b2f      	ldr	r3, [pc, #188]	@ (80088b8 <USBD_SetConfig+0x150>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d112      	bne.n	8008826 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008808:	4b2b      	ldr	r3, [pc, #172]	@ (80088b8 <USBD_SetConfig+0x150>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008812:	4b29      	ldr	r3, [pc, #164]	@ (80088b8 <USBD_SetConfig+0x150>)
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7fe ffbc 	bl	8007796 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa19 	bl	8008c56 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008824:	e042      	b.n	80088ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008826:	4b24      	ldr	r3, [pc, #144]	@ (80088b8 <USBD_SetConfig+0x150>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d02a      	beq.n	800888a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fe ffaa 	bl	8007796 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008842:	4b1d      	ldr	r3, [pc, #116]	@ (80088b8 <USBD_SetConfig+0x150>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800884c:	4b1a      	ldr	r3, [pc, #104]	@ (80088b8 <USBD_SetConfig+0x150>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fe ff83 	bl	800775e <USBD_SetClassConfig>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00f      	beq.n	8008882 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f918 	bl	8008a9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fe ff8f 	bl	8007796 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008880:	e014      	b.n	80088ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f9e7 	bl	8008c56 <USBD_CtlSendStatus>
      break;
 8008888:	e010      	b.n	80088ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9e3 	bl	8008c56 <USBD_CtlSendStatus>
      break;
 8008890:	e00c      	b.n	80088ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f900 	bl	8008a9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800889a:	4b07      	ldr	r3, [pc, #28]	@ (80088b8 <USBD_SetConfig+0x150>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7fe ff78 	bl	8007796 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088a6:	2303      	movs	r3, #3
 80088a8:	73fb      	strb	r3, [r7, #15]
      break;
 80088aa:	bf00      	nop
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	2000070c 	.word	0x2000070c

080088bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d004      	beq.n	80088d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8e2 	bl	8008a9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088d6:	e023      	b.n	8008920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	dc02      	bgt.n	80088ea <USBD_GetConfig+0x2e>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dc03      	bgt.n	80088f0 <USBD_GetConfig+0x34>
 80088e8:	e015      	b.n	8008916 <USBD_GetConfig+0x5a>
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d00b      	beq.n	8008906 <USBD_GetConfig+0x4a>
 80088ee:	e012      	b.n	8008916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3308      	adds	r3, #8
 80088fa:	2201      	movs	r2, #1
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f948 	bl	8008b94 <USBD_CtlSendData>
        break;
 8008904:	e00c      	b.n	8008920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3304      	adds	r3, #4
 800890a:	2201      	movs	r2, #1
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f940 	bl	8008b94 <USBD_CtlSendData>
        break;
 8008914:	e004      	b.n	8008920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f8be 	bl	8008a9a <USBD_CtlError>
        break;
 800891e:	bf00      	nop
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	2b02      	cmp	r3, #2
 800893e:	d81e      	bhi.n	800897e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	88db      	ldrh	r3, [r3, #6]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d004      	beq.n	8008952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f8a5 	bl	8008a9a <USBD_CtlError>
        break;
 8008950:	e01a      	b.n	8008988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f043 0202 	orr.w	r2, r3, #2
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	330c      	adds	r3, #12
 8008972:	2202      	movs	r2, #2
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f90c 	bl	8008b94 <USBD_CtlSendData>
      break;
 800897c:	e004      	b.n	8008988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f88a 	bl	8008a9a <USBD_CtlError>
      break;
 8008986:	bf00      	nop
  }
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	885b      	ldrh	r3, [r3, #2]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d107      	bne.n	80089b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f953 	bl	8008c56 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089b0:	e013      	b.n	80089da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	885b      	ldrh	r3, [r3, #2]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d10b      	bne.n	80089d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	889b      	ldrh	r3, [r3, #4]
 80089be:	0a1b      	lsrs	r3, r3, #8
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f943 	bl	8008c56 <USBD_CtlSendStatus>
}
 80089d0:	e003      	b.n	80089da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f860 	bl	8008a9a <USBD_CtlError>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d80b      	bhi.n	8008a12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	885b      	ldrh	r3, [r3, #2]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d10c      	bne.n	8008a1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f923 	bl	8008c56 <USBD_CtlSendStatus>
      }
      break;
 8008a10:	e004      	b.n	8008a1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f840 	bl	8008a9a <USBD_CtlError>
      break;
 8008a1a:	e000      	b.n	8008a1e <USBD_ClrFeature+0x3c>
      break;
 8008a1c:	bf00      	nop
  }
}
 8008a1e:	bf00      	nop
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	781a      	ldrb	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff fa3d 	bl	8007ed0 <SWAPBYTE>
 8008a56:	4603      	mov	r3, r0
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3301      	adds	r3, #1
 8008a62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f7ff fa30 	bl	8007ed0 <SWAPBYTE>
 8008a70:	4603      	mov	r3, r0
 8008a72:	461a      	mov	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f7ff fa23 	bl	8007ed0 <SWAPBYTE>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	80da      	strh	r2, [r3, #6]
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008aa4:	2180      	movs	r1, #128	@ 0x80
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fcf4 	bl	8009494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008aac:	2100      	movs	r1, #0
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fcf0 	bl	8009494 <USBD_LL_StallEP>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d042      	beq.n	8008b58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008ad6:	6938      	ldr	r0, [r7, #16]
 8008ad8:	f000 f842 	bl	8008b60 <USBD_GetLen>
 8008adc:	4603      	mov	r3, r0
 8008ade:	3301      	adds	r3, #1
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae6:	d808      	bhi.n	8008afa <USBD_GetString+0x3e>
 8008ae8:	6938      	ldr	r0, [r7, #16]
 8008aea:	f000 f839 	bl	8008b60 <USBD_GetLen>
 8008aee:	4603      	mov	r3, r0
 8008af0:	3301      	adds	r3, #1
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	e001      	b.n	8008afe <USBD_GetString+0x42>
 8008afa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	4413      	add	r3, r2
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	7812      	ldrb	r2, [r2, #0]
 8008b0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	3301      	adds	r3, #1
 8008b12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	3301      	adds	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b24:	e013      	b.n	8008b4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	7812      	ldrb	r2, [r2, #0]
 8008b30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3301      	adds	r3, #1
 8008b36:	613b      	str	r3, [r7, #16]
    idx++;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	4413      	add	r3, r2
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e7      	bne.n	8008b26 <USBD_GetString+0x6a>
 8008b56:	e000      	b.n	8008b5a <USBD_GetString+0x9e>
    return;
 8008b58:	bf00      	nop
  }
}
 8008b5a:	3718      	adds	r7, #24
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b70:	e005      	b.n	8008b7e <USBD_GetLen+0x1e>
  {
    len++;
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	3301      	adds	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f5      	bne.n	8008b72 <USBD_GetLen+0x12>
  }

  return len;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 fcf0 	bl	80095a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	2100      	movs	r1, #0
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 fcdf 	bl	80095a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2203      	movs	r2, #3
 8008c02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	2100      	movs	r1, #0
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 fcdf 	bl	80095e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	2100      	movs	r1, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fcce 	bl	80095e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2204      	movs	r2, #4
 8008c62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c66:	2300      	movs	r3, #0
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc9a 	bl	80095a6 <USBD_LL_Transmit>

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2205      	movs	r2, #5
 8008c88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fca8 	bl	80095e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4912      	ldr	r1, [pc, #72]	@ (8008cf4 <MX_USB_DEVICE_Init+0x50>)
 8008cac:	4812      	ldr	r0, [pc, #72]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cae:	f7fe fcd9 	bl	8007664 <USBD_Init>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cb8:	f7f8 fd6c 	bl	8001794 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cbc:	490f      	ldr	r1, [pc, #60]	@ (8008cfc <MX_USB_DEVICE_Init+0x58>)
 8008cbe:	480e      	ldr	r0, [pc, #56]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cc0:	f7fe fd00 	bl	80076c4 <USBD_RegisterClass>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cca:	f7f8 fd63 	bl	8001794 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cce:	490c      	ldr	r1, [pc, #48]	@ (8008d00 <MX_USB_DEVICE_Init+0x5c>)
 8008cd0:	4809      	ldr	r0, [pc, #36]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cd2:	f7fe fbf7 	bl	80074c4 <USBD_CDC_RegisterInterface>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cdc:	f7f8 fd5a 	bl	8001794 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ce0:	4805      	ldr	r0, [pc, #20]	@ (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008ce2:	f7fe fd25 	bl	8007730 <USBD_Start>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cec:	f7f8 fd52 	bl	8001794 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cf0:	bf00      	nop
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200000b0 	.word	0x200000b0
 8008cf8:	20000710 	.word	0x20000710
 8008cfc:	2000001c 	.word	0x2000001c
 8008d00:	2000009c 	.word	0x2000009c

08008d04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4905      	ldr	r1, [pc, #20]	@ (8008d20 <CDC_Init_FS+0x1c>)
 8008d0c:	4805      	ldr	r0, [pc, #20]	@ (8008d24 <CDC_Init_FS+0x20>)
 8008d0e:	f7fe fbf3 	bl	80074f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d12:	4905      	ldr	r1, [pc, #20]	@ (8008d28 <CDC_Init_FS+0x24>)
 8008d14:	4803      	ldr	r0, [pc, #12]	@ (8008d24 <CDC_Init_FS+0x20>)
 8008d16:	f7fe fc11 	bl	800753c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	200011ec 	.word	0x200011ec
 8008d24:	20000710 	.word	0x20000710
 8008d28:	200009ec 	.word	0x200009ec

08008d2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	6039      	str	r1, [r7, #0]
 8008d46:	71fb      	strb	r3, [r7, #7]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	2b23      	cmp	r3, #35	@ 0x23
 8008d50:	d84a      	bhi.n	8008de8 <CDC_Control_FS+0xac>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <CDC_Control_FS+0x1c>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008de9 	.word	0x08008de9
 8008d5c:	08008de9 	.word	0x08008de9
 8008d60:	08008de9 	.word	0x08008de9
 8008d64:	08008de9 	.word	0x08008de9
 8008d68:	08008de9 	.word	0x08008de9
 8008d6c:	08008de9 	.word	0x08008de9
 8008d70:	08008de9 	.word	0x08008de9
 8008d74:	08008de9 	.word	0x08008de9
 8008d78:	08008de9 	.word	0x08008de9
 8008d7c:	08008de9 	.word	0x08008de9
 8008d80:	08008de9 	.word	0x08008de9
 8008d84:	08008de9 	.word	0x08008de9
 8008d88:	08008de9 	.word	0x08008de9
 8008d8c:	08008de9 	.word	0x08008de9
 8008d90:	08008de9 	.word	0x08008de9
 8008d94:	08008de9 	.word	0x08008de9
 8008d98:	08008de9 	.word	0x08008de9
 8008d9c:	08008de9 	.word	0x08008de9
 8008da0:	08008de9 	.word	0x08008de9
 8008da4:	08008de9 	.word	0x08008de9
 8008da8:	08008de9 	.word	0x08008de9
 8008dac:	08008de9 	.word	0x08008de9
 8008db0:	08008de9 	.word	0x08008de9
 8008db4:	08008de9 	.word	0x08008de9
 8008db8:	08008de9 	.word	0x08008de9
 8008dbc:	08008de9 	.word	0x08008de9
 8008dc0:	08008de9 	.word	0x08008de9
 8008dc4:	08008de9 	.word	0x08008de9
 8008dc8:	08008de9 	.word	0x08008de9
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008de9 	.word	0x08008de9
 8008dd8:	08008de9 	.word	0x08008de9
 8008ddc:	08008de9 	.word	0x08008de9
 8008de0:	08008de9 	.word	0x08008de9
 8008de4:	08008de9 	.word	0x08008de9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008de8:	bf00      	nop
  }

  return (USBD_OK);
 8008dea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	4805      	ldr	r0, [pc, #20]	@ (8008e1c <CDC_Receive_FS+0x24>)
 8008e06:	f7fe fb99 	bl	800753c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e0a:	4804      	ldr	r0, [pc, #16]	@ (8008e1c <CDC_Receive_FS+0x24>)
 8008e0c:	f7fe fbf4 	bl	80075f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000710 	.word	0x20000710

08008e20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e30:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <CDC_Transmit_FS+0x48>)
 8008e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e00b      	b.n	8008e5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e46:	887b      	ldrh	r3, [r7, #2]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4806      	ldr	r0, [pc, #24]	@ (8008e68 <CDC_Transmit_FS+0x48>)
 8008e4e:	f7fe fb53 	bl	80074f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e52:	4805      	ldr	r0, [pc, #20]	@ (8008e68 <CDC_Transmit_FS+0x48>)
 8008e54:	f7fe fb90 	bl	8007578 <USBD_CDC_TransmitPacket>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000710 	.word	0x20000710

08008e6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b087      	sub	sp, #28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	4613      	mov	r3, r2
 8008e78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
	...

08008e90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	6039      	str	r1, [r7, #0]
 8008e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2212      	movs	r2, #18
 8008ea0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ea2:	4b03      	ldr	r3, [pc, #12]	@ (8008eb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	200000cc 	.word	0x200000cc

08008eb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	6039      	str	r1, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ec6:	4b03      	ldr	r3, [pc, #12]	@ (8008ed4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	200000e0 	.word	0x200000e0

08008ed8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	6039      	str	r1, [r7, #0]
 8008ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4907      	ldr	r1, [pc, #28]	@ (8008f0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008eee:	4808      	ldr	r0, [pc, #32]	@ (8008f10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ef0:	f7ff fde4 	bl	8008abc <USBD_GetString>
 8008ef4:	e004      	b.n	8008f00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	4904      	ldr	r1, [pc, #16]	@ (8008f0c <USBD_FS_ProductStrDescriptor+0x34>)
 8008efa:	4805      	ldr	r0, [pc, #20]	@ (8008f10 <USBD_FS_ProductStrDescriptor+0x38>)
 8008efc:	f7ff fdde 	bl	8008abc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f00:	4b02      	ldr	r3, [pc, #8]	@ (8008f0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200019ec 	.word	0x200019ec
 8008f10:	0800aa84 	.word	0x0800aa84

08008f14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	6039      	str	r1, [r7, #0]
 8008f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	4904      	ldr	r1, [pc, #16]	@ (8008f34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f24:	4804      	ldr	r0, [pc, #16]	@ (8008f38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f26:	f7ff fdc9 	bl	8008abc <USBD_GetString>
  return USBD_StrDesc;
 8008f2a:	4b02      	ldr	r3, [pc, #8]	@ (8008f34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200019ec 	.word	0x200019ec
 8008f38:	0800aa9c 	.word	0x0800aa9c

08008f3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	221a      	movs	r2, #26
 8008f4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f4e:	f000 f843 	bl	8008fd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f52:	4b02      	ldr	r3, [pc, #8]	@ (8008f5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200000e4 	.word	0x200000e4

08008f60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d105      	bne.n	8008f7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	4907      	ldr	r1, [pc, #28]	@ (8008f94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f76:	4808      	ldr	r0, [pc, #32]	@ (8008f98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f78:	f7ff fda0 	bl	8008abc <USBD_GetString>
 8008f7c:	e004      	b.n	8008f88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	4904      	ldr	r1, [pc, #16]	@ (8008f94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f82:	4805      	ldr	r0, [pc, #20]	@ (8008f98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f84:	f7ff fd9a 	bl	8008abc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f88:	4b02      	ldr	r3, [pc, #8]	@ (8008f94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200019ec 	.word	0x200019ec
 8008f98:	0800aab0 	.word	0x0800aab0

08008f9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	6039      	str	r1, [r7, #0]
 8008fa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d105      	bne.n	8008fba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	4907      	ldr	r1, [pc, #28]	@ (8008fd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fb2:	4808      	ldr	r0, [pc, #32]	@ (8008fd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fb4:	f7ff fd82 	bl	8008abc <USBD_GetString>
 8008fb8:	e004      	b.n	8008fc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	4904      	ldr	r1, [pc, #16]	@ (8008fd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fbe:	4805      	ldr	r0, [pc, #20]	@ (8008fd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fc0:	f7ff fd7c 	bl	8008abc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fc4:	4b02      	ldr	r3, [pc, #8]	@ (8008fd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	200019ec 	.word	0x200019ec
 8008fd4:	0800aabc 	.word	0x0800aabc

08008fd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fde:	4b0f      	ldr	r3, [pc, #60]	@ (800901c <Get_SerialNum+0x44>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8009020 <Get_SerialNum+0x48>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fea:	4b0e      	ldr	r3, [pc, #56]	@ (8009024 <Get_SerialNum+0x4c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ffe:	2208      	movs	r2, #8
 8009000:	4909      	ldr	r1, [pc, #36]	@ (8009028 <Get_SerialNum+0x50>)
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 f814 	bl	8009030 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009008:	2204      	movs	r2, #4
 800900a:	4908      	ldr	r1, [pc, #32]	@ (800902c <Get_SerialNum+0x54>)
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f000 f80f 	bl	8009030 <IntToUnicode>
  }
}
 8009012:	bf00      	nop
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	1fff7a10 	.word	0x1fff7a10
 8009020:	1fff7a14 	.word	0x1fff7a14
 8009024:	1fff7a18 	.word	0x1fff7a18
 8009028:	200000e6 	.word	0x200000e6
 800902c:	200000f6 	.word	0x200000f6

08009030 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
 8009046:	e027      	b.n	8009098 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	0f1b      	lsrs	r3, r3, #28
 800904c:	2b09      	cmp	r3, #9
 800904e:	d80b      	bhi.n	8009068 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	0f1b      	lsrs	r3, r3, #28
 8009054:	b2da      	uxtb	r2, r3
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	005b      	lsls	r3, r3, #1
 800905a:	4619      	mov	r1, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	440b      	add	r3, r1
 8009060:	3230      	adds	r2, #48	@ 0x30
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e00a      	b.n	800907e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	0f1b      	lsrs	r3, r3, #28
 800906c:	b2da      	uxtb	r2, r3
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	4619      	mov	r1, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	440b      	add	r3, r1
 8009078:	3237      	adds	r2, #55	@ 0x37
 800907a:	b2d2      	uxtb	r2, r2
 800907c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	3301      	adds	r3, #1
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	4413      	add	r3, r2
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	3301      	adds	r3, #1
 8009096:	75fb      	strb	r3, [r7, #23]
 8009098:	7dfa      	ldrb	r2, [r7, #23]
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	429a      	cmp	r2, r3
 800909e:	d3d3      	bcc.n	8009048 <IntToUnicode+0x18>
  }
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	@ 0x28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b8:	f107 0314 	add.w	r3, r7, #20
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	609a      	str	r2, [r3, #8]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090d0:	d13a      	bne.n	8009148 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 80090dc:	f043 0301 	orr.w	r3, r3, #1
 80090e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80090e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 80090e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80090f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f4:	2302      	movs	r3, #2
 80090f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090fc:	2303      	movs	r3, #3
 80090fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009100:	230a      	movs	r3, #10
 8009102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	4619      	mov	r1, r3
 800910a:	4812      	ldr	r0, [pc, #72]	@ (8009154 <HAL_PCD_MspInit+0xa4>)
 800910c:	f7f9 f9c4 	bl	8002498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009110:	4b0f      	ldr	r3, [pc, #60]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 8009112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009114:	4a0e      	ldr	r2, [pc, #56]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 8009116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911a:	6353      	str	r3, [r2, #52]	@ 0x34
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 8009122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009124:	4a0a      	ldr	r2, [pc, #40]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 8009126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800912a:	6453      	str	r3, [r2, #68]	@ 0x44
 800912c:	4b08      	ldr	r3, [pc, #32]	@ (8009150 <HAL_PCD_MspInit+0xa0>)
 800912e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009138:	2200      	movs	r2, #0
 800913a:	2100      	movs	r1, #0
 800913c:	2043      	movs	r0, #67	@ 0x43
 800913e:	f7f9 f974 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009142:	2043      	movs	r0, #67	@ 0x43
 8009144:	f7f9 f98d 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009148:	bf00      	nop
 800914a:	3728      	adds	r7, #40	@ 0x28
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	40023800 	.word	0x40023800
 8009154:	40020000 	.word	0x40020000

08009158 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f7fe fb2b 	bl	80077ca <USBD_LL_SetupStage>
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	4613      	mov	r3, r2
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	440b      	add	r3, r1
 800919c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	4619      	mov	r1, r3
 80091a6:	f7fe fb65 	bl	8007874 <USBD_LL_DataOutStage>
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b082      	sub	sp, #8
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	3320      	adds	r3, #32
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	4619      	mov	r1, r3
 80091da:	f7fe fc07 	bl	80079ec <USBD_LL_DataInStage>
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe fd4b 	bl	8007c90 <USBD_LL_SOF>
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800920a:	2301      	movs	r3, #1
 800920c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	79db      	ldrb	r3, [r3, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d102      	bne.n	800921c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
 800921a:	e008      	b.n	800922e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	79db      	ldrb	r3, [r3, #7]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d102      	bne.n	800922a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009224:	2301      	movs	r3, #1
 8009226:	73fb      	strb	r3, [r7, #15]
 8009228:	e001      	b.n	800922e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800922a:	f7f8 fab3 	bl	8001794 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009234:	7bfa      	ldrb	r2, [r7, #15]
 8009236:	4611      	mov	r1, r2
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fce5 	bl	8007c08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe fc8c 	bl	8007b62 <USBD_LL_Reset>
}
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fce0 	bl	8007c28 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800927a:	f043 0301 	orr.w	r3, r3, #1
 800927e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7adb      	ldrb	r3, [r3, #11]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009288:	4b04      	ldr	r3, [pc, #16]	@ (800929c <HAL_PCD_SuspendCallback+0x48>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	4a03      	ldr	r2, [pc, #12]	@ (800929c <HAL_PCD_SuspendCallback+0x48>)
 800928e:	f043 0306 	orr.w	r3, r3, #6
 8009292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	e000ed00 	.word	0xe000ed00

080092a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fe fcd6 	bl	8007c60 <USBD_LL_Resume>
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	4611      	mov	r1, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fd2e 	bl	8007d34 <USBD_LL_IsoOUTIncomplete>
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	4611      	mov	r1, r2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fcea 	bl	8007cd0 <USBD_LL_IsoINIncomplete>
}
 80092fc:	bf00      	nop
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fd40 	bl	8007d98 <USBD_LL_DevConnected>
}
 8009318:	bf00      	nop
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800932e:	4618      	mov	r0, r3
 8009330:	f7fe fd3d 	bl	8007dae <USBD_LL_DevDisconnected>
}
 8009334:	bf00      	nop
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d13c      	bne.n	80093c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800934c:	4a20      	ldr	r2, [pc, #128]	@ (80093d0 <USBD_LL_Init+0x94>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a1e      	ldr	r2, [pc, #120]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009358:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800935c:	4b1c      	ldr	r3, [pc, #112]	@ (80093d0 <USBD_LL_Init+0x94>)
 800935e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009362:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009364:	4b1a      	ldr	r3, [pc, #104]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009366:	2204      	movs	r2, #4
 8009368:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800936a:	4b19      	ldr	r3, [pc, #100]	@ (80093d0 <USBD_LL_Init+0x94>)
 800936c:	2202      	movs	r2, #2
 800936e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009370:	4b17      	ldr	r3, [pc, #92]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009372:	2200      	movs	r2, #0
 8009374:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009376:	4b16      	ldr	r3, [pc, #88]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009378:	2202      	movs	r2, #2
 800937a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800937c:	4b14      	ldr	r3, [pc, #80]	@ (80093d0 <USBD_LL_Init+0x94>)
 800937e:	2200      	movs	r2, #0
 8009380:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009382:	4b13      	ldr	r3, [pc, #76]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009384:	2200      	movs	r2, #0
 8009386:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009388:	4b11      	ldr	r3, [pc, #68]	@ (80093d0 <USBD_LL_Init+0x94>)
 800938a:	2200      	movs	r2, #0
 800938c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800938e:	4b10      	ldr	r3, [pc, #64]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009390:	2200      	movs	r2, #0
 8009392:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009394:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <USBD_LL_Init+0x94>)
 8009396:	2200      	movs	r2, #0
 8009398:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800939a:	480d      	ldr	r0, [pc, #52]	@ (80093d0 <USBD_LL_Init+0x94>)
 800939c:	f7fa fa6e 	bl	800387c <HAL_PCD_Init>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80093a6:	f7f8 f9f5 	bl	8001794 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80093aa:	2180      	movs	r1, #128	@ 0x80
 80093ac:	4808      	ldr	r0, [pc, #32]	@ (80093d0 <USBD_LL_Init+0x94>)
 80093ae:	f7fb fc9a 	bl	8004ce6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093b2:	2240      	movs	r2, #64	@ 0x40
 80093b4:	2100      	movs	r1, #0
 80093b6:	4806      	ldr	r0, [pc, #24]	@ (80093d0 <USBD_LL_Init+0x94>)
 80093b8:	f7fb fc4e 	bl	8004c58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80093bc:	2280      	movs	r2, #128	@ 0x80
 80093be:	2101      	movs	r1, #1
 80093c0:	4803      	ldr	r0, [pc, #12]	@ (80093d0 <USBD_LL_Init+0x94>)
 80093c2:	f7fb fc49 	bl	8004c58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	20001bec 	.word	0x20001bec

080093d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fa fb55 	bl	8003a9a <HAL_PCD_Start>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f942 	bl	8009680 <USBD_Get_USB_Status>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009400:	7bbb      	ldrb	r3, [r7, #14]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	4608      	mov	r0, r1
 8009414:	4611      	mov	r1, r2
 8009416:	461a      	mov	r2, r3
 8009418:	4603      	mov	r3, r0
 800941a:	70fb      	strb	r3, [r7, #3]
 800941c:	460b      	mov	r3, r1
 800941e:	70bb      	strb	r3, [r7, #2]
 8009420:	4613      	mov	r3, r2
 8009422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009432:	78bb      	ldrb	r3, [r7, #2]
 8009434:	883a      	ldrh	r2, [r7, #0]
 8009436:	78f9      	ldrb	r1, [r7, #3]
 8009438:	f7fb f829 	bl	800448e <HAL_PCD_EP_Open>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	4618      	mov	r0, r3
 8009444:	f000 f91c 	bl	8009680 <USBD_Get_USB_Status>
 8009448:	4603      	mov	r3, r0
 800944a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800944c:	7bbb      	ldrb	r3, [r7, #14]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	460b      	mov	r3, r1
 8009460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7fb f874 	bl	8004562 <HAL_PCD_EP_Close>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4618      	mov	r0, r3
 8009482:	f000 f8fd 	bl	8009680 <USBD_Get_USB_Status>
 8009486:	4603      	mov	r3, r0
 8009488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800948a:	7bbb      	ldrb	r3, [r7, #14]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4611      	mov	r1, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fb f92c 	bl	8004710 <HAL_PCD_EP_SetStall>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f8de 	bl	8009680 <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fb f970 	bl	80047d6 <HAL_PCD_EP_ClrStall>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f8bf 	bl	8009680 <USBD_Get_USB_Status>
 8009502:	4603      	mov	r3, r0
 8009504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009506:	7bbb      	ldrb	r3, [r7, #14]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009528:	2b00      	cmp	r3, #0
 800952a:	da0b      	bge.n	8009544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	4613      	mov	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3316      	adds	r3, #22
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	e00b      	b.n	800955c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	4613      	mov	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800955a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800955c:	4618      	mov	r0, r3
 800955e:	3714      	adds	r7, #20
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009582:	78fa      	ldrb	r2, [r7, #3]
 8009584:	4611      	mov	r1, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f7fa ff5d 	bl	8004446 <HAL_PCD_SetAddress>
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f874 	bl	8009680 <USBD_Get_USB_Status>
 8009598:	4603      	mov	r3, r0
 800959a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959c:	7bbb      	ldrb	r3, [r7, #14]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	60f8      	str	r0, [r7, #12]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
 80095b2:	460b      	mov	r3, r1
 80095b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095c4:	7af9      	ldrb	r1, [r7, #11]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	f7fb f867 	bl	800469c <HAL_PCD_EP_Transmit>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 f853 	bl	8009680 <USBD_Get_USB_Status>
 80095da:	4603      	mov	r3, r0
 80095dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095de:	7dbb      	ldrb	r3, [r7, #22]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	607a      	str	r2, [r7, #4]
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	460b      	mov	r3, r1
 80095f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009606:	7af9      	ldrb	r1, [r7, #11]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	f7fa fff3 	bl	80045f6 <HAL_PCD_EP_Receive>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009614:	7dfb      	ldrb	r3, [r7, #23]
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f832 	bl	8009680 <USBD_Get_USB_Status>
 800961c:	4603      	mov	r3, r0
 800961e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009620:	7dbb      	ldrb	r3, [r7, #22]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800963c:	78fa      	ldrb	r2, [r7, #3]
 800963e:	4611      	mov	r1, r2
 8009640:	4618      	mov	r0, r3
 8009642:	f7fb f813 	bl	800466c <HAL_PCD_EP_GetRxCount>
 8009646:	4603      	mov	r3, r0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009658:	4b03      	ldr	r3, [pc, #12]	@ (8009668 <USBD_static_malloc+0x18>)
}
 800965a:	4618      	mov	r0, r3
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	200020d0 	.word	0x200020d0

0800966c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	2b03      	cmp	r3, #3
 8009692:	d817      	bhi.n	80096c4 <USBD_Get_USB_Status+0x44>
 8009694:	a201      	add	r2, pc, #4	@ (adr r2, 800969c <USBD_Get_USB_Status+0x1c>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	080096ad 	.word	0x080096ad
 80096a0:	080096b3 	.word	0x080096b3
 80096a4:	080096b9 	.word	0x080096b9
 80096a8:	080096bf 	.word	0x080096bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
    break;
 80096b0:	e00b      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096b2:	2303      	movs	r3, #3
 80096b4:	73fb      	strb	r3, [r7, #15]
    break;
 80096b6:	e008      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096b8:	2301      	movs	r3, #1
 80096ba:	73fb      	strb	r3, [r7, #15]
    break;
 80096bc:	e005      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096be:	2303      	movs	r3, #3
 80096c0:	73fb      	strb	r3, [r7, #15]
    break;
 80096c2:	e002      	b.n	80096ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096c4:	2303      	movs	r3, #3
 80096c6:	73fb      	strb	r3, [r7, #15]
    break;
 80096c8:	bf00      	nop
  }
  return usb_status;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <funchad34.constprop.0>:
 80096d8:	b500      	push	{lr}
 80096da:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <funchad34.constprop.0+0x20>)
 80096dc:	4907      	ldr	r1, [pc, #28]	@ (80096fc <funchad34.constprop.0+0x24>)
 80096de:	f8d0 e000 	ldr.w	lr, [r0]
 80096e2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80096e6:	6882      	ldr	r2, [r0, #8]
 80096e8:	f8c3 e000 	str.w	lr, [r3]
 80096ec:	f8c3 c004 	str.w	ip, [r3, #4]
 80096f0:	600a      	str	r2, [r1, #0]
 80096f2:	609a      	str	r2, [r3, #8]
 80096f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80096f8:	200022f4 	.word	0x200022f4
 80096fc:	200022f0 	.word	0x200022f0

08009700 <neai_anomalydetection_learn>:
 8009700:	4be3      	ldr	r3, [pc, #908]	@ (8009a90 <neai_anomalydetection_learn+0x390>)
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d003      	beq.n	8009710 <neai_anomalydetection_learn+0x10>
 8009708:	4be2      	ldr	r3, [pc, #904]	@ (8009a94 <neai_anomalydetection_learn+0x394>)
 800970a:	207b      	movs	r0, #123	@ 0x7b
 800970c:	7018      	strb	r0, [r3, #0]
 800970e:	4770      	bx	lr
 8009710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	ed2d 8b02 	vpush	{d8}
 8009718:	f7ff ffde 	bl	80096d8 <funchad34.constprop.0>
 800971c:	4bde      	ldr	r3, [pc, #888]	@ (8009a98 <neai_anomalydetection_learn+0x398>)
 800971e:	681e      	ldr	r6, [r3, #0]
 8009720:	f106 0801 	add.w	r8, r6, #1
 8009724:	f1b8 0f02 	cmp.w	r8, #2
 8009728:	f8c3 8000 	str.w	r8, [r3]
 800972c:	f200 8096 	bhi.w	800985c <neai_anomalydetection_learn+0x15c>
 8009730:	4fda      	ldr	r7, [pc, #872]	@ (8009a9c <neai_anomalydetection_learn+0x39c>)
 8009732:	4ddb      	ldr	r5, [pc, #876]	@ (8009aa0 <neai_anomalydetection_learn+0x3a0>)
 8009734:	4cdb      	ldr	r4, [pc, #876]	@ (8009aa4 <neai_anomalydetection_learn+0x3a4>)
 8009736:	ed95 5a00 	vldr	s10, [r5]
 800973a:	ed94 7a00 	vldr	s14, [r4]
 800973e:	edd7 7a00 	vldr	s15, [r7]
 8009742:	edd5 4a01 	vldr	s9, [r5, #4]
 8009746:	4bd3      	ldr	r3, [pc, #844]	@ (8009a94 <neai_anomalydetection_learn+0x394>)
 8009748:	3602      	adds	r6, #2
 800974a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800974e:	ee65 5a05 	vmul.f32	s11, s10, s10
 8009752:	ee07 6a10 	vmov	s14, r6
 8009756:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800975a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800975e:	ee77 6ac5 	vsub.f32	s13, s15, s10
 8009762:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009766:	ee86 6a87 	vdiv.f32	s12, s13, s14
 800976a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800976e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8009772:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009776:	ee26 5a06 	vmul.f32	s10, s12, s12
 800977a:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800977e:	edd4 6a01 	vldr	s13, [r4, #4]
 8009782:	ed85 6a00 	vstr	s12, [r5]
 8009786:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800978a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800978e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009796:	bfa8      	it	ge
 8009798:	eeb1 4ae7 	vsqrtge.f32	s8, s15
 800979c:	ee24 5aa4 	vmul.f32	s10, s9, s9
 80097a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80097a4:	bfb8      	it	lt
 80097a6:	ed9f 4ac0 	vldrlt	s8, [pc, #768]	@ 8009aa8 <neai_anomalydetection_learn+0x3a8>
 80097aa:	ee77 3ae4 	vsub.f32	s7, s15, s9
 80097ae:	ee35 5a26 	vadd.f32	s10, s10, s13
 80097b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097b6:	eec3 5a87 	vdiv.f32	s11, s7, s14
 80097ba:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80097be:	ee75 5aa4 	vadd.f32	s11, s11, s9
 80097c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80097c6:	ee25 6aa5 	vmul.f32	s12, s11, s11
 80097ca:	ee76 7a85 	vadd.f32	s15, s13, s10
 80097ce:	ed95 5a02 	vldr	s10, [r5, #8]
 80097d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80097d6:	ed84 4a00 	vstr	s8, [r4]
 80097da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80097de:	ee25 6a05 	vmul.f32	s12, s10, s10
 80097e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	bfa8      	it	ge
 80097ec:	eef1 4ae7 	vsqrtge.f32	s9, s15
 80097f0:	edd4 7a02 	vldr	s15, [r4, #8]
 80097f4:	edc5 5a01 	vstr	s11, [r5, #4]
 80097f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80097fc:	ee36 4ac5 	vsub.f32	s8, s13, s10
 8009800:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009804:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8009808:	ee84 6a07 	vdiv.f32	s12, s8, s14
 800980c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009810:	bfb8      	it	lt
 8009812:	eddf 4aa5 	vldrlt	s9, [pc, #660]	@ 8009aa8 <neai_anomalydetection_learn+0x3a8>
 8009816:	eec6 5a87 	vdiv.f32	s11, s13, s14
 800981a:	ee36 7a05 	vadd.f32	s14, s12, s10
 800981e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009822:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009826:	edc4 4a01 	vstr	s9, [r4, #4]
 800982a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800982e:	ed85 7a02 	vstr	s14, [r5, #8]
 8009832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983a:	bfac      	ite	ge
 800983c:	eef1 6ae7 	vsqrtge.f32	s13, s15
 8009840:	eddf 6a99 	vldrlt	s13, [pc, #612]	@ 8009aa8 <neai_anomalydetection_learn+0x3a8>
 8009844:	f1b8 0f09 	cmp.w	r8, #9
 8009848:	bf8c      	ite	hi
 800984a:	207f      	movhi	r0, #127	@ 0x7f
 800984c:	207e      	movls	r0, #126	@ 0x7e
 800984e:	7018      	strb	r0, [r3, #0]
 8009850:	ecbd 8b02 	vpop	{d8}
 8009854:	edc4 6a02 	vstr	s13, [r4, #8]
 8009858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800985c:	4c91      	ldr	r4, [pc, #580]	@ (8009aa4 <neai_anomalydetection_learn+0x3a4>)
 800985e:	4f8f      	ldr	r7, [pc, #572]	@ (8009a9c <neai_anomalydetection_learn+0x39c>)
 8009860:	edd4 6a00 	vldr	s13, [r4]
 8009864:	4d8e      	ldr	r5, [pc, #568]	@ (8009aa0 <neai_anomalydetection_learn+0x3a0>)
 8009866:	ed97 7a00 	vldr	s14, [r7]
 800986a:	edd5 7a00 	vldr	s15, [r5]
 800986e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	d034      	beq.n	80098e2 <neai_anomalydetection_learn+0x1e2>
 8009878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800987c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009884:	f100 80e2 	bmi.w	8009a4c <neai_anomalydetection_learn+0x34c>
 8009888:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800988c:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8009aa8 <neai_anomalydetection_learn+0x3a8>
 8009890:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009898:	f300 80e1 	bgt.w	8009a5e <neai_anomalydetection_learn+0x35e>
 800989c:	edd4 5a01 	vldr	s11, [r4, #4]
 80098a0:	eef5 5a40 	vcmp.f32	s11, #0.0
 80098a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098ac:	f040 80c7 	bne.w	8009a3e <neai_anomalydetection_learn+0x33e>
 80098b0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8009aac <neai_anomalydetection_learn+0x3ac>
 80098b4:	edd4 5a02 	vldr	s11, [r4, #8]
 80098b8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80098bc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80098c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80098c4:	eef5 5a40 	vcmp.f32	s11, #0.0
 80098c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098d0:	f000 80c2 	beq.w	8009a58 <neai_anomalydetection_learn+0x358>
 80098d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80098d8:	ed95 5a02 	vldr	s10, [r5, #8]
 80098dc:	eef0 7a66 	vmov.f32	s15, s13
 80098e0:	e021      	b.n	8009926 <neai_anomalydetection_learn+0x226>
 80098e2:	edd4 5a01 	vldr	s11, [r4, #4]
 80098e6:	eef5 5a40 	vcmp.f32	s11, #0.0
 80098ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ee:	f040 808b 	bne.w	8009a08 <neai_anomalydetection_learn+0x308>
 80098f2:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8009aac <neai_anomalydetection_learn+0x3ac>
 80098f6:	eef0 6a47 	vmov.f32	s13, s14
 80098fa:	eef0 7a47 	vmov.f32	s15, s14
 80098fe:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8009902:	edd4 5a02 	vldr	s11, [r4, #8]
 8009906:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800990a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800990e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009916:	ee36 7a87 	vadd.f32	s14, s13, s14
 800991a:	f000 809a 	beq.w	8009a52 <neai_anomalydetection_learn+0x352>
 800991e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009922:	ed95 5a02 	vldr	s10, [r5, #8]
 8009926:	ee36 6a45 	vsub.f32	s12, s12, s10
 800992a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009932:	bf48      	it	mi
 8009934:	eeb1 6a46 	vnegmi.f32	s12, s12
 8009938:	eec6 6a25 	vdiv.f32	s13, s12, s11
 800993c:	eef4 6a67 	vcmp.f32	s13, s15
 8009940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009944:	bfc8      	it	gt
 8009946:	eef0 7a66 	vmovgt.f32	s15, s13
 800994a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800994e:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 8009952:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8009956:	4856      	ldr	r0, [pc, #344]	@ (8009ab0 <neai_anomalydetection_learn+0x3b0>)
 8009958:	4956      	ldr	r1, [pc, #344]	@ (8009ab4 <neai_anomalydetection_learn+0x3b4>)
 800995a:	6803      	ldr	r3, [r0, #0]
 800995c:	4a56      	ldr	r2, [pc, #344]	@ (8009ab8 <neai_anomalydetection_learn+0x3b8>)
 800995e:	3301      	adds	r3, #1
 8009960:	6003      	str	r3, [r0, #0]
 8009962:	edd1 5a00 	vldr	s11, [r1]
 8009966:	ee36 7a07 	vadd.f32	s14, s12, s14
 800996a:	ee06 3a90 	vmov	s13, r3
 800996e:	ed92 6a00 	vldr	s12, [r2]
 8009972:	eeb8 5a66 	vcvt.f32.u32	s10, s13
 8009976:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800997a:	ee37 7a65 	vsub.f32	s14, s14, s11
 800997e:	ee87 8a85 	vdiv.f32	s16, s15, s10
 8009982:	eec7 6a05 	vdiv.f32	s13, s14, s10
 8009986:	ee38 8a06 	vadd.f32	s16, s16, s12
 800998a:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800998e:	ed82 8a00 	vstr	s16, [r2]
 8009992:	edc1 7a00 	vstr	s15, [r1]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f43f aecd 	beq.w	8009736 <neai_anomalydetection_learn+0x36>
 800999c:	4b47      	ldr	r3, [pc, #284]	@ (8009abc <neai_anomalydetection_learn+0x3bc>)
 800999e:	edd3 8a00 	vldr	s17, [r3]
 80099a2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80099a6:	ee17 0a90 	vmov	r0, s15
 80099aa:	f7f6 fef7 	bl	800079c <__aeabi_f2d>
 80099ae:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8009a80 <neai_anomalydetection_learn+0x380>
 80099b2:	ec41 0b10 	vmov	d0, r0, r1
 80099b6:	f000 ff29 	bl	800a80c <fmax>
 80099ba:	ec51 0b10 	vmov	r0, r1, d0
 80099be:	f7f6 ffcd 	bl	800095c <__aeabi_d2f>
 80099c2:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80099c6:	ee00 0a10 	vmov	s0, r0
 80099ca:	f000 ff6d 	bl	800a8a8 <fminf>
 80099ce:	4b3c      	ldr	r3, [pc, #240]	@ (8009ac0 <neai_anomalydetection_learn+0x3c0>)
 80099d0:	ee68 7a28 	vmul.f32	s15, s16, s17
 80099d4:	ed83 0a00 	vstr	s0, [r3]
 80099d8:	ee17 0a90 	vmov	r0, s15
 80099dc:	f7f6 fede 	bl	800079c <__aeabi_f2d>
 80099e0:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8009a88 <neai_anomalydetection_learn+0x388>
 80099e4:	ec41 0b10 	vmov	d0, r0, r1
 80099e8:	f000 ff10 	bl	800a80c <fmax>
 80099ec:	ec51 0b10 	vmov	r0, r1, d0
 80099f0:	f7f6 ffb4 	bl	800095c <__aeabi_d2f>
 80099f4:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8009aac <neai_anomalydetection_learn+0x3ac>
 80099f8:	ee00 0a10 	vmov	s0, r0
 80099fc:	f000 ff54 	bl	800a8a8 <fminf>
 8009a00:	4b30      	ldr	r3, [pc, #192]	@ (8009ac4 <neai_anomalydetection_learn+0x3c4>)
 8009a02:	ed83 0a00 	vstr	s0, [r3]
 8009a06:	e696      	b.n	8009736 <neai_anomalydetection_learn+0x36>
 8009a08:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8009aac <neai_anomalydetection_learn+0x3ac>
 8009a0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8009a10:	ed95 5a01 	vldr	s10, [r5, #4]
 8009a14:	eeb0 7a67 	vmov.f32	s14, s15
 8009a18:	ee36 6a45 	vsub.f32	s12, s12, s10
 8009a1c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8009a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a24:	d501      	bpl.n	8009a2a <neai_anomalydetection_learn+0x32a>
 8009a26:	eeb1 6a46 	vneg.f32	s12, s12
 8009a2a:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8009a2e:	eef4 6a67 	vcmp.f32	s13, s15
 8009a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a36:	bfc8      	it	gt
 8009a38:	eef0 7a66 	vmovgt.f32	s15, s13
 8009a3c:	e75f      	b.n	80098fe <neai_anomalydetection_learn+0x1fe>
 8009a3e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009a42:	ed95 5a01 	vldr	s10, [r5, #4]
 8009a46:	eef0 7a66 	vmov.f32	s15, s13
 8009a4a:	e7e5      	b.n	8009a18 <neai_anomalydetection_learn+0x318>
 8009a4c:	eeb1 7a47 	vneg.f32	s14, s14
 8009a50:	e71a      	b.n	8009888 <neai_anomalydetection_learn+0x188>
 8009a52:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8009aac <neai_anomalydetection_learn+0x3ac>
 8009a56:	e771      	b.n	800993c <neai_anomalydetection_learn+0x23c>
 8009a58:	eef0 7a66 	vmov.f32	s15, s13
 8009a5c:	e775      	b.n	800994a <neai_anomalydetection_learn+0x24a>
 8009a5e:	edd4 5a01 	vldr	s11, [r4, #4]
 8009a62:	ed97 6a01 	vldr	s12, [r7, #4]
 8009a66:	ed95 5a01 	vldr	s10, [r5, #4]
 8009a6a:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a72:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009a76:	d1cf      	bne.n	8009a18 <neai_anomalydetection_learn+0x318>
 8009a78:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8009aac <neai_anomalydetection_learn+0x3ac>
 8009a7c:	e7d7      	b.n	8009a2e <neai_anomalydetection_learn+0x32e>
 8009a7e:	bf00      	nop
 8009a80:	00000000 	.word	0x00000000
 8009a84:	3ff00000 	.word	0x3ff00000
 8009a88:	00000000 	.word	0x00000000
 8009a8c:	40080000 	.word	0x40080000
 8009a90:	2000015c 	.word	0x2000015c
 8009a94:	20000154 	.word	0x20000154
 8009a98:	20000158 	.word	0x20000158
 8009a9c:	200022f4 	.word	0x200022f4
 8009aa0:	20000180 	.word	0x20000180
 8009aa4:	2000018c 	.word	0x2000018c
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	42c80000 	.word	0x42c80000
 8009ab0:	20000160 	.word	0x20000160
 8009ab4:	20000168 	.word	0x20000168
 8009ab8:	20000164 	.word	0x20000164
 8009abc:	20000174 	.word	0x20000174
 8009ac0:	2000017c 	.word	0x2000017c
 8009ac4:	20000178 	.word	0x20000178

08009ac8 <neai_anomalydetection_detect>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	ed2d 8b06 	vpush	{d8-d10}
 8009ace:	4aac      	ldr	r2, [pc, #688]	@ (8009d80 <neai_anomalydetection_detect+0x2b8>)
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	7813      	ldrb	r3, [r2, #0]
 8009ad4:	21ff      	movs	r1, #255	@ 0xff
 8009ad6:	7021      	strb	r1, [r4, #0]
 8009ad8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8009adc:	2901      	cmp	r1, #1
 8009ade:	d95b      	bls.n	8009b98 <neai_anomalydetection_detect+0xd0>
 8009ae0:	2b80      	cmp	r3, #128	@ 0x80
 8009ae2:	d059      	beq.n	8009b98 <neai_anomalydetection_detect+0xd0>
 8009ae4:	4ba7      	ldr	r3, [pc, #668]	@ (8009d84 <neai_anomalydetection_detect+0x2bc>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	d953      	bls.n	8009b94 <neai_anomalydetection_detect+0xcc>
 8009aec:	f7ff fdf4 	bl	80096d8 <funchad34.constprop.0>
 8009af0:	4ba5      	ldr	r3, [pc, #660]	@ (8009d88 <neai_anomalydetection_detect+0x2c0>)
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	f7f6 fe52 	bl	800079c <__aeabi_f2d>
 8009af8:	a39d      	add	r3, pc, #628	@ (adr r3, 8009d70 <neai_anomalydetection_detect+0x2a8>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fbbf 	bl	8000280 <__aeabi_dmul>
 8009b02:	f7f6 ff2b 	bl	800095c <__aeabi_d2f>
 8009b06:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 8009d8c <neai_anomalydetection_detect+0x2c4>
 8009b0a:	ee08 0a10 	vmov	s16, r0
 8009b0e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b16:	da43      	bge.n	8009ba0 <neai_anomalydetection_detect+0xd8>
 8009b18:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b20:	4b9b      	ldr	r3, [pc, #620]	@ (8009d90 <neai_anomalydetection_detect+0x2c8>)
 8009b22:	dd74      	ble.n	8009c0e <neai_anomalydetection_detect+0x146>
 8009b24:	eddf 9a9b 	vldr	s19, [pc, #620]	@ 8009d94 <neai_anomalydetection_detect+0x2cc>
 8009b28:	edc3 7a00 	vstr	s15, [r3]
 8009b2c:	eeb0 8a67 	vmov.f32	s16, s15
 8009b30:	4b99      	ldr	r3, [pc, #612]	@ (8009d98 <neai_anomalydetection_detect+0x2d0>)
 8009b32:	499a      	ldr	r1, [pc, #616]	@ (8009d9c <neai_anomalydetection_detect+0x2d4>)
 8009b34:	edd3 6a00 	vldr	s13, [r3]
 8009b38:	4a99      	ldr	r2, [pc, #612]	@ (8009da0 <neai_anomalydetection_detect+0x2d8>)
 8009b3a:	edd1 7a00 	vldr	s15, [r1]
 8009b3e:	ed92 7a00 	vldr	s14, [r2]
 8009b42:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4a:	d038      	beq.n	8009bbe <neai_anomalydetection_detect+0xf6>
 8009b4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b58:	d501      	bpl.n	8009b5e <neai_anomalydetection_detect+0x96>
 8009b5a:	eef1 7a67 	vneg.f32	s15, s15
 8009b5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009b62:	eddf 7a90 	vldr	s15, [pc, #576]	@ 8009da4 <neai_anomalydetection_detect+0x2dc>
 8009b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6e:	f300 80ec 	bgt.w	8009d4a <neai_anomalydetection_detect+0x282>
 8009b72:	edd3 5a01 	vldr	s11, [r3, #4]
 8009b76:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8009b82:	f000 80dc 	beq.w	8009d3e <neai_anomalydetection_detect+0x276>
 8009b86:	ed91 6a01 	vldr	s12, [r1, #4]
 8009b8a:	ed92 5a01 	vldr	s10, [r2, #4]
 8009b8e:	eeb0 7a67 	vmov.f32	s14, s15
 8009b92:	e023      	b.n	8009bdc <neai_anomalydetection_detect+0x114>
 8009b94:	237e      	movs	r3, #126	@ 0x7e
 8009b96:	7013      	strb	r3, [r2, #0]
 8009b98:	ecbd 8b06 	vpop	{d8-d10}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	bd10      	pop	{r4, pc}
 8009ba0:	eddf 7a81 	vldr	s15, [pc, #516]	@ 8009da8 <neai_anomalydetection_detect+0x2e0>
 8009ba4:	4b7a      	ldr	r3, [pc, #488]	@ (8009d90 <neai_anomalydetection_detect+0x2c8>)
 8009ba6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bae:	d928      	bls.n	8009c02 <neai_anomalydetection_detect+0x13a>
 8009bb0:	eddf 9a7e 	vldr	s19, [pc, #504]	@ 8009dac <neai_anomalydetection_detect+0x2e4>
 8009bb4:	edc3 7a00 	vstr	s15, [r3]
 8009bb8:	eeb0 8a67 	vmov.f32	s16, s15
 8009bbc:	e7b8      	b.n	8009b30 <neai_anomalydetection_detect+0x68>
 8009bbe:	edd3 5a01 	vldr	s11, [r3, #4]
 8009bc2:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bca:	d027      	beq.n	8009c1c <neai_anomalydetection_detect+0x154>
 8009bcc:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8009da8 <neai_anomalydetection_detect+0x2e0>
 8009bd0:	ed91 6a01 	vldr	s12, [r1, #4]
 8009bd4:	ed92 5a01 	vldr	s10, [r2, #4]
 8009bd8:	eef0 6a47 	vmov.f32	s13, s14
 8009bdc:	ee36 6a45 	vsub.f32	s12, s12, s10
 8009be0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8009be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be8:	d501      	bpl.n	8009bee <neai_anomalydetection_detect+0x126>
 8009bea:	eeb1 6a46 	vneg.f32	s12, s12
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bfa:	d515      	bpl.n	8009c28 <neai_anomalydetection_detect+0x160>
 8009bfc:	eeb0 7a67 	vmov.f32	s14, s15
 8009c00:	e012      	b.n	8009c28 <neai_anomalydetection_detect+0x160>
 8009c02:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 8009c06:	ee68 9a29 	vmul.f32	s19, s16, s19
 8009c0a:	6018      	str	r0, [r3, #0]
 8009c0c:	e790      	b.n	8009b30 <neai_anomalydetection_detect+0x68>
 8009c0e:	ed93 8a00 	vldr	s16, [r3]
 8009c12:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 8009c16:	ee68 9a29 	vmul.f32	s19, s16, s19
 8009c1a:	e789      	b.n	8009b30 <neai_anomalydetection_detect+0x68>
 8009c1c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8009da8 <neai_anomalydetection_detect+0x2e0>
 8009c20:	eef0 7a66 	vmov.f32	s15, s13
 8009c24:	eeb0 7a66 	vmov.f32	s14, s13
 8009c28:	ee77 8ae6 	vsub.f32	s17, s15, s13
 8009c2c:	ed93 6a02 	vldr	s12, [r3, #8]
 8009c30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009c34:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009c38:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c40:	ee78 8aa6 	vadd.f32	s17, s17, s13
 8009c44:	edd1 7a02 	vldr	s15, [r1, #8]
 8009c48:	edd2 6a02 	vldr	s13, [r2, #8]
 8009c4c:	d07a      	beq.n	8009d44 <neai_anomalydetection_detect+0x27c>
 8009c4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5a:	bf48      	it	mi
 8009c5c:	eef1 7a67 	vnegmi.f32	s15, s15
 8009c60:	ee87 9a86 	vdiv.f32	s18, s15, s12
 8009c64:	4b52      	ldr	r3, [pc, #328]	@ (8009db0 <neai_anomalydetection_detect+0x2e8>)
 8009c66:	eeb4 9a47 	vcmp.f32	s18, s14
 8009c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6e:	bfc8      	it	gt
 8009c70:	eeb0 7a49 	vmovgt.f32	s14, s18
 8009c74:	edd3 6a00 	vldr	s13, [r3]
 8009c78:	4b4e      	ldr	r3, [pc, #312]	@ (8009db4 <neai_anomalydetection_detect+0x2ec>)
 8009c7a:	ee27 7a08 	vmul.f32	s14, s14, s16
 8009c7e:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 8009c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c86:	ed93 7a00 	vldr	s14, [r3]
 8009c8a:	ee77 7aca 	vsub.f32	s15, s15, s20
 8009c8e:	ee39 9a68 	vsub.f32	s18, s18, s17
 8009c92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c9a:	ee17 0a90 	vmov	r0, s15
 8009c9e:	f7f6 fd7d 	bl	800079c <__aeabi_f2d>
 8009ca2:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8009d78 <neai_anomalydetection_detect+0x2b0>
 8009ca6:	ec41 0b10 	vmov	d0, r0, r1
 8009caa:	f000 fdaf 	bl	800a80c <fmax>
 8009cae:	ec51 0b10 	vmov	r0, r1, d0
 8009cb2:	f7f6 fe53 	bl	800095c <__aeabi_d2f>
 8009cb6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8009cba:	ee00 0a10 	vmov	s0, r0
 8009cbe:	f000 fdf3 	bl	800a8a8 <fminf>
 8009cc2:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009cc6:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8009cca:	4b3b      	ldr	r3, [pc, #236]	@ (8009db8 <neai_anomalydetection_detect+0x2f0>)
 8009ccc:	ed93 6a00 	vldr	s12, [r3]
 8009cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8009dbc <neai_anomalydetection_detect+0x2f4>)
 8009cd2:	ee37 7a28 	vadd.f32	s14, s14, s17
 8009cd6:	edd3 6a00 	vldr	s13, [r3]
 8009cda:	ee27 7a08 	vmul.f32	s14, s14, s16
 8009cde:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8009ce2:	ee77 7aca 	vsub.f32	s15, s15, s20
 8009ce6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009cee:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009cf2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009cf6:	ee17 0a90 	vmov	r0, s15
 8009cfa:	f7f6 fd4f 	bl	800079c <__aeabi_f2d>
 8009cfe:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8009d78 <neai_anomalydetection_detect+0x2b0>
 8009d02:	ec41 0b10 	vmov	d0, r0, r1
 8009d06:	f000 fd81 	bl	800a80c <fmax>
 8009d0a:	ec51 0b10 	vmov	r0, r1, d0
 8009d0e:	f7f6 fe25 	bl	800095c <__aeabi_d2f>
 8009d12:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009d16:	ee00 0a10 	vmov	s0, r0
 8009d1a:	f000 fdc5 	bl	800a8a8 <fminf>
 8009d1e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8009d22:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009d26:	2300      	movs	r3, #0
 8009d28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8009d32:	ee17 2a90 	vmov	r2, s15
 8009d36:	7022      	strb	r2, [r4, #0]
 8009d38:	ecbd 8b06 	vpop	{d8-d10}
 8009d3c:	bd10      	pop	{r4, pc}
 8009d3e:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009da8 <neai_anomalydetection_detect+0x2e0>
 8009d42:	e75b      	b.n	8009bfc <neai_anomalydetection_detect+0x134>
 8009d44:	ed9f 9a18 	vldr	s18, [pc, #96]	@ 8009da8 <neai_anomalydetection_detect+0x2e0>
 8009d48:	e78c      	b.n	8009c64 <neai_anomalydetection_detect+0x19c>
 8009d4a:	edd3 5a01 	vldr	s11, [r3, #4]
 8009d4e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8009d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d56:	ee77 6a27 	vadd.f32	s13, s14, s15
 8009d5a:	d004      	beq.n	8009d66 <neai_anomalydetection_detect+0x29e>
 8009d5c:	ed91 6a01 	vldr	s12, [r1, #4]
 8009d60:	ed92 5a01 	vldr	s10, [r2, #4]
 8009d64:	e73a      	b.n	8009bdc <neai_anomalydetection_detect+0x114>
 8009d66:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009da8 <neai_anomalydetection_detect+0x2e0>
 8009d6a:	e742      	b.n	8009bf2 <neai_anomalydetection_detect+0x12a>
 8009d6c:	f3af 8000 	nop.w
 8009d70:	28f5c28f 	.word	0x28f5c28f
 8009d74:	40088f5c 	.word	0x40088f5c
	...
 8009d80:	20000154 	.word	0x20000154
 8009d84:	20000158 	.word	0x20000158
 8009d88:	20000100 	.word	0x20000100
 8009d8c:	3c23d70a 	.word	0x3c23d70a
 8009d90:	20002300 	.word	0x20002300
 8009d94:	3c75c28f 	.word	0x3c75c28f
 8009d98:	2000018c 	.word	0x2000018c
 8009d9c:	200022f4 	.word	0x200022f4
 8009da0:	20000180 	.word	0x20000180
 8009da4:	00000000 	.word	0x00000000
 8009da8:	42c80000 	.word	0x42c80000
 8009dac:	43160000 	.word	0x43160000
 8009db0:	20000178 	.word	0x20000178
 8009db4:	2000016c 	.word	0x2000016c
 8009db8:	2000017c 	.word	0x2000017c
 8009dbc:	20000170 	.word	0x20000170

08009dc0 <_fminf>:
 8009dc0:	f000 bd72 	b.w	800a8a8 <fminf>

08009dc4 <neai_anomalydetection_init>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4820      	ldr	r0, [pc, #128]	@ (8009e48 <neai_anomalydetection_init+0x84>)
 8009dc8:	4920      	ldr	r1, [pc, #128]	@ (8009e4c <neai_anomalydetection_init+0x88>)
 8009dca:	4a21      	ldr	r2, [pc, #132]	@ (8009e50 <neai_anomalydetection_init+0x8c>)
 8009dcc:	4c21      	ldr	r4, [pc, #132]	@ (8009e54 <neai_anomalydetection_init+0x90>)
 8009dce:	4d22      	ldr	r5, [pc, #136]	@ (8009e58 <neai_anomalydetection_init+0x94>)
 8009dd0:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8009e5c <neai_anomalydetection_init+0x98>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	ed2d 8b02 	vpush	{d8}
 8009dda:	6003      	str	r3, [r0, #0]
 8009ddc:	4820      	ldr	r0, [pc, #128]	@ (8009e60 <neai_anomalydetection_init+0x9c>)
 8009dde:	600b      	str	r3, [r1, #0]
 8009de0:	604b      	str	r3, [r1, #4]
 8009de2:	608b      	str	r3, [r1, #8]
 8009de4:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8009de8:	491e      	ldr	r1, [pc, #120]	@ (8009e64 <neai_anomalydetection_init+0xa0>)
 8009dea:	f8c0 c000 	str.w	ip, [r0]
 8009dee:	481e      	ldr	r0, [pc, #120]	@ (8009e68 <neai_anomalydetection_init+0xa4>)
 8009df0:	6008      	str	r0, [r1, #0]
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	6053      	str	r3, [r2, #4]
 8009df6:	6093      	str	r3, [r2, #8]
 8009df8:	481c      	ldr	r0, [pc, #112]	@ (8009e6c <neai_anomalydetection_init+0xa8>)
 8009dfa:	491d      	ldr	r1, [pc, #116]	@ (8009e70 <neai_anomalydetection_init+0xac>)
 8009dfc:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8009e74 <neai_anomalydetection_init+0xb0>
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	4c1c      	ldr	r4, [pc, #112]	@ (8009e78 <neai_anomalydetection_init+0xb4>)
 8009e08:	6004      	str	r4, [r0, #0]
 8009e0a:	481c      	ldr	r0, [pc, #112]	@ (8009e7c <neai_anomalydetection_init+0xb8>)
 8009e0c:	4c1c      	ldr	r4, [pc, #112]	@ (8009e80 <neai_anomalydetection_init+0xbc>)
 8009e0e:	6008      	str	r0, [r1, #0]
 8009e10:	491c      	ldr	r1, [pc, #112]	@ (8009e84 <neai_anomalydetection_init+0xc0>)
 8009e12:	481d      	ldr	r0, [pc, #116]	@ (8009e88 <neai_anomalydetection_init+0xc4>)
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	4b1d      	ldr	r3, [pc, #116]	@ (8009e8c <neai_anomalydetection_init+0xc8>)
 8009e18:	4c1d      	ldr	r4, [pc, #116]	@ (8009e90 <neai_anomalydetection_init+0xcc>)
 8009e1a:	6008      	str	r0, [r1, #0]
 8009e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e20:	2101      	movs	r1, #1
 8009e22:	7019      	strb	r1, [r3, #0]
 8009e24:	7022      	strb	r2, [r4, #0]
 8009e26:	f7ff ffcb 	bl	8009dc0 <_fminf>
 8009e2a:	eeb4 0a48 	vcmp.f32	s0, s16
 8009e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e32:	bf1c      	itt	ne
 8009e34:	2081      	movne	r0, #129	@ 0x81
 8009e36:	7020      	strbne	r0, [r4, #0]
 8009e38:	ecbd 8b02 	vpop	{d8}
 8009e3c:	4b15      	ldr	r3, [pc, #84]	@ (8009e94 <neai_anomalydetection_init+0xd0>)
 8009e3e:	bf08      	it	eq
 8009e40:	7820      	ldrbeq	r0, [r4, #0]
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20000168 	.word	0x20000168
 8009e4c:	20000180 	.word	0x20000180
 8009e50:	2000018c 	.word	0x2000018c
 8009e54:	20000160 	.word	0x20000160
 8009e58:	20000164 	.word	0x20000164
 8009e5c:	40066666 	.word	0x40066666
 8009e60:	2000017c 	.word	0x2000017c
 8009e64:	20000178 	.word	0x20000178
 8009e68:	40400000 	.word	0x40400000
 8009e6c:	20000174 	.word	0x20000174
 8009e70:	20002300 	.word	0x20002300
 8009e74:	3f8ccccd 	.word	0x3f8ccccd
 8009e78:	3f9eb852 	.word	0x3f9eb852
 8009e7c:	40447ae1 	.word	0x40447ae1
 8009e80:	20000170 	.word	0x20000170
 8009e84:	2000016c 	.word	0x2000016c
 8009e88:	3f547ae1 	.word	0x3f547ae1
 8009e8c:	2000015c 	.word	0x2000015c
 8009e90:	20000154 	.word	0x20000154
 8009e94:	20000158 	.word	0x20000158

08009e98 <_vsniprintf_r>:
 8009e98:	b530      	push	{r4, r5, lr}
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	2c00      	cmp	r4, #0
 8009e9e:	b09b      	sub	sp, #108	@ 0x6c
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	da05      	bge.n	8009eb2 <_vsniprintf_r+0x1a>
 8009ea6:	238b      	movs	r3, #139	@ 0x8b
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009eae:	b01b      	add	sp, #108	@ 0x6c
 8009eb0:	bd30      	pop	{r4, r5, pc}
 8009eb2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009eb6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ec0:	bf14      	ite	ne
 8009ec2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ec6:	4623      	moveq	r3, r4
 8009ec8:	9302      	str	r3, [sp, #8]
 8009eca:	9305      	str	r3, [sp, #20]
 8009ecc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ed0:	9100      	str	r1, [sp, #0]
 8009ed2:	9104      	str	r1, [sp, #16]
 8009ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009ed8:	4669      	mov	r1, sp
 8009eda:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009edc:	f000 f9a0 	bl	800a220 <_svfiprintf_r>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	bfbc      	itt	lt
 8009ee4:	238b      	movlt	r3, #139	@ 0x8b
 8009ee6:	602b      	strlt	r3, [r5, #0]
 8009ee8:	2c00      	cmp	r4, #0
 8009eea:	d0e0      	beq.n	8009eae <_vsniprintf_r+0x16>
 8009eec:	9b00      	ldr	r3, [sp, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
 8009ef2:	e7dc      	b.n	8009eae <_vsniprintf_r+0x16>

08009ef4 <vsniprintf>:
 8009ef4:	b507      	push	{r0, r1, r2, lr}
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	460a      	mov	r2, r1
 8009efc:	4601      	mov	r1, r0
 8009efe:	4803      	ldr	r0, [pc, #12]	@ (8009f0c <vsniprintf+0x18>)
 8009f00:	6800      	ldr	r0, [r0, #0]
 8009f02:	f7ff ffc9 	bl	8009e98 <_vsniprintf_r>
 8009f06:	b003      	add	sp, #12
 8009f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f0c:	20000104 	.word	0x20000104

08009f10 <memset>:
 8009f10:	4402      	add	r2, r0
 8009f12:	4603      	mov	r3, r0
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d100      	bne.n	8009f1a <memset+0xa>
 8009f18:	4770      	bx	lr
 8009f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f1e:	e7f9      	b.n	8009f14 <memset+0x4>

08009f20 <__errno>:
 8009f20:	4b01      	ldr	r3, [pc, #4]	@ (8009f28 <__errno+0x8>)
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20000104 	.word	0x20000104

08009f2c <__libc_init_array>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009f64 <__libc_init_array+0x38>)
 8009f30:	4c0d      	ldr	r4, [pc, #52]	@ (8009f68 <__libc_init_array+0x3c>)
 8009f32:	1b64      	subs	r4, r4, r5
 8009f34:	10a4      	asrs	r4, r4, #2
 8009f36:	2600      	movs	r6, #0
 8009f38:	42a6      	cmp	r6, r4
 8009f3a:	d109      	bne.n	8009f50 <__libc_init_array+0x24>
 8009f3c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f6c <__libc_init_array+0x40>)
 8009f3e:	4c0c      	ldr	r4, [pc, #48]	@ (8009f70 <__libc_init_array+0x44>)
 8009f40:	f000 fcec 	bl	800a91c <_init>
 8009f44:	1b64      	subs	r4, r4, r5
 8009f46:	10a4      	asrs	r4, r4, #2
 8009f48:	2600      	movs	r6, #0
 8009f4a:	42a6      	cmp	r6, r4
 8009f4c:	d105      	bne.n	8009f5a <__libc_init_array+0x2e>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f54:	4798      	blx	r3
 8009f56:	3601      	adds	r6, #1
 8009f58:	e7ee      	b.n	8009f38 <__libc_init_array+0xc>
 8009f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f5e:	4798      	blx	r3
 8009f60:	3601      	adds	r6, #1
 8009f62:	e7f2      	b.n	8009f4a <__libc_init_array+0x1e>
 8009f64:	0800ab20 	.word	0x0800ab20
 8009f68:	0800ab20 	.word	0x0800ab20
 8009f6c:	0800ab20 	.word	0x0800ab20
 8009f70:	0800ab24 	.word	0x0800ab24

08009f74 <__retarget_lock_acquire_recursive>:
 8009f74:	4770      	bx	lr

08009f76 <__retarget_lock_release_recursive>:
 8009f76:	4770      	bx	lr

08009f78 <_free_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	d041      	beq.n	800a004 <_free_r+0x8c>
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f0c      	subs	r4, r1, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	18e4      	addlt	r4, r4, r3
 8009f8c:	f000 f8e0 	bl	800a150 <__malloc_lock>
 8009f90:	4a1d      	ldr	r2, [pc, #116]	@ (800a008 <_free_r+0x90>)
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	b933      	cbnz	r3, 8009fa4 <_free_r+0x2c>
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	6014      	str	r4, [r2, #0]
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa0:	f000 b8dc 	b.w	800a15c <__malloc_unlock>
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	d908      	bls.n	8009fba <_free_r+0x42>
 8009fa8:	6820      	ldr	r0, [r4, #0]
 8009faa:	1821      	adds	r1, r4, r0
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf01      	itttt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	1809      	addeq	r1, r1, r0
 8009fb6:	6021      	streq	r1, [r4, #0]
 8009fb8:	e7ed      	b.n	8009f96 <_free_r+0x1e>
 8009fba:	461a      	mov	r2, r3
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b10b      	cbz	r3, 8009fc4 <_free_r+0x4c>
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	d9fa      	bls.n	8009fba <_free_r+0x42>
 8009fc4:	6811      	ldr	r1, [r2, #0]
 8009fc6:	1850      	adds	r0, r2, r1
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d10b      	bne.n	8009fe4 <_free_r+0x6c>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	4401      	add	r1, r0
 8009fd0:	1850      	adds	r0, r2, r1
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	6011      	str	r1, [r2, #0]
 8009fd6:	d1e0      	bne.n	8009f9a <_free_r+0x22>
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	6053      	str	r3, [r2, #4]
 8009fde:	4408      	add	r0, r1
 8009fe0:	6010      	str	r0, [r2, #0]
 8009fe2:	e7da      	b.n	8009f9a <_free_r+0x22>
 8009fe4:	d902      	bls.n	8009fec <_free_r+0x74>
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	e7d6      	b.n	8009f9a <_free_r+0x22>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	1821      	adds	r1, r4, r0
 8009ff0:	428b      	cmp	r3, r1
 8009ff2:	bf04      	itt	eq
 8009ff4:	6819      	ldreq	r1, [r3, #0]
 8009ff6:	685b      	ldreq	r3, [r3, #4]
 8009ff8:	6063      	str	r3, [r4, #4]
 8009ffa:	bf04      	itt	eq
 8009ffc:	1809      	addeq	r1, r1, r0
 8009ffe:	6021      	streq	r1, [r4, #0]
 800a000:	6054      	str	r4, [r2, #4]
 800a002:	e7ca      	b.n	8009f9a <_free_r+0x22>
 800a004:	bd38      	pop	{r3, r4, r5, pc}
 800a006:	bf00      	nop
 800a008:	20002448 	.word	0x20002448

0800a00c <sbrk_aligned>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4e0f      	ldr	r6, [pc, #60]	@ (800a04c <sbrk_aligned+0x40>)
 800a010:	460c      	mov	r4, r1
 800a012:	6831      	ldr	r1, [r6, #0]
 800a014:	4605      	mov	r5, r0
 800a016:	b911      	cbnz	r1, 800a01e <sbrk_aligned+0x12>
 800a018:	f000 fba4 	bl	800a764 <_sbrk_r>
 800a01c:	6030      	str	r0, [r6, #0]
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fb9f 	bl	800a764 <_sbrk_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d103      	bne.n	800a032 <sbrk_aligned+0x26>
 800a02a:	f04f 34ff 	mov.w	r4, #4294967295
 800a02e:	4620      	mov	r0, r4
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	1cc4      	adds	r4, r0, #3
 800a034:	f024 0403 	bic.w	r4, r4, #3
 800a038:	42a0      	cmp	r0, r4
 800a03a:	d0f8      	beq.n	800a02e <sbrk_aligned+0x22>
 800a03c:	1a21      	subs	r1, r4, r0
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 fb90 	bl	800a764 <_sbrk_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d1f2      	bne.n	800a02e <sbrk_aligned+0x22>
 800a048:	e7ef      	b.n	800a02a <sbrk_aligned+0x1e>
 800a04a:	bf00      	nop
 800a04c:	20002444 	.word	0x20002444

0800a050 <_malloc_r>:
 800a050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a054:	1ccd      	adds	r5, r1, #3
 800a056:	f025 0503 	bic.w	r5, r5, #3
 800a05a:	3508      	adds	r5, #8
 800a05c:	2d0c      	cmp	r5, #12
 800a05e:	bf38      	it	cc
 800a060:	250c      	movcc	r5, #12
 800a062:	2d00      	cmp	r5, #0
 800a064:	4606      	mov	r6, r0
 800a066:	db01      	blt.n	800a06c <_malloc_r+0x1c>
 800a068:	42a9      	cmp	r1, r5
 800a06a:	d904      	bls.n	800a076 <_malloc_r+0x26>
 800a06c:	230c      	movs	r3, #12
 800a06e:	6033      	str	r3, [r6, #0]
 800a070:	2000      	movs	r0, #0
 800a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a14c <_malloc_r+0xfc>
 800a07a:	f000 f869 	bl	800a150 <__malloc_lock>
 800a07e:	f8d8 3000 	ldr.w	r3, [r8]
 800a082:	461c      	mov	r4, r3
 800a084:	bb44      	cbnz	r4, 800a0d8 <_malloc_r+0x88>
 800a086:	4629      	mov	r1, r5
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff ffbf 	bl	800a00c <sbrk_aligned>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	4604      	mov	r4, r0
 800a092:	d158      	bne.n	800a146 <_malloc_r+0xf6>
 800a094:	f8d8 4000 	ldr.w	r4, [r8]
 800a098:	4627      	mov	r7, r4
 800a09a:	2f00      	cmp	r7, #0
 800a09c:	d143      	bne.n	800a126 <_malloc_r+0xd6>
 800a09e:	2c00      	cmp	r4, #0
 800a0a0:	d04b      	beq.n	800a13a <_malloc_r+0xea>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	eb04 0903 	add.w	r9, r4, r3
 800a0ac:	f000 fb5a 	bl	800a764 <_sbrk_r>
 800a0b0:	4581      	cmp	r9, r0
 800a0b2:	d142      	bne.n	800a13a <_malloc_r+0xea>
 800a0b4:	6821      	ldr	r1, [r4, #0]
 800a0b6:	1a6d      	subs	r5, r5, r1
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff ffa6 	bl	800a00c <sbrk_aligned>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d03a      	beq.n	800a13a <_malloc_r+0xea>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	442b      	add	r3, r5
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	bb62      	cbnz	r2, 800a12c <_malloc_r+0xdc>
 800a0d2:	f8c8 7000 	str.w	r7, [r8]
 800a0d6:	e00f      	b.n	800a0f8 <_malloc_r+0xa8>
 800a0d8:	6822      	ldr	r2, [r4, #0]
 800a0da:	1b52      	subs	r2, r2, r5
 800a0dc:	d420      	bmi.n	800a120 <_malloc_r+0xd0>
 800a0de:	2a0b      	cmp	r2, #11
 800a0e0:	d917      	bls.n	800a112 <_malloc_r+0xc2>
 800a0e2:	1961      	adds	r1, r4, r5
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	6025      	str	r5, [r4, #0]
 800a0e8:	bf18      	it	ne
 800a0ea:	6059      	strne	r1, [r3, #4]
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	bf08      	it	eq
 800a0f0:	f8c8 1000 	streq.w	r1, [r8]
 800a0f4:	5162      	str	r2, [r4, r5]
 800a0f6:	604b      	str	r3, [r1, #4]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f000 f82f 	bl	800a15c <__malloc_unlock>
 800a0fe:	f104 000b 	add.w	r0, r4, #11
 800a102:	1d23      	adds	r3, r4, #4
 800a104:	f020 0007 	bic.w	r0, r0, #7
 800a108:	1ac2      	subs	r2, r0, r3
 800a10a:	bf1c      	itt	ne
 800a10c:	1a1b      	subne	r3, r3, r0
 800a10e:	50a3      	strne	r3, [r4, r2]
 800a110:	e7af      	b.n	800a072 <_malloc_r+0x22>
 800a112:	6862      	ldr	r2, [r4, #4]
 800a114:	42a3      	cmp	r3, r4
 800a116:	bf0c      	ite	eq
 800a118:	f8c8 2000 	streq.w	r2, [r8]
 800a11c:	605a      	strne	r2, [r3, #4]
 800a11e:	e7eb      	b.n	800a0f8 <_malloc_r+0xa8>
 800a120:	4623      	mov	r3, r4
 800a122:	6864      	ldr	r4, [r4, #4]
 800a124:	e7ae      	b.n	800a084 <_malloc_r+0x34>
 800a126:	463c      	mov	r4, r7
 800a128:	687f      	ldr	r7, [r7, #4]
 800a12a:	e7b6      	b.n	800a09a <_malloc_r+0x4a>
 800a12c:	461a      	mov	r2, r3
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	42a3      	cmp	r3, r4
 800a132:	d1fb      	bne.n	800a12c <_malloc_r+0xdc>
 800a134:	2300      	movs	r3, #0
 800a136:	6053      	str	r3, [r2, #4]
 800a138:	e7de      	b.n	800a0f8 <_malloc_r+0xa8>
 800a13a:	230c      	movs	r3, #12
 800a13c:	6033      	str	r3, [r6, #0]
 800a13e:	4630      	mov	r0, r6
 800a140:	f000 f80c 	bl	800a15c <__malloc_unlock>
 800a144:	e794      	b.n	800a070 <_malloc_r+0x20>
 800a146:	6005      	str	r5, [r0, #0]
 800a148:	e7d6      	b.n	800a0f8 <_malloc_r+0xa8>
 800a14a:	bf00      	nop
 800a14c:	20002448 	.word	0x20002448

0800a150 <__malloc_lock>:
 800a150:	4801      	ldr	r0, [pc, #4]	@ (800a158 <__malloc_lock+0x8>)
 800a152:	f7ff bf0f 	b.w	8009f74 <__retarget_lock_acquire_recursive>
 800a156:	bf00      	nop
 800a158:	20002440 	.word	0x20002440

0800a15c <__malloc_unlock>:
 800a15c:	4801      	ldr	r0, [pc, #4]	@ (800a164 <__malloc_unlock+0x8>)
 800a15e:	f7ff bf0a 	b.w	8009f76 <__retarget_lock_release_recursive>
 800a162:	bf00      	nop
 800a164:	20002440 	.word	0x20002440

0800a168 <__ssputs_r>:
 800a168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a16c:	688e      	ldr	r6, [r1, #8]
 800a16e:	461f      	mov	r7, r3
 800a170:	42be      	cmp	r6, r7
 800a172:	680b      	ldr	r3, [r1, #0]
 800a174:	4682      	mov	sl, r0
 800a176:	460c      	mov	r4, r1
 800a178:	4690      	mov	r8, r2
 800a17a:	d82d      	bhi.n	800a1d8 <__ssputs_r+0x70>
 800a17c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a180:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a184:	d026      	beq.n	800a1d4 <__ssputs_r+0x6c>
 800a186:	6965      	ldr	r5, [r4, #20]
 800a188:	6909      	ldr	r1, [r1, #16]
 800a18a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a18e:	eba3 0901 	sub.w	r9, r3, r1
 800a192:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a196:	1c7b      	adds	r3, r7, #1
 800a198:	444b      	add	r3, r9
 800a19a:	106d      	asrs	r5, r5, #1
 800a19c:	429d      	cmp	r5, r3
 800a19e:	bf38      	it	cc
 800a1a0:	461d      	movcc	r5, r3
 800a1a2:	0553      	lsls	r3, r2, #21
 800a1a4:	d527      	bpl.n	800a1f6 <__ssputs_r+0x8e>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	f7ff ff52 	bl	800a050 <_malloc_r>
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	b360      	cbz	r0, 800a20a <__ssputs_r+0xa2>
 800a1b0:	6921      	ldr	r1, [r4, #16]
 800a1b2:	464a      	mov	r2, r9
 800a1b4:	f000 fae6 	bl	800a784 <memcpy>
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c2:	81a3      	strh	r3, [r4, #12]
 800a1c4:	6126      	str	r6, [r4, #16]
 800a1c6:	6165      	str	r5, [r4, #20]
 800a1c8:	444e      	add	r6, r9
 800a1ca:	eba5 0509 	sub.w	r5, r5, r9
 800a1ce:	6026      	str	r6, [r4, #0]
 800a1d0:	60a5      	str	r5, [r4, #8]
 800a1d2:	463e      	mov	r6, r7
 800a1d4:	42be      	cmp	r6, r7
 800a1d6:	d900      	bls.n	800a1da <__ssputs_r+0x72>
 800a1d8:	463e      	mov	r6, r7
 800a1da:	6820      	ldr	r0, [r4, #0]
 800a1dc:	4632      	mov	r2, r6
 800a1de:	4641      	mov	r1, r8
 800a1e0:	f000 faa6 	bl	800a730 <memmove>
 800a1e4:	68a3      	ldr	r3, [r4, #8]
 800a1e6:	1b9b      	subs	r3, r3, r6
 800a1e8:	60a3      	str	r3, [r4, #8]
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	4433      	add	r3, r6
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	f000 fad2 	bl	800a7a0 <_realloc_r>
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d1e0      	bne.n	800a1c4 <__ssputs_r+0x5c>
 800a202:	6921      	ldr	r1, [r4, #16]
 800a204:	4650      	mov	r0, sl
 800a206:	f7ff feb7 	bl	8009f78 <_free_r>
 800a20a:	230c      	movs	r3, #12
 800a20c:	f8ca 3000 	str.w	r3, [sl]
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	e7e9      	b.n	800a1f2 <__ssputs_r+0x8a>
	...

0800a220 <_svfiprintf_r>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	4698      	mov	r8, r3
 800a226:	898b      	ldrh	r3, [r1, #12]
 800a228:	061b      	lsls	r3, r3, #24
 800a22a:	b09d      	sub	sp, #116	@ 0x74
 800a22c:	4607      	mov	r7, r0
 800a22e:	460d      	mov	r5, r1
 800a230:	4614      	mov	r4, r2
 800a232:	d510      	bpl.n	800a256 <_svfiprintf_r+0x36>
 800a234:	690b      	ldr	r3, [r1, #16]
 800a236:	b973      	cbnz	r3, 800a256 <_svfiprintf_r+0x36>
 800a238:	2140      	movs	r1, #64	@ 0x40
 800a23a:	f7ff ff09 	bl	800a050 <_malloc_r>
 800a23e:	6028      	str	r0, [r5, #0]
 800a240:	6128      	str	r0, [r5, #16]
 800a242:	b930      	cbnz	r0, 800a252 <_svfiprintf_r+0x32>
 800a244:	230c      	movs	r3, #12
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	f04f 30ff 	mov.w	r0, #4294967295
 800a24c:	b01d      	add	sp, #116	@ 0x74
 800a24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a252:	2340      	movs	r3, #64	@ 0x40
 800a254:	616b      	str	r3, [r5, #20]
 800a256:	2300      	movs	r3, #0
 800a258:	9309      	str	r3, [sp, #36]	@ 0x24
 800a25a:	2320      	movs	r3, #32
 800a25c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a260:	f8cd 800c 	str.w	r8, [sp, #12]
 800a264:	2330      	movs	r3, #48	@ 0x30
 800a266:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a404 <_svfiprintf_r+0x1e4>
 800a26a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a26e:	f04f 0901 	mov.w	r9, #1
 800a272:	4623      	mov	r3, r4
 800a274:	469a      	mov	sl, r3
 800a276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a27a:	b10a      	cbz	r2, 800a280 <_svfiprintf_r+0x60>
 800a27c:	2a25      	cmp	r2, #37	@ 0x25
 800a27e:	d1f9      	bne.n	800a274 <_svfiprintf_r+0x54>
 800a280:	ebba 0b04 	subs.w	fp, sl, r4
 800a284:	d00b      	beq.n	800a29e <_svfiprintf_r+0x7e>
 800a286:	465b      	mov	r3, fp
 800a288:	4622      	mov	r2, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	4638      	mov	r0, r7
 800a28e:	f7ff ff6b 	bl	800a168 <__ssputs_r>
 800a292:	3001      	adds	r0, #1
 800a294:	f000 80a7 	beq.w	800a3e6 <_svfiprintf_r+0x1c6>
 800a298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a29a:	445a      	add	r2, fp
 800a29c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a29e:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 809f 	beq.w	800a3e6 <_svfiprintf_r+0x1c6>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2b2:	f10a 0a01 	add.w	sl, sl, #1
 800a2b6:	9304      	str	r3, [sp, #16]
 800a2b8:	9307      	str	r3, [sp, #28]
 800a2ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2be:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2c0:	4654      	mov	r4, sl
 800a2c2:	2205      	movs	r2, #5
 800a2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c8:	484e      	ldr	r0, [pc, #312]	@ (800a404 <_svfiprintf_r+0x1e4>)
 800a2ca:	f7f5 ff89 	bl	80001e0 <memchr>
 800a2ce:	9a04      	ldr	r2, [sp, #16]
 800a2d0:	b9d8      	cbnz	r0, 800a30a <_svfiprintf_r+0xea>
 800a2d2:	06d0      	lsls	r0, r2, #27
 800a2d4:	bf44      	itt	mi
 800a2d6:	2320      	movmi	r3, #32
 800a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2dc:	0711      	lsls	r1, r2, #28
 800a2de:	bf44      	itt	mi
 800a2e0:	232b      	movmi	r3, #43	@ 0x2b
 800a2e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ec:	d015      	beq.n	800a31a <_svfiprintf_r+0xfa>
 800a2ee:	9a07      	ldr	r2, [sp, #28]
 800a2f0:	4654      	mov	r4, sl
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f04f 0c0a 	mov.w	ip, #10
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2fe:	3b30      	subs	r3, #48	@ 0x30
 800a300:	2b09      	cmp	r3, #9
 800a302:	d94b      	bls.n	800a39c <_svfiprintf_r+0x17c>
 800a304:	b1b0      	cbz	r0, 800a334 <_svfiprintf_r+0x114>
 800a306:	9207      	str	r2, [sp, #28]
 800a308:	e014      	b.n	800a334 <_svfiprintf_r+0x114>
 800a30a:	eba0 0308 	sub.w	r3, r0, r8
 800a30e:	fa09 f303 	lsl.w	r3, r9, r3
 800a312:	4313      	orrs	r3, r2
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	46a2      	mov	sl, r4
 800a318:	e7d2      	b.n	800a2c0 <_svfiprintf_r+0xa0>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	1d19      	adds	r1, r3, #4
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	9103      	str	r1, [sp, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	bfbb      	ittet	lt
 800a326:	425b      	neglt	r3, r3
 800a328:	f042 0202 	orrlt.w	r2, r2, #2
 800a32c:	9307      	strge	r3, [sp, #28]
 800a32e:	9307      	strlt	r3, [sp, #28]
 800a330:	bfb8      	it	lt
 800a332:	9204      	strlt	r2, [sp, #16]
 800a334:	7823      	ldrb	r3, [r4, #0]
 800a336:	2b2e      	cmp	r3, #46	@ 0x2e
 800a338:	d10a      	bne.n	800a350 <_svfiprintf_r+0x130>
 800a33a:	7863      	ldrb	r3, [r4, #1]
 800a33c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a33e:	d132      	bne.n	800a3a6 <_svfiprintf_r+0x186>
 800a340:	9b03      	ldr	r3, [sp, #12]
 800a342:	1d1a      	adds	r2, r3, #4
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	9203      	str	r2, [sp, #12]
 800a348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a34c:	3402      	adds	r4, #2
 800a34e:	9305      	str	r3, [sp, #20]
 800a350:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a414 <_svfiprintf_r+0x1f4>
 800a354:	7821      	ldrb	r1, [r4, #0]
 800a356:	2203      	movs	r2, #3
 800a358:	4650      	mov	r0, sl
 800a35a:	f7f5 ff41 	bl	80001e0 <memchr>
 800a35e:	b138      	cbz	r0, 800a370 <_svfiprintf_r+0x150>
 800a360:	9b04      	ldr	r3, [sp, #16]
 800a362:	eba0 000a 	sub.w	r0, r0, sl
 800a366:	2240      	movs	r2, #64	@ 0x40
 800a368:	4082      	lsls	r2, r0
 800a36a:	4313      	orrs	r3, r2
 800a36c:	3401      	adds	r4, #1
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a374:	4824      	ldr	r0, [pc, #144]	@ (800a408 <_svfiprintf_r+0x1e8>)
 800a376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a37a:	2206      	movs	r2, #6
 800a37c:	f7f5 ff30 	bl	80001e0 <memchr>
 800a380:	2800      	cmp	r0, #0
 800a382:	d036      	beq.n	800a3f2 <_svfiprintf_r+0x1d2>
 800a384:	4b21      	ldr	r3, [pc, #132]	@ (800a40c <_svfiprintf_r+0x1ec>)
 800a386:	bb1b      	cbnz	r3, 800a3d0 <_svfiprintf_r+0x1b0>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	3307      	adds	r3, #7
 800a38c:	f023 0307 	bic.w	r3, r3, #7
 800a390:	3308      	adds	r3, #8
 800a392:	9303      	str	r3, [sp, #12]
 800a394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a396:	4433      	add	r3, r6
 800a398:	9309      	str	r3, [sp, #36]	@ 0x24
 800a39a:	e76a      	b.n	800a272 <_svfiprintf_r+0x52>
 800a39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3a0:	460c      	mov	r4, r1
 800a3a2:	2001      	movs	r0, #1
 800a3a4:	e7a8      	b.n	800a2f8 <_svfiprintf_r+0xd8>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	3401      	adds	r4, #1
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f04f 0c0a 	mov.w	ip, #10
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b8:	3a30      	subs	r2, #48	@ 0x30
 800a3ba:	2a09      	cmp	r2, #9
 800a3bc:	d903      	bls.n	800a3c6 <_svfiprintf_r+0x1a6>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0c6      	beq.n	800a350 <_svfiprintf_r+0x130>
 800a3c2:	9105      	str	r1, [sp, #20]
 800a3c4:	e7c4      	b.n	800a350 <_svfiprintf_r+0x130>
 800a3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e7f0      	b.n	800a3b2 <_svfiprintf_r+0x192>
 800a3d0:	ab03      	add	r3, sp, #12
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	462a      	mov	r2, r5
 800a3d6:	4b0e      	ldr	r3, [pc, #56]	@ (800a410 <_svfiprintf_r+0x1f0>)
 800a3d8:	a904      	add	r1, sp, #16
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f3af 8000 	nop.w
 800a3e0:	1c42      	adds	r2, r0, #1
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	d1d6      	bne.n	800a394 <_svfiprintf_r+0x174>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	065b      	lsls	r3, r3, #25
 800a3ea:	f53f af2d 	bmi.w	800a248 <_svfiprintf_r+0x28>
 800a3ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3f0:	e72c      	b.n	800a24c <_svfiprintf_r+0x2c>
 800a3f2:	ab03      	add	r3, sp, #12
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4b05      	ldr	r3, [pc, #20]	@ (800a410 <_svfiprintf_r+0x1f0>)
 800a3fa:	a904      	add	r1, sp, #16
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f000 f879 	bl	800a4f4 <_printf_i>
 800a402:	e7ed      	b.n	800a3e0 <_svfiprintf_r+0x1c0>
 800a404:	0800aae4 	.word	0x0800aae4
 800a408:	0800aaee 	.word	0x0800aaee
 800a40c:	00000000 	.word	0x00000000
 800a410:	0800a169 	.word	0x0800a169
 800a414:	0800aaea 	.word	0x0800aaea

0800a418 <_printf_common>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	4616      	mov	r6, r2
 800a41e:	4698      	mov	r8, r3
 800a420:	688a      	ldr	r2, [r1, #8]
 800a422:	690b      	ldr	r3, [r1, #16]
 800a424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a428:	4293      	cmp	r3, r2
 800a42a:	bfb8      	it	lt
 800a42c:	4613      	movlt	r3, r2
 800a42e:	6033      	str	r3, [r6, #0]
 800a430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a434:	4607      	mov	r7, r0
 800a436:	460c      	mov	r4, r1
 800a438:	b10a      	cbz	r2, 800a43e <_printf_common+0x26>
 800a43a:	3301      	adds	r3, #1
 800a43c:	6033      	str	r3, [r6, #0]
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	0699      	lsls	r1, r3, #26
 800a442:	bf42      	ittt	mi
 800a444:	6833      	ldrmi	r3, [r6, #0]
 800a446:	3302      	addmi	r3, #2
 800a448:	6033      	strmi	r3, [r6, #0]
 800a44a:	6825      	ldr	r5, [r4, #0]
 800a44c:	f015 0506 	ands.w	r5, r5, #6
 800a450:	d106      	bne.n	800a460 <_printf_common+0x48>
 800a452:	f104 0a19 	add.w	sl, r4, #25
 800a456:	68e3      	ldr	r3, [r4, #12]
 800a458:	6832      	ldr	r2, [r6, #0]
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	42ab      	cmp	r3, r5
 800a45e:	dc26      	bgt.n	800a4ae <_printf_common+0x96>
 800a460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	3b00      	subs	r3, #0
 800a468:	bf18      	it	ne
 800a46a:	2301      	movne	r3, #1
 800a46c:	0692      	lsls	r2, r2, #26
 800a46e:	d42b      	bmi.n	800a4c8 <_printf_common+0xb0>
 800a470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a474:	4641      	mov	r1, r8
 800a476:	4638      	mov	r0, r7
 800a478:	47c8      	blx	r9
 800a47a:	3001      	adds	r0, #1
 800a47c:	d01e      	beq.n	800a4bc <_printf_common+0xa4>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	6922      	ldr	r2, [r4, #16]
 800a482:	f003 0306 	and.w	r3, r3, #6
 800a486:	2b04      	cmp	r3, #4
 800a488:	bf02      	ittt	eq
 800a48a:	68e5      	ldreq	r5, [r4, #12]
 800a48c:	6833      	ldreq	r3, [r6, #0]
 800a48e:	1aed      	subeq	r5, r5, r3
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	bf0c      	ite	eq
 800a494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a498:	2500      	movne	r5, #0
 800a49a:	4293      	cmp	r3, r2
 800a49c:	bfc4      	itt	gt
 800a49e:	1a9b      	subgt	r3, r3, r2
 800a4a0:	18ed      	addgt	r5, r5, r3
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	341a      	adds	r4, #26
 800a4a6:	42b5      	cmp	r5, r6
 800a4a8:	d11a      	bne.n	800a4e0 <_printf_common+0xc8>
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	e008      	b.n	800a4c0 <_printf_common+0xa8>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4652      	mov	r2, sl
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	47c8      	blx	r9
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d103      	bne.n	800a4c4 <_printf_common+0xac>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c4:	3501      	adds	r5, #1
 800a4c6:	e7c6      	b.n	800a456 <_printf_common+0x3e>
 800a4c8:	18e1      	adds	r1, r4, r3
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	2030      	movs	r0, #48	@ 0x30
 800a4ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4d2:	4422      	add	r2, r4
 800a4d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4dc:	3302      	adds	r3, #2
 800a4de:	e7c7      	b.n	800a470 <_printf_common+0x58>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	4641      	mov	r1, r8
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	47c8      	blx	r9
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	d0e6      	beq.n	800a4bc <_printf_common+0xa4>
 800a4ee:	3601      	adds	r6, #1
 800a4f0:	e7d9      	b.n	800a4a6 <_printf_common+0x8e>
	...

0800a4f4 <_printf_i>:
 800a4f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	7e0f      	ldrb	r7, [r1, #24]
 800a4fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4fc:	2f78      	cmp	r7, #120	@ 0x78
 800a4fe:	4691      	mov	r9, r2
 800a500:	4680      	mov	r8, r0
 800a502:	460c      	mov	r4, r1
 800a504:	469a      	mov	sl, r3
 800a506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a50a:	d807      	bhi.n	800a51c <_printf_i+0x28>
 800a50c:	2f62      	cmp	r7, #98	@ 0x62
 800a50e:	d80a      	bhi.n	800a526 <_printf_i+0x32>
 800a510:	2f00      	cmp	r7, #0
 800a512:	f000 80d1 	beq.w	800a6b8 <_printf_i+0x1c4>
 800a516:	2f58      	cmp	r7, #88	@ 0x58
 800a518:	f000 80b8 	beq.w	800a68c <_printf_i+0x198>
 800a51c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a524:	e03a      	b.n	800a59c <_printf_i+0xa8>
 800a526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a52a:	2b15      	cmp	r3, #21
 800a52c:	d8f6      	bhi.n	800a51c <_printf_i+0x28>
 800a52e:	a101      	add	r1, pc, #4	@ (adr r1, 800a534 <_printf_i+0x40>)
 800a530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a534:	0800a58d 	.word	0x0800a58d
 800a538:	0800a5a1 	.word	0x0800a5a1
 800a53c:	0800a51d 	.word	0x0800a51d
 800a540:	0800a51d 	.word	0x0800a51d
 800a544:	0800a51d 	.word	0x0800a51d
 800a548:	0800a51d 	.word	0x0800a51d
 800a54c:	0800a5a1 	.word	0x0800a5a1
 800a550:	0800a51d 	.word	0x0800a51d
 800a554:	0800a51d 	.word	0x0800a51d
 800a558:	0800a51d 	.word	0x0800a51d
 800a55c:	0800a51d 	.word	0x0800a51d
 800a560:	0800a69f 	.word	0x0800a69f
 800a564:	0800a5cb 	.word	0x0800a5cb
 800a568:	0800a659 	.word	0x0800a659
 800a56c:	0800a51d 	.word	0x0800a51d
 800a570:	0800a51d 	.word	0x0800a51d
 800a574:	0800a6c1 	.word	0x0800a6c1
 800a578:	0800a51d 	.word	0x0800a51d
 800a57c:	0800a5cb 	.word	0x0800a5cb
 800a580:	0800a51d 	.word	0x0800a51d
 800a584:	0800a51d 	.word	0x0800a51d
 800a588:	0800a661 	.word	0x0800a661
 800a58c:	6833      	ldr	r3, [r6, #0]
 800a58e:	1d1a      	adds	r2, r3, #4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6032      	str	r2, [r6, #0]
 800a594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a59c:	2301      	movs	r3, #1
 800a59e:	e09c      	b.n	800a6da <_printf_i+0x1e6>
 800a5a0:	6833      	ldr	r3, [r6, #0]
 800a5a2:	6820      	ldr	r0, [r4, #0]
 800a5a4:	1d19      	adds	r1, r3, #4
 800a5a6:	6031      	str	r1, [r6, #0]
 800a5a8:	0606      	lsls	r6, r0, #24
 800a5aa:	d501      	bpl.n	800a5b0 <_printf_i+0xbc>
 800a5ac:	681d      	ldr	r5, [r3, #0]
 800a5ae:	e003      	b.n	800a5b8 <_printf_i+0xc4>
 800a5b0:	0645      	lsls	r5, r0, #25
 800a5b2:	d5fb      	bpl.n	800a5ac <_printf_i+0xb8>
 800a5b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	da03      	bge.n	800a5c4 <_printf_i+0xd0>
 800a5bc:	232d      	movs	r3, #45	@ 0x2d
 800a5be:	426d      	negs	r5, r5
 800a5c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5c4:	4858      	ldr	r0, [pc, #352]	@ (800a728 <_printf_i+0x234>)
 800a5c6:	230a      	movs	r3, #10
 800a5c8:	e011      	b.n	800a5ee <_printf_i+0xfa>
 800a5ca:	6821      	ldr	r1, [r4, #0]
 800a5cc:	6833      	ldr	r3, [r6, #0]
 800a5ce:	0608      	lsls	r0, r1, #24
 800a5d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5d4:	d402      	bmi.n	800a5dc <_printf_i+0xe8>
 800a5d6:	0649      	lsls	r1, r1, #25
 800a5d8:	bf48      	it	mi
 800a5da:	b2ad      	uxthmi	r5, r5
 800a5dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5de:	4852      	ldr	r0, [pc, #328]	@ (800a728 <_printf_i+0x234>)
 800a5e0:	6033      	str	r3, [r6, #0]
 800a5e2:	bf14      	ite	ne
 800a5e4:	230a      	movne	r3, #10
 800a5e6:	2308      	moveq	r3, #8
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5ee:	6866      	ldr	r6, [r4, #4]
 800a5f0:	60a6      	str	r6, [r4, #8]
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	db05      	blt.n	800a602 <_printf_i+0x10e>
 800a5f6:	6821      	ldr	r1, [r4, #0]
 800a5f8:	432e      	orrs	r6, r5
 800a5fa:	f021 0104 	bic.w	r1, r1, #4
 800a5fe:	6021      	str	r1, [r4, #0]
 800a600:	d04b      	beq.n	800a69a <_printf_i+0x1a6>
 800a602:	4616      	mov	r6, r2
 800a604:	fbb5 f1f3 	udiv	r1, r5, r3
 800a608:	fb03 5711 	mls	r7, r3, r1, r5
 800a60c:	5dc7      	ldrb	r7, [r0, r7]
 800a60e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a612:	462f      	mov	r7, r5
 800a614:	42bb      	cmp	r3, r7
 800a616:	460d      	mov	r5, r1
 800a618:	d9f4      	bls.n	800a604 <_printf_i+0x110>
 800a61a:	2b08      	cmp	r3, #8
 800a61c:	d10b      	bne.n	800a636 <_printf_i+0x142>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	07df      	lsls	r7, r3, #31
 800a622:	d508      	bpl.n	800a636 <_printf_i+0x142>
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	6861      	ldr	r1, [r4, #4]
 800a628:	4299      	cmp	r1, r3
 800a62a:	bfde      	ittt	le
 800a62c:	2330      	movle	r3, #48	@ 0x30
 800a62e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a632:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a636:	1b92      	subs	r2, r2, r6
 800a638:	6122      	str	r2, [r4, #16]
 800a63a:	f8cd a000 	str.w	sl, [sp]
 800a63e:	464b      	mov	r3, r9
 800a640:	aa03      	add	r2, sp, #12
 800a642:	4621      	mov	r1, r4
 800a644:	4640      	mov	r0, r8
 800a646:	f7ff fee7 	bl	800a418 <_printf_common>
 800a64a:	3001      	adds	r0, #1
 800a64c:	d14a      	bne.n	800a6e4 <_printf_i+0x1f0>
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295
 800a652:	b004      	add	sp, #16
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	f043 0320 	orr.w	r3, r3, #32
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	4832      	ldr	r0, [pc, #200]	@ (800a72c <_printf_i+0x238>)
 800a662:	2778      	movs	r7, #120	@ 0x78
 800a664:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	6831      	ldr	r1, [r6, #0]
 800a66c:	061f      	lsls	r7, r3, #24
 800a66e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a672:	d402      	bmi.n	800a67a <_printf_i+0x186>
 800a674:	065f      	lsls	r7, r3, #25
 800a676:	bf48      	it	mi
 800a678:	b2ad      	uxthmi	r5, r5
 800a67a:	6031      	str	r1, [r6, #0]
 800a67c:	07d9      	lsls	r1, r3, #31
 800a67e:	bf44      	itt	mi
 800a680:	f043 0320 	orrmi.w	r3, r3, #32
 800a684:	6023      	strmi	r3, [r4, #0]
 800a686:	b11d      	cbz	r5, 800a690 <_printf_i+0x19c>
 800a688:	2310      	movs	r3, #16
 800a68a:	e7ad      	b.n	800a5e8 <_printf_i+0xf4>
 800a68c:	4826      	ldr	r0, [pc, #152]	@ (800a728 <_printf_i+0x234>)
 800a68e:	e7e9      	b.n	800a664 <_printf_i+0x170>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	f023 0320 	bic.w	r3, r3, #32
 800a696:	6023      	str	r3, [r4, #0]
 800a698:	e7f6      	b.n	800a688 <_printf_i+0x194>
 800a69a:	4616      	mov	r6, r2
 800a69c:	e7bd      	b.n	800a61a <_printf_i+0x126>
 800a69e:	6833      	ldr	r3, [r6, #0]
 800a6a0:	6825      	ldr	r5, [r4, #0]
 800a6a2:	6961      	ldr	r1, [r4, #20]
 800a6a4:	1d18      	adds	r0, r3, #4
 800a6a6:	6030      	str	r0, [r6, #0]
 800a6a8:	062e      	lsls	r6, r5, #24
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	d501      	bpl.n	800a6b2 <_printf_i+0x1be>
 800a6ae:	6019      	str	r1, [r3, #0]
 800a6b0:	e002      	b.n	800a6b8 <_printf_i+0x1c4>
 800a6b2:	0668      	lsls	r0, r5, #25
 800a6b4:	d5fb      	bpl.n	800a6ae <_printf_i+0x1ba>
 800a6b6:	8019      	strh	r1, [r3, #0]
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	4616      	mov	r6, r2
 800a6be:	e7bc      	b.n	800a63a <_printf_i+0x146>
 800a6c0:	6833      	ldr	r3, [r6, #0]
 800a6c2:	1d1a      	adds	r2, r3, #4
 800a6c4:	6032      	str	r2, [r6, #0]
 800a6c6:	681e      	ldr	r6, [r3, #0]
 800a6c8:	6862      	ldr	r2, [r4, #4]
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7f5 fd87 	bl	80001e0 <memchr>
 800a6d2:	b108      	cbz	r0, 800a6d8 <_printf_i+0x1e4>
 800a6d4:	1b80      	subs	r0, r0, r6
 800a6d6:	6060      	str	r0, [r4, #4]
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	6123      	str	r3, [r4, #16]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6e2:	e7aa      	b.n	800a63a <_printf_i+0x146>
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	47d0      	blx	sl
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	d0ad      	beq.n	800a64e <_printf_i+0x15a>
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	079b      	lsls	r3, r3, #30
 800a6f6:	d413      	bmi.n	800a720 <_printf_i+0x22c>
 800a6f8:	68e0      	ldr	r0, [r4, #12]
 800a6fa:	9b03      	ldr	r3, [sp, #12]
 800a6fc:	4298      	cmp	r0, r3
 800a6fe:	bfb8      	it	lt
 800a700:	4618      	movlt	r0, r3
 800a702:	e7a6      	b.n	800a652 <_printf_i+0x15e>
 800a704:	2301      	movs	r3, #1
 800a706:	4632      	mov	r2, r6
 800a708:	4649      	mov	r1, r9
 800a70a:	4640      	mov	r0, r8
 800a70c:	47d0      	blx	sl
 800a70e:	3001      	adds	r0, #1
 800a710:	d09d      	beq.n	800a64e <_printf_i+0x15a>
 800a712:	3501      	adds	r5, #1
 800a714:	68e3      	ldr	r3, [r4, #12]
 800a716:	9903      	ldr	r1, [sp, #12]
 800a718:	1a5b      	subs	r3, r3, r1
 800a71a:	42ab      	cmp	r3, r5
 800a71c:	dcf2      	bgt.n	800a704 <_printf_i+0x210>
 800a71e:	e7eb      	b.n	800a6f8 <_printf_i+0x204>
 800a720:	2500      	movs	r5, #0
 800a722:	f104 0619 	add.w	r6, r4, #25
 800a726:	e7f5      	b.n	800a714 <_printf_i+0x220>
 800a728:	0800aaf5 	.word	0x0800aaf5
 800a72c:	0800ab06 	.word	0x0800ab06

0800a730 <memmove>:
 800a730:	4288      	cmp	r0, r1
 800a732:	b510      	push	{r4, lr}
 800a734:	eb01 0402 	add.w	r4, r1, r2
 800a738:	d902      	bls.n	800a740 <memmove+0x10>
 800a73a:	4284      	cmp	r4, r0
 800a73c:	4623      	mov	r3, r4
 800a73e:	d807      	bhi.n	800a750 <memmove+0x20>
 800a740:	1e43      	subs	r3, r0, #1
 800a742:	42a1      	cmp	r1, r4
 800a744:	d008      	beq.n	800a758 <memmove+0x28>
 800a746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a74a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a74e:	e7f8      	b.n	800a742 <memmove+0x12>
 800a750:	4402      	add	r2, r0
 800a752:	4601      	mov	r1, r0
 800a754:	428a      	cmp	r2, r1
 800a756:	d100      	bne.n	800a75a <memmove+0x2a>
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a75e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a762:	e7f7      	b.n	800a754 <memmove+0x24>

0800a764 <_sbrk_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d06      	ldr	r5, [pc, #24]	@ (800a780 <_sbrk_r+0x1c>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	602b      	str	r3, [r5, #0]
 800a770:	f7f7 f878 	bl	8001864 <_sbrk>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d102      	bne.n	800a77e <_sbrk_r+0x1a>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	b103      	cbz	r3, 800a77e <_sbrk_r+0x1a>
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	bd38      	pop	{r3, r4, r5, pc}
 800a780:	2000243c 	.word	0x2000243c

0800a784 <memcpy>:
 800a784:	440a      	add	r2, r1
 800a786:	4291      	cmp	r1, r2
 800a788:	f100 33ff 	add.w	r3, r0, #4294967295
 800a78c:	d100      	bne.n	800a790 <memcpy+0xc>
 800a78e:	4770      	bx	lr
 800a790:	b510      	push	{r4, lr}
 800a792:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a79a:	4291      	cmp	r1, r2
 800a79c:	d1f9      	bne.n	800a792 <memcpy+0xe>
 800a79e:	bd10      	pop	{r4, pc}

0800a7a0 <_realloc_r>:
 800a7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	460d      	mov	r5, r1
 800a7aa:	b921      	cbnz	r1, 800a7b6 <_realloc_r+0x16>
 800a7ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	f7ff bc4d 	b.w	800a050 <_malloc_r>
 800a7b6:	b92a      	cbnz	r2, 800a7c4 <_realloc_r+0x24>
 800a7b8:	f7ff fbde 	bl	8009f78 <_free_r>
 800a7bc:	4625      	mov	r5, r4
 800a7be:	4628      	mov	r0, r5
 800a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c4:	f000 f81a 	bl	800a7fc <_malloc_usable_size_r>
 800a7c8:	4284      	cmp	r4, r0
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	d802      	bhi.n	800a7d4 <_realloc_r+0x34>
 800a7ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7d2:	d8f4      	bhi.n	800a7be <_realloc_r+0x1e>
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	f7ff fc3a 	bl	800a050 <_malloc_r>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	b908      	cbnz	r0, 800a7e4 <_realloc_r+0x44>
 800a7e0:	4645      	mov	r5, r8
 800a7e2:	e7ec      	b.n	800a7be <_realloc_r+0x1e>
 800a7e4:	42b4      	cmp	r4, r6
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	bf28      	it	cs
 800a7ec:	4632      	movcs	r2, r6
 800a7ee:	f7ff ffc9 	bl	800a784 <memcpy>
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	f7ff fbbf 	bl	8009f78 <_free_r>
 800a7fa:	e7f1      	b.n	800a7e0 <_realloc_r+0x40>

0800a7fc <_malloc_usable_size_r>:
 800a7fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a800:	1f18      	subs	r0, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfbc      	itt	lt
 800a806:	580b      	ldrlt	r3, [r1, r0]
 800a808:	18c0      	addlt	r0, r0, r3
 800a80a:	4770      	bx	lr

0800a80c <fmax>:
 800a80c:	b508      	push	{r3, lr}
 800a80e:	ed2d 8b04 	vpush	{d8-d9}
 800a812:	eeb0 8a40 	vmov.f32	s16, s0
 800a816:	eef0 8a60 	vmov.f32	s17, s1
 800a81a:	eeb0 9a41 	vmov.f32	s18, s2
 800a81e:	eef0 9a61 	vmov.f32	s19, s3
 800a822:	f000 f81d 	bl	800a860 <__fpclassifyd>
 800a826:	b950      	cbnz	r0, 800a83e <fmax+0x32>
 800a828:	eeb0 8a49 	vmov.f32	s16, s18
 800a82c:	eef0 8a69 	vmov.f32	s17, s19
 800a830:	eeb0 0a48 	vmov.f32	s0, s16
 800a834:	eef0 0a68 	vmov.f32	s1, s17
 800a838:	ecbd 8b04 	vpop	{d8-d9}
 800a83c:	bd08      	pop	{r3, pc}
 800a83e:	eeb0 0a49 	vmov.f32	s0, s18
 800a842:	eef0 0a69 	vmov.f32	s1, s19
 800a846:	f000 f80b 	bl	800a860 <__fpclassifyd>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d0f0      	beq.n	800a830 <fmax+0x24>
 800a84e:	ec53 2b19 	vmov	r2, r3, d9
 800a852:	ec51 0b18 	vmov	r0, r1, d8
 800a856:	f7f6 f877 	bl	8000948 <__aeabi_dcmpgt>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d0e4      	beq.n	800a828 <fmax+0x1c>
 800a85e:	e7e7      	b.n	800a830 <fmax+0x24>

0800a860 <__fpclassifyd>:
 800a860:	ec51 0b10 	vmov	r0, r1, d0
 800a864:	460b      	mov	r3, r1
 800a866:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 800a86a:	b510      	push	{r4, lr}
 800a86c:	d104      	bne.n	800a878 <__fpclassifyd+0x18>
 800a86e:	2800      	cmp	r0, #0
 800a870:	bf0c      	ite	eq
 800a872:	2002      	moveq	r0, #2
 800a874:	2003      	movne	r0, #3
 800a876:	bd10      	pop	{r4, pc}
 800a878:	4a09      	ldr	r2, [pc, #36]	@ (800a8a0 <__fpclassifyd+0x40>)
 800a87a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 800a87e:	4294      	cmp	r4, r2
 800a880:	d908      	bls.n	800a894 <__fpclassifyd+0x34>
 800a882:	4a08      	ldr	r2, [pc, #32]	@ (800a8a4 <__fpclassifyd+0x44>)
 800a884:	4213      	tst	r3, r2
 800a886:	d007      	beq.n	800a898 <__fpclassifyd+0x38>
 800a888:	4291      	cmp	r1, r2
 800a88a:	d107      	bne.n	800a89c <__fpclassifyd+0x3c>
 800a88c:	fab0 f080 	clz	r0, r0
 800a890:	0940      	lsrs	r0, r0, #5
 800a892:	e7f0      	b.n	800a876 <__fpclassifyd+0x16>
 800a894:	2004      	movs	r0, #4
 800a896:	e7ee      	b.n	800a876 <__fpclassifyd+0x16>
 800a898:	2003      	movs	r0, #3
 800a89a:	e7ec      	b.n	800a876 <__fpclassifyd+0x16>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e7ea      	b.n	800a876 <__fpclassifyd+0x16>
 800a8a0:	7fdfffff 	.word	0x7fdfffff
 800a8a4:	7ff00000 	.word	0x7ff00000

0800a8a8 <fminf>:
 800a8a8:	b508      	push	{r3, lr}
 800a8aa:	ed2d 8b02 	vpush	{d8}
 800a8ae:	eeb0 8a40 	vmov.f32	s16, s0
 800a8b2:	eef0 8a60 	vmov.f32	s17, s1
 800a8b6:	f000 f815 	bl	800a8e4 <__fpclassifyf>
 800a8ba:	b930      	cbnz	r0, 800a8ca <fminf+0x22>
 800a8bc:	eeb0 8a68 	vmov.f32	s16, s17
 800a8c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a8c4:	ecbd 8b02 	vpop	{d8}
 800a8c8:	bd08      	pop	{r3, pc}
 800a8ca:	eeb0 0a68 	vmov.f32	s0, s17
 800a8ce:	f000 f809 	bl	800a8e4 <__fpclassifyf>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d0f4      	beq.n	800a8c0 <fminf+0x18>
 800a8d6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8de:	d5ed      	bpl.n	800a8bc <fminf+0x14>
 800a8e0:	e7ee      	b.n	800a8c0 <fminf+0x18>
	...

0800a8e4 <__fpclassifyf>:
 800a8e4:	ee10 3a10 	vmov	r3, s0
 800a8e8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a8ec:	d00d      	beq.n	800a90a <__fpclassifyf+0x26>
 800a8ee:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a8f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a8f6:	d30a      	bcc.n	800a90e <__fpclassifyf+0x2a>
 800a8f8:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <__fpclassifyf+0x34>)
 800a8fa:	1e42      	subs	r2, r0, #1
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d908      	bls.n	800a912 <__fpclassifyf+0x2e>
 800a900:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a904:	4258      	negs	r0, r3
 800a906:	4158      	adcs	r0, r3
 800a908:	4770      	bx	lr
 800a90a:	2002      	movs	r0, #2
 800a90c:	4770      	bx	lr
 800a90e:	2004      	movs	r0, #4
 800a910:	4770      	bx	lr
 800a912:	2003      	movs	r0, #3
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	007ffffe 	.word	0x007ffffe

0800a91c <_init>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	bf00      	nop
 800a920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a922:	bc08      	pop	{r3}
 800a924:	469e      	mov	lr, r3
 800a926:	4770      	bx	lr

0800a928 <_fini>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	bf00      	nop
 800a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92e:	bc08      	pop	{r3}
 800a930:	469e      	mov	lr, r3
 800a932:	4770      	bx	lr
